$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                     Modules and vector spaces
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c vbase $.
  $c vadd $.
  $c vsca $.
  $c LMod $.
  $c LVec $.

  $( Extend class notation with set of vectors in a left module or a vector
     space. $)
  cvbase $a class vbase $.

  $( Extend class notation with vector addition. $)
  cvadd $a class vadd $.

  $( Extend class notation with scalar product. $)
  cvsca $a class vsca $.

  $( Extend class notation with class of all left modules. $)
  clmod $a class LMod $.

  $( Extend class notation with class of all left vector spaces. $)
  clvec $a class LVec $.

  $( Def. 8.5.12, p. 219. $)
  $( Define set of vectors in a vector space ` v ` . $)
  df-vbase $a |- vbase = ( v e. _V |-> ( v ` 5 ) ) $.

  $( Def. 8.5.12, p. 219. $)
  $( Define vector addition. $)
  df-vadd $a |- vadd = ( v e. _V |-> ( v ` 6 ) ) $.

  $( Def. 8.5.12, p. 219. $)
  $( Define scalar product. $)
  df-vsca $a |- vsca = ( v e. _V |-> ( v ` 7 ) ) $.

  $( Utility theorem: index-independent form of vector base set ~ df-vbase . $)
  vbaseid $p |- vbase = ( f e. _V |-> ( f ` ( vbase ` ndx ) ) ) $=
    ( cvbase c5 df-vbase 5nn ndxid ) BCAADEF $.
    $( [2-Oct-2013] $)

  $( Utility theorem: index-independent form of vector addition ~ df-vadd . $)
  vaddid $p |- vadd = ( f e. _V |-> ( f ` ( vadd ` ndx ) ) ) $=
    ( cvadd c6 df-vadd 6nn ndxid ) BCAADEF $.
    $( [2-Oct-2013] $)

  $( Utility theorem: index-independent form of scalar product ~ df-vsca . $)
  vscaid $p |- vsca = ( f e. _V |-> ( f ` ( vsca ` ndx ) ) ) $=
    ( cvsca c7 df-vsca 7nn ndxid ) BCAADEF $.
    $( [2-Oct-2013] $)

  $( Utility lemma for constructing a left module or left vector space. $)
  lmodlem1 $p |- -. ( vbase ` ndx )
        e. { ( Base ` ndx ) , ( +g ` ndx ) , ( .r ` ndx ) } $=
    ( vs cnx cvbase cfv cbs cplusg cmulr ctp wcel wceq w3o wne w3a wn c5
    df-vbase 5nn ndxarg c1 1re 5re 1lt5 ltneii basendx neeqtrri eqnetri c2 2re
    2lt5 df-plusg 2nn c3 3re 3lt5 df-mulr 3nn 3pm3.2i ne3anior mpbi fvex eltp
    mtbir ) BCDZBEDZBFDZBGDZHIVCVDJVCVEJVCVFJKZVCVDLZVCVELZVCVFLZMVGNVHVIVJVCOV
    DCOAAPQRZOSVDSOTUAUBUCUDUEUFVCOVEVKOUGVEUGOUHUAUIUCFUGAAUJUKRUEUFVCOVFVKOUL
    VFULOUMUAUNUCGULAAUOUPRUEUFUQVCVDVCVEVCVFURUSVCVDVEVFBCUTVAVB $.
    $( [30-Sep-2013] $)

  $( Utility lemma for constructing a left module or left vector space. $)
  lmodlem2 $p |- -. ( vadd ` ndx ) e. ( { ( Base ` ndx ) , ( +g ` ndx ) ,
         ( .r ` ndx ) } u. { ( vbase ` ndx ) } ) $=
    ( vs cnx cvadd cfv cbs cplusg cmulr ctp cvbase csn cun wcel wceq w3o wo
    wne w3a wn c6 df-vadd 6nn ndxarg c1 1re 6re 1lt6 ltneii basendx neeqtrri
    eqnetri c2 2re 2lt6 df-plusg 2nn c3 3re 3lt6 df-mulr 3nn 3pm3.2i ne3anior
    mpbi c5 5re 5lt6 df-vbase 5nn df-ne pm3.2ni elun fvex eltp elsnc orbi12i
    bitri mtbir ) BCDZBEDZBFDZBGDZHZBIDZJZKLZVRVSMVRVTMVRWAMNZVRWCMZOZWFWGVRVSP
    ZVRVTPZVRWAPZQWFRWIWJWKVRSVSCSAATUAUBZSUCVSUCSUDUEUFUGUHUIUJVRSVTWLSUKVTUKS
    ULUEUMUGFUKAAUNUOUBUIUJVRSWAWLSUPWAUPSUQUEURUGGUPAAUSUTUBUIUJVAVRVSVRVTVRWA
    VBVCVRWCPWGRVRSWCWLSVDWCVDSVEUEVFUGIVDAAVGVHUBUIUJVRWCVIVCVJWEVRWBLZVRWDLZO
    WHVRWBWDVKWMWFWNWGVRVSVTWABCVLZVMVRWCWOVNVOVPVQ $.
    $( [30-Sep-2013] $)

  $( Utility lemma for constructing a left module or left vector space. $)
  lmodlem3 $p |- -. ( vsca ` ndx ) e. ( { ( Base ` ndx ) , ( +g ` ndx ) ,
         ( .r ` ndx ) } u. { ( vbase ` ndx ) , ( vadd ` ndx ) } ) $=
    ( vs cnx cvsca cfv cbs cplusg cmulr ctp cvbase cvadd cpr cun wcel wceq w3o
    wo wne w3a wn c7 df-vsca 7nn ndxarg c1 1re 7re 1lt7 ltneii basendx
    neeqtrri eqnetri c2 2re 2lt7 df-plusg 2nn c3 3re 3lt7 df-mulr 3nn 3pm3.2i
    ne3anior mpbi wa c5 5re 5lt7 df-vbase 5nn c6 6re 6lt7 df-vadd 6nn pm3.2i
    neanior pm3.2ni elun fvex eltp elpr orbi12i bitri mtbir ) BCDZBEDZBFDZBGDZH
    ZBIDZBJDZKZLMZWFWGNWFWHNWFWINOZWFWKNWFWLNPZPZWOWPWFWGQZWFWHQZWFWIQZRWOSWRWS
    WTWFTWGCTAAUAUBUCZTUDWGUDTUEUFUGUHUIUJUKWFTWHXATULWHULTUMUFUNUHFULAAUOUPUCU
    JUKWFTWIXATUQWIUQTURUFUSUHGUQAAUTVAUCUJUKVBWFWGWFWHWFWIVCVDWFWKQZWFWLQZVEWP
    SXBXCWFTWKXATVFWKVFTVGUFVHUHIVFAAVIVJUCUJUKWFTWLXATVKWLVKTVLUFVMUHJVKAAVNVO
    UCUJUKVPWFWKWFWLVQVDVRWNWFWJMZWFWMMZPWQWFWJWMVSXDWOXEWPWFWGWHWIBCVTZWAWFWKW
    LXFWBWCWDWE $.
    $( [30-Sep-2013] $)

  ${
    lvecfn.w $e |- W = ( { <. ( Base ` ndx ) , B >. , <. ( +g ` ndx ) , P >. ,
                   <. ( .r ` ndx ) , T >. }
                u. { <. ( vbase ` ndx ) , V >. , <. ( vadd ` ndx ) , A >. ,
                   <. ( vsca ` ndx ) , S >. } ) $.
    ${
      lvecfn.d $e |- D = ( { ( Base ` ndx ) , ( +g ` ndx ) , ( .r ` ndx ) }
                  u. { ( vbase ` ndx ) , ( vadd ` ndx ) , ( vsca ` ndx ) } ) $.
      $( A constructed left module or left vector space is a function on
         ` D ` .  Starting from ~ rngfn (which has 3 members), we chain
         ~ fnunsn 3 times, each time adding an ordered pair to the function, to
         get all 6 members. $)
      lmodfn $p |- W Fn D $=
        ( cnx cbs cfv cplusg cmulr ctp cvbase cvadd cpr cun cop cvsca fvex csn
        eqid rngfn lmodlem1 fnunsn df-pr uneq2i unass eqtr4i lmodlem2 df-tp
        3eqtr4i lmodlem3 ) KLMZKNMZKOMZPZKQMZKRMZSZTZCUQBUAURDUAUSFUAPZVAGUAZVB
        AUAZSZTZHKUBMZEKUBUCUTVAUDZTZVDVEVFUDZTZVIVBAKRUCUTVLVEVNVAGKQUCBUTDVEF
        VEUEUTUEUFVNUEVLUEUGUHVIVEVMVGUDZTZTVNVOTVHVPVEVFVGUIUJVEVMVOUKULVDUTVK
        VBUDZTZTVLVQTVCVRUTVAVBUIUJUTVKVQUKULUMUHVEVFVGVJEUAZPZTVEVHVSUDZTZTHVI
        WATVTWBVEVFVGVSUNUJIVEVHWAUKUOUTVAVBVJPZTUTVCVJUDZTZTCVDWDTWCWEUTVAVBVJ
        UNUJJUTVCWDUKUOUPUH $.
        $( [1-Oct-2013] $)
    $}

    $( Lemma to shorten proofs of ~ lmodbase through ~ lmodvsca . $)
    lmodfun $p |- Fun W $=
      ( cnx cbs cfv cplusg cmulr ctp cvbase cvadd cvsca cun wfn wfun eqid
      lmodfn fnfun ax-mp ) GIJKILKIMKNIOKIPKIQKNRZSGTABUECDEFGHUEUAUBUEGUCUD $.
      $( [4-Oct-2013] $)

    $( The base set of a constructed left vector space. $)
    lmodbase $p |- ( B e. X -> B = ( Base ` W ) ) $=
      ( vs cbs cnx cfv cop cplusg cmulr ctp cvbase cvadd cvsca cun cvv tpex
      unex eqeltri lmodfun baseid ssun1 opex tpid1 sselii eleqtrri strfv ) BGKH
      JGLKMZBNZLOMCNZLPMENZQZLRMFNZLSMANZLTMDNZQZUAZUBIURVBUOUPUQUCUSUTVAUCUDUE
      ABCDEFGIUFJUGUOVCGURVCUOURVBUHUOUPUQUNBUIUJUKIULUM $.
      $( [2-Oct-2013] $)

    $( The additive operation of a constructed left vector space. $)
    lmodplusg $p |- ( P e. X -> P = ( +g ` W ) ) $=
      ( vs cplusg cnx cbs cfv cop cmulr ctp cvbase cvadd cvsca cun cvv tpex
      unex eqeltri lmodfun plusgid ssun1 opex tpid2 sselii eleqtrri strfv ) CGK
      HJGLMNBOZLKNZCOZLPNEOZQZLRNFOZLSNAOZLTNDOZQZUAZUBIURVBUNUPUQUCUSUTVAUCUDU
      EABCDEFGIUFJUGUPVCGURVCUPURVBUHUNUPUQUOCUIUJUKIULUM $.
      $( [2-Oct-2013] $)

    $( The multiplicative operation of a constructed left vector space. $)
    lmodmulr $p |- ( T e. X -> T = ( .r ` W ) ) $=
      ( vs cmulr cnx cbs cfv cop cplusg ctp cvbase cvadd cvsca cun cvv tpex
      unex eqeltri lmodfun mulrid ssun1 opex tpid3 sselii eleqtrri strfv ) EGKH
      JGLMNBOZLPNCOZLKNZEOZQZLRNFOZLSNAOZLTNDOZQZUAZUBIURVBUNUOUQUCUSUTVAUCUDUE
      ABCDEFGIUFJUGUQVCGURVCUQURVBUHUNUOUQUPEUIUJUKIULUM $.
      $( [2-Oct-2013] $)

    $( The set of vectors of a constructed left vector space. $)
    lmodvbase $p |- ( V e. X -> V = ( vbase ` W ) ) $=
      ( vs cvbase cnx cbs cfv cop cplusg cmulr ctp cvadd cvsca cun cvv tpex
      unex eqeltri lmodfun vbaseid ssun2 opex tpid1 sselii eleqtrri strfv ) FGK
      HJGLMNBOZLPNCOZLQNEOZRZLKNZFOZLSNAOZLTNDOZRZUAZUBIUQVBUNUOUPUCUSUTVAUCUDU
      EABCDEFGIUFJUGUSVCGVBVCUSVBUQUHUSUTVAURFUIUJUKIULUM $.
      $( [2-Oct-2013] $)

    $( The vector addition operation of a constructed left vector space. $)
    lmodvadd $p |- ( A e. X -> A = ( vadd ` W ) ) $=
      ( vs cvadd cnx cbs cfv cop cplusg cmulr ctp cvbase cvsca cun cvv tpex
      unex eqeltri lmodfun vaddid ssun2 opex tpid2 sselii eleqtrri strfv ) AGKH
      JGLMNBOZLPNCOZLQNEOZRZLSNFOZLKNZAOZLTNDOZRZUAZUBIUQVBUNUOUPUCURUTVAUCUDUE
      ABCDEFGIUFJUGUTVCGVBVCUTVBUQUHURUTVAUSAUIUJUKIULUM $.
      $( [2-Oct-2013] $)

    $( The scalar product operation of a constructed left vector space. $)
    lmodvsca $p |- ( S e. X -> S = ( vsca ` W ) ) $=
      ( vs cvsca cnx cbs cfv cop cplusg cmulr ctp cvbase cvadd cun cvv tpex
      unex eqeltri lmodfun vscaid ssun2 opex tpid3 sselii eleqtrri strfv ) DGKH
      JGLMNBOZLPNCOZLQNEOZRZLSNFOZLTNAOZLKNZDOZRZUAZUBIUQVBUNUOUPUCURUSVAUCUDUE
      ABCDEFGIUFJUGVAVCGVBVCVAVBUQUHURUSVAUTDUIUJUKIULUM $.
      $( [2-Oct-2013] $)
  $}

  ${
    $d a f k p q r s t v w x $.
    $( Def. 8.5.11, p. 218. $)
    $( Define the class of all left modules, which are generalizations of left
       vector spaces.  A left module is a ring together with an Abelian group
       and a left scalar product connecting them. $)
    df-lmod $a |- LMod = { f e. Ring |
      E. k E. p E. t E. v E. a E. s
         ( ( k = ( Base ` f ) /\ p = ( +g ` f ) /\ t = ( .r ` f ) )
          /\ ( v = ( vbase ` f ) /\ a = ( vadd ` f ) /\ s = ( vsca ` f ) )
          /\ ( { <. ( Base ` ndx ) , v >. , <. ( +g ` ndx ) , a >. } e. Abel
             /\ A. q e. k A. r e. k A. x e. v A. w e. v
               ( ( ( r s w ) e. v
                 /\ ( r s ( w a x ) ) = ( ( r s w ) a ( r s x ) )
                 /\ ( ( q p r ) s w ) = ( ( q s w ) a ( r s w ) )
               ) /\ ( ( q s ( r s w ) ) = ( ( q t r ) s w )
                 /\ ( ( 1r ` f ) s w ) = w ) ) ) ) } $.
  $}

  ${
    $d a f k p q r s t v w x A $.  $d a s G $.  $d a f k p q r s t v K $.
    $d a f k p q r s t v w x P $.  $d a f k p q r s t v w x S $.
    $d a f k p q r s t v w x T $.  $d a f k p s t v U $.
    $d a f k p q r s t v w x V $.  $d a f k p q r s t v w x W $.
    islmod.k $e |- K = ( Base ` W ) $.
    islmod.p $e |- P = ( +g ` W ) $.
    islmod.t $e |- T = ( .r ` W ) $.
    islmod.v $e |- V = ( vbase ` W ) $.
    islmod.a $e |- A = ( vadd ` W ) $.
    islmod.s $e |- S = ( vsca ` W ) $.
    islmod.u $e |- U = ( 1r ` W ) $.
    islmod.g $e |- G = { <. ( Base ` ndx ) , V >. , <. ( +g ` ndx ) , A >. } $.
    $( The predicate "is a left module". $)
    islmod $p |- ( W e. LMod <-> ( W e. Ring /\ G e. Abel
        /\ A. q e. K A. r e. K A. x e. V A. w e. V
               ( ( ( r S w ) e. V
                 /\ ( r S ( w A x ) ) = ( ( r S w ) A ( r S x ) )
                 /\ ( ( q P r ) S w ) = ( ( q S w ) A ( r S w ) )
               ) /\ ( ( q S ( r S w ) ) = ( ( q T r ) S w )
                 /\ ( U S w ) = w ) ) ) ) $=
      ( vk vp vt vv va vs vf crg wcel cv wceq w3a cnx cbs cfv cop cplusg cpr
      cabel co wa wral wex clmod cvv fvex eqeltri cmulr cvbase cvadd cvsca
      raleq raleqbi1dv anbi2d opreq opreq1d eqeq1d 3anbi3d anbi1d 2ralbidv
      eqeq2d opeq2 preq1d eleq1d eleq2 3anbi1d anbi12d preq2d syl6eqr opreq2d
      eqeq12d 3anbi23d opreq12d 3anbi123d id eqidd opreq123d ceqsex6v anbi2i
      cur fveq2 3exbidv df-lmod elrab2 3anass 3bitr4i ) KUIUJZUBUKZIULZUCUKZDUL
      ZUDUKZFULZUMZUEUKZJULZUFUKZCULZUGUKZEULZUMZUNUOUPZXPUQZUNURUPZXRUQZUSZUTU
      JZLUKZBUKZXTVAZXPUJZYIYJAUKZXRVAZXTVAZYKYIYMXTVAZXRVAZULZMUKZYIXKVAZYJXTV
      AZYSYJXTVAZYKXRVAZULZUMZYSYKXTVAZYSYIXMVAZYJXTVAZULZGYJXTVAZYJULZVBZVBZBX
      PVCAXPVCZLXIVCZMXIVCZVBZUMZUGVDUFVDUEVDZUDVDUCVDUBVDZVBXHHUTUJZYIYJEVAZJU
      JZYIYJYMCVAZEVAZUVBYIYMEVAZCVAZULZYSYIDVAZYJEVAZYSYJEVAZUVBCVAZULZUMZYSUV
      BEVAZYSYIFVAZYJEVAZULZGYJEVAZYJULZVBZVBZBJVCAJVCZLIVCMIVCZVBZVBKVEUJXHUVA
      UWDUMUUTUWEXHUUQYHUUNLIVCZMIVCZVBYHYLYRUVIYJXTVAZUUCULZUMZUULVBZBXPVCAXPV
      CZLIVCMIVCZVBYHUWJUUFUVPYJXTVAZULZUUKVBZVBZBXPVCZAXPVCZLIVCMIVCZVBYCJUQZY
      FUSZUTUJZYKJUJZYRUWIUMZUWPVBZBJVCZAJVCZLIVCMIVCZVBUVAUXDYIUVDXTVAZYKYPCVA
      ZULZUWHUUBYKCVAZULZUMZUWPVBZBJVCAJVCZLIVCMIVCZVBUWEUBUCUDUEUFUGIDFJCEIKUO
      UPZVFNKUOVGVHDKURUPZVFOKURVGVHFKVIUPZVFPKVIVGVHJKVJUPZVFQKVJVGVHCKVKUPZVF
      RKVKVGVHEKVLUPZVFSKVLVGVHXJUUPUWGYHUUOUWFMXIIUUNLXIIVMVNVOXLUWGUWMYHXLUUN
      UWLMLIIXLUUMUWKABXPXPXLUUEUWJUULXLUUDUWIYLYRXLUUAUWHUUCXLYTUVIYJXTYSYIXKD
      VPVQVRVSVTWAWAVOXNUWMUWTYHXNUWLUWSMLIIXNUWKUWQABXPXPXNUULUWPUWJXNUUIUWOUU
      KXNUUHUWNUUFXNUUGUVPYJXTYSYIXMFVPVQWBVTVOWAWAVOXQYHUXCUWTUXIXQYGUXBUTXQYD
      UXAYFXPJYCWCWDWEXQUWSUXHMLIIUWRUXGAXPJUWQUXFBXPJXQUWJUXEUWPXQYLUXDYRUWIXP
      JYKWFWGVTVNVNWAWHXSUXCUVAUXIUXRXSUXBHUTXSUXBUXAYECUQZUSHXSYFUYEUXAXRCYEWC
      WIUAWJWEXSUXHUXQMLIIXSUXFUXPABJJXSUXEUXOUWPXSYRUXLUWIUXNUXDXSYOUXJYQUXKXS
      YNUVDYIXTYJYMXRCVPWKYKYPXRCVPWLXSUUCUXMUWHUUBYKXRCVPWBWMVTWAWAWHYAUXRUWDU
      VAYAUXQUWCMLIIYAUXPUWBABJJYAUXOUVNUWPUWAYAUXDUVCUXLUVHUXNUVMYAYKUVBJYIYJX
      TEVPZWEYAUXJUVEUXKUVGYIUVDXTEVPYAYKUVBYPUVFCUYFYIYMXTEVPWNWLYAUWHUVJUXMUV
      LUVIYJXTEVPYAUUBUVKYKUVBCYSYJXTEVPUYFWNWLWOYAUWOUVRUUKUVTYAUUFUVOUWNUVQYA
      YSYSYKUVBXTEYAWPYAYSWQUYFWRUVPYJXTEVPWLYAUUJUVSYJGYJXTEVPVRWHWHWAWAVOWSWT
      XIUHUKZUOUPZULZXKUYGURUPZULZXMUYGVIUPZULZUMZXPUYGVJUPZULZXRUYGVKUPZULZXTU
      YGVLUPZULZUMZYHUUEUUIUYGXAUPZYJXTVAZYJULZVBZVBZBXPVCAXPVCZLXIVCMXIVCZVBZU
      MZUGVDUFVDUEVDZUDVDUCVDUBVDUUTUHKUIVEUYGKULZVUKUUSUBUCUDVULVUJUURUEUFUGVU
      LUYNXOVUAYBVUIUUQVULUYIXJUYKXLUYMXNVULUYHIXIVULUYHUXSIUYGKUOXBNWJWBVULUYJ
      DXKVULUYJUXTDUYGKURXBOWJWBVULUYLFXMVULUYLUYAFUYGKVIXBPWJWBWOVULUYPXQUYRXS
      UYTYAVULUYOJXPVULUYOUYBJUYGKVJXBQWJWBVULUYQCXRVULUYQUYCCUYGKVKXBRWJWBVULU
      YSEXTVULUYSUYDEUYGKVLXBSWJWBWOVULVUHUUPYHVULVUGUUNMLXIXIVULVUFUUMABXPXPVU
      LVUEUULUUEVULVUDUUKUUIVULVUCUUJYJVULVUBGYJXTVULVUBKXAUPGUYGKXAXBTWJVQVRVO
      VOWAWAVOWOXCXCABUEUDUHUBUGLMUCUFXDXEXHUVAUWDXFXG $.
      $( [4-Nov-2013] $)

    $d q r w x Q $.  $d q r w x R $.  $d q r w x U $.  $d w x X $.  $d w Y $.
    $( Lemma for properties of a left module. $)
    lmodlema $p |- ( ( W e. LMod /\ ( Q e. K /\ R e. K )
          /\ ( X e. V /\ Y e. V ) ) ->
               ( ( ( R S Y ) e. V
                 /\ ( R S ( Y A X ) ) = ( ( R S Y ) A ( R S X ) )
                 /\ ( ( Q P R ) S Y ) = ( ( Q S Y ) A ( R S Y ) )
               ) /\ ( ( Q S ( R S Y ) ) = ( ( Q T R ) S Y )
                 /\ ( U S Y ) = Y ) ) ) $=
      ( vr vw vx vq clmod wcel wa co wceq w3a crg cabel cv wral wi islmod
      opreq1 opreq1d eqeq12d 3anbi3d anbi1d anbi12d 2ralbidv eleq1d opreq12d
      opreq2 opreq2d 3anbi123d rcla42v 3anbi2d id com12 syl6com imp3a 3ad2ant3
      sylbi 3impib ) KUFUGZCIUGDIUGUHZLJUGMJUGUHZDMEUIZJUGZDMLAUIZEUIZWBDLEUIZA
      UIZUJZCDBUIZMEUIZCMEUIZWBAUIZUJZUKZCWBEUIZCDFUIZMEUIZUJZGMEUIZMUJZUHZUHZV
      SKULUGZHUMUGZUBUNZUCUNZEUIZJUGZXEXFUDUNZAUIZEUIZXGXEXIEUIZAUIZUJZUEUNZXEB
      UIZXFEUIZXOXFEUIZXGAUIZUJZUKZXOXGEUIZXOXEFUIZXFEUIZUJZGXFEUIZXFUJZUHZUHZU
      CJUOUDJUOZUBIUOUEIUOZUKVTWAUHXBUPZUDUCABEFGHIJKUBUENOPQRSTUAUQYKXCYLXDYKV
      TWAXBVTYKDXFEUIZJUGZDXJEUIZYMDXIEUIZAUIZUJZWIXFEUIZCXFEUIZYMAUIZUJZUKZCYM
      EUIZWPXFEUIZUJZYGUHZUHZUCJUOUDJUOZWAXBUPYJUUIXHXNCXEBUIZXFEUIZYTXGAUIZUJZ
      UKZCXGEUIZCXEFUIZXFEUIZUJZYGUHZUHZUCJUOUDJUOUEUBCDIIXOCUJZYIUUTUDUCJJUVAY
      AUUNYHUUSUVAXTUUMXHXNUVAXQUUKXSUULUVAXPUUJXFEXOCXEBURUSUVAXRYTXGAXOCXFEUR
      USUTVAUVAYEUURYGUVAYBUUOYDUUQXOCXGEURUVAYCUUPXFEXOCXEFURUSUTVBVCVDXEDUJZU
      UTUUHUDUCJJUVBUUNUUCUUSUUGUVBXHYNXNYRUUMUUBUVBXGYMJXEDXFEURZVEUVBXKYOXMYQ
      XEDXJEURUVBXGYMXLYPAUVCXEDXIEURVFUTUVBUUKYSUULUUAUVBUUJWIXFEXEDCBVGUSUVBX
      GYMYTAUVCVHUTVIUVBUURUUFYGUVBUUOUUDUUQUUEUVBXGYMCEUVCVHUVBUUPWPXFEXEDCFVG
      USUTVBVCVDVJWAUUIXBUUHXBYNDXFLAUIZEUIZYMWFAUIZUJZUUBUKZUUGUHUDUCLMJJXILUJ
      ZUUCUVHUUGUVIYRUVGYNUUBUVIYOUVEYQUVFUVIXJUVDDEXILXFAVGVHUVIYPWFYMAXILDEVG
      VHUTVKVBXFMUJZUVHWNUUGXAUVJYNWCUVGWHUUBWMUVJYMWBJXFMDEVGZVEUVJUVEWEUVFWGU
      VJUVDWDDEXFMLAURVHUVJYMWBWFAUVKUSUTUVJYSWJUUAWLXFMWIEVGUVJYTWKYMWBAXFMCEV
      GUVKVFUTVIUVJUUFWRYGWTUVJUUDWOUUEWQUVJYMWBCEUVKVHXFMWPEVGUTUVJYFWSXFMXFMG
      EVGUVJVLUTVCVCVJVMVNVOVPVQVR $.
      $( [8-Dec-2013] $)
  $}

  ${
    $d q r w x A $.  $d q r w x V $.  $d q r w x W $.
    lmodlemb.v $e |- V = ( vbase ` W ) $.
    lmodlemb.a $e |- A = ( vadd ` W ) $.
    lmodlemb.g $e |- G = { <. ( Base ` ndx ) , V >. , <. ( +g ` ndx ) , A >. }
        $.
    $( Lemma for properties of a left module. $)
    lmodlemb $p |- ( W e. LMod -> ( W e. Ring /\ G e. Abel ) ) $=
      ( vr vw vx vq clmod wcel crg cabel cv cvsca cfv co wceq cplusg w3a cmulr
      cur wa wral cbs eqid islmod 3simpa sylbi ) DLMDNMZBOMZHPZIPZDQRZSZCMUNUOJ
      PZASUPSUQUNURUPSASTKPZUNDUARZSUOUPSUSUOUPSUQASTUBUSUQUPSUSUNDUCRZSUOUPSTD
      UDRZUOUPSUOTUEUEICUFJCUFHDUGRZUFKVCUFZUBULUMUEJIAUTUPVAVBBVCCDHKVCUHUTUHV
      AUHEFUPUHVBUHGUIULUMVDUJUK $.
      $( [8-Dec-2013] $)

    $( The vectors in a left module form an Abelian group. $)
    lmodabl $p |- ( W e. LMod -> G e. Abel ) $=
      ( clmod wcel crg cabel lmodlemb simprd ) DHIDJIBKIABCDEFGLM $.
      $( [8-Dec-2013] $)
  $}

  ${
    $( A left module is a ring. $)
    lmodrng $p |- ( W e. LMod -> W e. Ring ) $=
      ( clmod wcel crg cnx cbs cfv cvbase cop cplusg cvadd cpr cabel eqid
      lmodlemb simpld ) ABCADCEFGAHGZIEJGAKGZILZMCRSQAQNRNSNOP $.
      $( [8-Dec-2013] $)
  $}

  ${
    lmodbn0.b $e |- B = ( Base ` W ) $.
    $( The base set of a left module is nonempty. $)
    lmodbn0 $p |- ( W e. LMod -> B =/= (/) ) $=
      ( clmod wcel crg cgrp c0 wne lmodrng ringgrp grpn0 3syl ) BDEBFEBGEAHIBJB
      KABCLM $.
      $( [8-Dec-2013] $)
  $}

  ${
    lmodvn0.v $e |- V = ( vbase ` W ) $.
    $( The set of vectors in a left module is nonempty. $)
    lmodvn0 $p |- ( W e. LMod -> V =/= (/) ) $=
      ( clmod wcel cnx cbs cfv cop cplusg cvadd cpr cabel cgrp c0 wne eqid
      lmodabl ablgrp cvv wceq cvbase fvex eqeltri grpbase ax-mp grpn0 3syl ) BD
      EFGHAIFJHBKHZILZMEUJNEAOPUIUJABCUIQUJQZRUJSAUJATEAUJGHUAABUBHTCBUBUCUDAUI
      UJTUKUEUFUGUH $.
      $( [8-Dec-2013] $)
  $}

  ${
    lmodvacl.v $e |- V = ( vbase ` W ) $.
    lmodvacl.a $e |- A = ( vadd ` W ) $.
    $( Closure of vector addition for a left module. $)
    lmodvacl $p |- ( ( W e. LMod /\ X e. V /\ Y e. V ) -> ( X A Y ) e. V ) $=
      ( clmod wcel cnx cbs cfv cop cplusg cpr cgrp co cabel eqid lmodabl
      ablgrp syl cvv wceq cvbase fvex eqeltri grpbase ax-mp cvadd grpplusg
      grpcl syl3an1 ) CHIZJKLBMJNLAMOZPIZDBIEBIDEAQBIUNUORIUPAUOBCFGUOSZTUOUAUB
      BAUODEBUCIBUOKLUDBCUELUCFCUEUFUGBAUOUCUQUHUIAUCIAUONLUDACUJLUCGCUJUFUGBAU
      OUCUQUKUIULUM $.
      $( [8-Dec-2013] $)
  $}

  ${
    $d p y K $.  $d p y R $.  $d p y S $.  $d p y V $.  $d p y W $.
    $d p y X $.
    lmodvscl.k $e |- K = ( Base ` W ) $.
    lmodvscl.v $e |- V = ( vbase ` W ) $.
    lmodvscl.s $e |- S = ( vsca ` W ) $.
    $( Closure of scalar product for a left module. $)
    lmodvscl $p |- ( ( W e. LMod /\ R e. K /\ X e. V ) -> ( R S X ) e. V ) $=
      ( vy vp clmod wcel co cv wex wa wi c0 wne lmodvn0 n0 sylib lmodbn0 an4
      w3a cvadd cfv wceq cplusg cmulr cur cnx cbs cop cpr eqid lmodlema simpl1
      syl 3expib syl5bi exp4c 19.23adv mpd 3impib ) ELMZACMZFDMZAFBNZDMZVGJOZDM
      ZJPZVHVIQZVKRZVGDSTVNDEHUAJDUBUCVGVMVPJVGKOZCMZKPZVMVPRZVGCSTVSCEGUDKCUBU
      CVGVRVTKVGVRVMVOVKVRVMQVOQVRVHQZVMVIQZQVGVKVRVMVHVIUEVGWAWBVKVGWAWBUFVKAF
      VLEUGUHZNBNVJAVLBNWCNUIZVQAEUJUHZNFBNVQFBNVJWCNUIZUFVQVJBNVQAEUKUHZNFBNUI
      EULUHZFBNFUIQZQVKWCWEVQABWGWHUMUNUHDUOUMUJUHWCUOUPZCDEVLFGWEUQWGUQHWCUQIW
      HUQWJUQURVKWDWFWIUSUTVAVBVCVDVEVDVEVF $.
      $( [8-Dec-2013] $)
  $}

  $c 0v $.

  $( Extend class notation with zero vector. $)
  czv $a class 0v $.

  $( Def. 8.5.13, p. 219. $)
  $( Define zero vector. $)
  df-zv $a |- 0v = ( v e. _V |-> ( 0g ` { <. ( Base ` ndx ) , ( vbase ` v ) >.
         , <. ( +g ` ndx ) , ( vadd ` v ) >. } ) ) $.

  $c LSubSp $.

  $( Extend class notation with all (not necessarily closed) linear subspaces
     of a left module or left vector space. $)
  clss $a class LSubSp $.

  ${
    $d w s x y z $.
    $( Define the set of all (not necessarily closed) linear subspaces of a
       left module or left vector space. $)
    df-lss $a |- LSubSp = ( w e. _V |-> { s e. ~P ( vbase ` w ) |
         A. a e. s A. b e. s A. x e. ( Base ` w )
           ( a ( vadd ` w ) ( x ( vsca ` w ) b ) ) e. s } ) $.
  $}

  ${
    $d w x B $.  $d w P $.  $d w T $.  $d s w V $.  $d a b s w x W $.
    lssset.b $e |- B = ( Base ` W ) $.
    lssset.v $e |- V = ( vbase ` W ) $.
    lssset.p $e |- P = ( vadd ` W ) $.
    lssset.t $e |- T = ( vsca ` W ) $.
    lssset.s $e |- S = ( LSubSp ` W ) $.
    $( The set of all (not necessarily closed) linear subspaces of a left
       module or left vector space. $)
    lssset $p |- ( W e. X -> S
    = { s e. ~P V | A. a e. s A. b e. s A. x e. B ( a P ( x T b ) ) e. s } ) $=
      ( vw wcel cvv cv co wral cpw crab wceq elisset clss cfv cvsca cvadd cbs
      cvbase fveq2 syl6eqr pweqd eqidd opreqd opreq123d eleq1d raleqbidv
      2ralbidv rabeqbidv df-lss fvex eqeltri pwex rabex fvmpt syl5eq syl ) GHRG
      SRZDJTZATZKTZEUAZCUAZITZRZABUBZKVQUBJVQUBZIFUCZUDZUEGHUFVKDGUGUHWBPQGVLVM
      VNQTZUIUHZUAZWCUJUHZUAZVQRZAWCUKUHZUBZKVQUBJVQUBZIWCULUHZUCZUDWBSUGWCGUEZ
      WKVTIWMWAWNWLFWNWLGULUHZFWCGULUMMUNUOWNWJVSJKVQVQWNWHVRAWIBWNWIGUKUHBWCGU
      KUMLUNWNWGVPVQWNVLVLWEVOWFCWNWFGUJUHCWCGUJUMNUNWNVLUPWNWDEVMVNWNWDGUIUHEW
      CGUIUMOUNUQURUSUTVAVBAQIJKVCVTIWAFFWOSMGULVDVEVFVGVHVIVJ $.
      $( [8-Dec-2013] $)

    $d s B $.  $d s P $.  $d s T $.  $d a b s x U $.
    $( The predicate "is a subspace" (of a left module or left vector
       space). $)
    islss $p |- ( W e. X -> ( U e. S
  <-> ( U C_ V /\ A. a e. U A. b e. U A. x e. B ( a P ( x T b ) ) e. U ) ) ) $=
      ( vs wcel cv co wral cpw crab wss wa lssset eleq2d wceq eleq2 ralbidv
      raleqbi1dv elrab cvbase cfv cvv fvex eqeltri elpw2 anbi1i bitri syl6bb )
      HIRZFDRFJSASKSETCTZQSZRZABUAZKVDUAZJVDUAZQGUBZUCZRZFGUDZVCFRZABUAZKFUAZJF
      UAZUEZVBDVJFABCDEGHIQJKLMNOPUFUGVKFVIRZVPUEVQVHVPQFVIVGVOJVDFVFVNKVDFVDFU
      HVEVMABVDFVCUIUJUKUKULVRVLVPFGGHUMUNUOMHUMUPUQURUSUTVA $.
      $( [8-Dec-2013] $)
  $}

  ${
    $d a b x U $.  $d a b x W $.  $d a b x ph $.
    islssd.b $e |- ( ph -> B = ( Base ` W ) ) $.
    islssd.v $e |- ( ph -> V = ( vbase ` W ) ) $.
    islssd.p $e |- ( ph -> P = ( vadd ` W ) ) $.
    islssd.t $e |- ( ph -> T = ( vsca ` W ) ) $.
    islssd.s $e |- ( ph -> S = ( LSubSp ` W ) ) $.
    islssd.u $e |- ( ph -> U C_ V ) $.
    islssd.c $e |- ( ( ph /\ ( a e. U /\ b e. U /\ x e. B ) ) ->
            ( a P ( x T b ) ) e. U ) $.
    $( Properties that determine a subspace of a left module or left vector
       space. $)
    islssd $p |- ( ( ph /\ W e. X ) -> U e. S ) $=
      ( wcel wa clss cfv cvbase wss cv cvsca co cvadd cbs wral wb eqid islss
      adantl sseqtrd adantr wi 3exp2 imp32 eleq2d eqidd opreqd opreq123d
      eleq1d 3imtr3d r19.21aiv r19.21aivva mpbir2and wceq eleqtrrd ) AIJTZUAZGI
      UBUCZEVMGVNTZGIUDUCZUEZKUFZBUFZLUFZIUGUCZUHZIUIUCZUHZGTZBIUJUCZUKZLGUKKGU
      KZVLVOVQWHUAULABWFWCVNWAGVPIJKLWFUMVPUMWCUMWAUMVNUMUNUOAVQVLAGHVPRNUPUQAW
      HVLAWGKLGGAVRGTZVTGTZUAZUAZWEBWFWLVSCTZVRVSVTFUHZDUHZGTZVSWFTZWEAWIWJWMWP
      URAWIWJWMWPSUSUTAWMWQULWKACWFVSMVAUQAWPWEULWKAWOWDGAVRVRWNWBDWCOAVRVBAFWA
      VSVTPVCVDVEUQVFVGVHUQVIAEVNVJVLQUQVK $.
      $( [8-Dec-2013] $)
  $}

  ${
    $d x y z B $.  $d x y z P $.  $d x y z T $.  $d x y z U $.  $d x y z W $.
    $d x y z X $.  $d y z Y $.  $d z Z $.
    lsscl.b $e |- B = ( Base ` W ) $.
    lsscl.p $e |- P = ( vadd ` W ) $.
    lsscl.t $e |- T = ( vsca ` W ) $.
    lsscl.s $e |- S = ( LSubSp ` W ) $.
    $( Closure property of a subspace. $)
    lsscl $p |- ( ( ( W e. V /\ U e. S ) /\ ( X e. U /\ Y e. U /\ Z e. B ) )
       -> ( X P ( Z T Y ) ) e. U ) $=
      ( vx vz vy wcel w3a co cvbase cfv wss cv wral wa wi eqid islss wceq
      opreq1 eleq1d ralbidv opreq2 opreq2d rcla42v rcla4cv syl6com exp3a 3impd
      adantl syl6bi imp31 ) GFRZECRZHERZIERZJARZSZHJIDTZBTZERZVDVEEGUAUBZUCZOUD
      ZPUDZQUDZDTZBTZERZPAUEZQEUEOEUEZUFVIVLUGZPABCDEVMGFOQKVMUHLMNUIWBWCVNWBVF
      VGVHVLWBVFVGVHVLUGZVFVGUFWBHVPIDTZBTZERZPAUEZWDWAWHHVRBTZERZPAUEOQHIEEVOH
      UJZVTWJPAWKVSWIEVOHVRBUKULUMVQIUJZWJWGPAWLWIWFEWLVRWEHBVQIVPDUNUOULUMUPWG
      VLPJAVPJUJZWFVKEWMWEVJHBVPJIDUKUOULUQURUSUTVAVBVC $.
      $( [8-Dec-2013] $)
  $}

  ${
    $d a b x U $.  $d a b x V $.  $d a b x W $.
    lssss.v $e |- V = ( vbase ` W ) $.
    lssss.s $e |- S = ( LSubSp ` W ) $.
    $( A subspace is a set of vectors. $)
    lssss $p |- ( ( W e. X /\ U e. S ) -> U C_ V ) $=
      ( va vx vb wcel wss cv cvsca cfv co cvadd cbs wral wa eqid islss simpl
      syl6bi imp ) DEKZBAKZBCLZUFUGUHHMIMJMDNOZPDQOZPBKIDROZSJBSHBSZTUHIUKUJAUI
      BCDEHJUKUAFUJUAUIUAGUBUHULUCUDUE $.
      $( [8-Dec-2013] $)

    $( The set of vectors in a left module is a subspace. $)
    lss1 $p |- ( W e. LMod -> V e. S ) $=
      ( vx va vb clmod wcel cbs cfv cvadd cvsca eqidd cvbase wceq a1i clss wss
      ssid cv w3a wa co simpl simpr1 simpr3 simpr2 eqid lmodvscl syl111anc
      lmodvacl islssd anidms ) CIJZBAJUPFCKLZCMLZACNLZBBCIGHUPUQOBCPLQUPDRUPURO
      UPUSOACSLQUPERBBTUPBUARUPGUBZBJZHUBZBJZFUBZUQJZUCZUDZUPVAVDVBUSUEZBJZUTVH
      URUEBJUPVFUFZUPVAVCVEUGVGUPVEVCVIVJUPVAVCVEUHUPVAVCVEUIVDUSUQBCVBUQUJDUSU
      JUKULURBCUTVHDURUJUMULUNUO $.
      $( [8-Dec-2013] $)
  $}

  ${
    $d a b x y A $.  $d a b x y S $.  $d a b x y W $.
    lssintcl.s $e |- S = ( LSubSp ` W ) $.
    $( The intersection of a nonempty set of subspaces is a subspace. $)
    lssintcl $p |- ( ( W e. LMod /\ A C_ S /\ A =/= (/) ) -> |^| A e. S ) $=
      ( vx va vb vy clmod wcel wss c0 wne w3a cint simp1 cbs cfv cvadd cvsca
      cvbase eqidd clss wceq a1i cv wex n0 biimpi 3ad2ant3 wa intss1 adantl
      simpl1 simpl2 simpr sseldd eqid lssss syl11anc sstrd ex 19.23adv mpd co
      wral wel simpll1 simpll2 simplr1 elinti sylc simplr2 simplr3 lsscl
      syl23anc r19.21aiva oprex elint2 sylibr islssd mpdan ) CIJZABKZALMZNZWCAO
      ZBJWCWDWEPWFECQRZCSRZBCTRZWGCUARZCIFGWFWHUBWFWKUBWFWIUBWFWJUBBCUCRUDWFDUE
      WFHUFZAJZHUGZWGWKKZWEWCWNWDWEWNHAUHUIUJWFWMWOHWFWMWOWFWMUKZWGWLWKWMWGWLKW
      FWLAULUMWPWCWLBJZWLWKKWCWDWEWMUNWPABWLWCWDWEWMUOWFWMUPUQBWLWKCIWKURDUSUTV
      AVBVCVDWFFUFZWGJZGUFZWGJZEUFZWHJZNZUKZWRXBWTWJVEZWIVEZWLJZHAVFXGWGJXEXHHA
      XEWMUKZWCWQFHVGZGHVGZXCXHWCWDWEXDWMVHXIABWLWCWDWEXDWMVIXEWMUPZUQXIWSWMXJW
      SXAXCWFWMVJXLWRAWLVKVLXIXAWMXKWSXAXCWFWMVMXLWTAWLVKVLWSXAXCWFWMVNWHWIBWJW
      LICWRWTXBWHURWIURWJURDVOVPVQHXGAWRXFWIVRVSVTWAWB $.
      $( [8-Dec-2013] $)
  $}

  $c LSpan $.

  $( Extend class notation with span of a set of vectors. $)
  clspn $a class LSpan $.

  ${
    $d w s t $.
    $( Define span of a set of vectors of a left module or left vector
       space. $)
    df-lsp $a |- LSpan = ( w e. _V |-> ( s e. ~P ( vbase ` w ) |->
         |^| { t e. ( LSubSp ` w ) | s C_ t } ) ) $.
  $}

  ${
    $d t w S $.  $d s w V $.  $d s t w W $.
    lspval.v $e |- V = ( vbase ` W ) $.
    lspval.s $e |- S = ( LSubSp ` W ) $.
    lspval.n $e |- N = ( LSpan ` W ) $.
    $( The span function for a left vector space (or a left module). $)
    lspfval $p |- ( W e. X
      -> N = ( s e. ~P V |-> |^| { t e. S | s C_ t } ) ) $=
      ( vw wcel cvv cpw cv wss crab cint cmpt wceq elisset clspn cfv cvbase
      clss fveq2 syl6eqr pweqd biidd rabeqbidv inteqd mpteq12dv df-lsp fvex
      eqeltri pwex mptexg ax-mp fvmpt syl5eq syl ) EFLEMLZCGDNZGOAOPZABQZRZSZTE
      FUAVBCEUBUCVGJKEGKOZUDUCZNZVDAVHUEUCZQZRZSVGMUBVHETZGVJVMVCVFVNVIDVNVIEUD
      UCZDVHEUDUFHUGUHVNVLVEVNVDVDAVKBVNVKEUEUCBVHEUEUFIUGVNVDUIUJUKULKAGUMVCML
      VGMLDDVOMHEUDUNUOUPGVCVFMUQURUSUTVA $.
      $( [8-Dec-2013] $)

    $d s S $.  $d s t U $.  $d t V $.
    $( The span of a set of vectors (in a left module). $)
    lspval $p |- ( ( W e. LMod /\ U C_ V )
       -> ( N ` U ) = |^| { t e. S | U C_ t } ) $=
      ( vs clmod wcel wss wa cfv cpw cv crab cint cmpt wceq lspfval fveq1d
      adantr cvv cvbase fvex eqeltri elpw2 biimpri adantl wrex lss1 sseq2
      rcla4ev sylan intexrab sylib sseq1 rabbidv inteqd eqid fvmptg syl11anc
      eqtrd ) FKLZCEMZNZCDOZCJEPZJQZAQZMZABRZSZTZOZCVLMZABRZSZVFVIVQUAVGVFCDVPA
      BDEFKJGHIUBUCUDVHCVJLZVTUELZVQVTUAVGWAVFWAVGCEEFUFOUEGFUFUGUHUIUJUKVHVRAB
      ULZWBVFEBLVGWCBEFGHUMVRVGAEBVLECUNUOUPVRABUQURJCVOVTVJUEVPVKCUAZVNVSWDVMV
      RABVKCVLUSUTVAVPVBVCVDVE $.
      $( [8-Dec-2013] $)

    $( The span of a set of vectors is a subspace. $)
    lspcl $p |- ( ( W e. LMod /\ U C_ V ) -> ( N ` U ) e. S ) $=
      ( vt clmod wcel wss wa cfv cv crab cint lspval c0 wne lss1 anim1i sseq2
      elrab sylibr ne0i syl ssrab2 lssintcl mp3an2 syldan eqeltrd ) EJKZBDLZMZB
      CNBIOZLZIAPZQZAIABCDEFGHRUMUNURSTZUSAKZUODURKZUTUODAKZUNMVBUMVCUNADEFGUAU
      BUQUNIDAUPDBUCUDUEURDUFUGUMURALUTVAUQIAUHURAEGUIUJUKUL $.
      $( [9-Dec-2013] $)
  $}

  ${
    $d t T $.  $d t U $.  $d t V $.  $d t W $.
    lspss.v $e |- V = ( vbase ` W ) $.
    lspss.n $e |- N = ( LSpan ` W ) $.
    $( Span preserves subset ordering. $)
    lspss $p |- ( ( W e. LMod /\ U C_ V /\ T C_ U )
          -> ( N ` T ) C_ ( N ` U ) ) $=
      ( vt clmod wcel wss w3a cv clss cfv crab cint wi sstr2 3ad2ant3 adantr
      ss2rabdv intss syl wceq simp1 sstr ancoms 3adant1 eqid lspval syl11anc
      3adant3 3sstr4d ) EIJZBDKZABKZLZAHMZKZHENOZPZQZBUSKZHVAPZQZACOZBCOZURVEVB
      KVCVFKURVDUTHVAURVDUTRZUSVAJUQUOVIUPABUSSTUAUBVEVBUCUDURUOADKZVGVCUEUOUPU
      QUFUPUQVJUOUQUPVJABDUGUHUIHVAACDEFVAUJZGUKULUOUPVHVFUEUQHVABCDEFVKGUKUMUN
      $.
      $( [11-Dec-2013] $)
  $}

  $( Define the class of all left vector spaces.  A left vector space is a
     division ring together with an Abelian group and a left scalar product
     connecting them.  Some authors call this a "left module over a division
     ring", reserving "vector space" for those where the division ring is
     commutative i.e. a field. $)
  df-lvec $a |- LVec = ( LMod i^i DivRing ) $.

  $( The predicate "is a left vector space". $)
  islvec2 $p |- ( W e. LVec <-> ( W e. LMod /\ W e. DivRing ) ) $=
    ( clvec wcel clmod cdivring cin wa df-lvec eleq2i elin bitri ) ABCADEFZCADC
    AECGBLAHIADEJK $.
    $( [11-Nov-2013] $)

  $( A left vector space is a left module. $)
  lveclmod $p |- ( W e. LVec -> W e. LMod ) $=
    ( clvec wcel clmod cdivring wa islvec2 simpl sylbi ) ABCADCZAECZFJAGJKHI $.
    $( [9-Dec-2013] $)

  ${
    $d x w A r q $.  $d x w P r q $.  $d x w S r q $.  $d x w T r q $.
    $d x w V r q $.  $d x w W r q $.  $d K r q $.
    islvec.k $e |- K = ( Base ` W ) $.
    islvec.p $e |- P = ( +g ` W ) $.
    islvec.t $e |- T = ( .r ` W ) $.
    islvec.v $e |- V = ( vbase ` W ) $.
    islvec.a $e |- A = ( vadd ` W ) $.
    islvec.s $e |- S = ( vsca ` W ) $.
    islvec.u $e |- U = ( 1r ` W ) $.
    islvec.g $e |- G = { <. ( Base ` ndx ) , V >. , <. ( +g ` ndx ) , A >. } $.
    $( The predicate "is a left vector space".  (Revised by FL,
       11-Nov-2013.) $)
    islvec $p |- ( W e. LVec <-> ( W e. DivRing /\ G e. Abel
        /\ A. q e. K A. r e. K A. x e. V A. w e. V
               ( ( ( r S w ) e. V
                 /\ ( r S ( w A x ) ) = ( ( r S w ) A ( r S x ) )
                 /\ ( ( q P r ) S w ) = ( ( q S w ) A ( r S w ) )
               ) /\ ( ( q S ( r S w ) ) = ( ( q T r ) S w )
                 /\ ( U S w ) = w ) ) ) ) $=
      ( clvec wcel clmod cdivring cin cabel cv co wceq w3a wa wral df-lvec
      eleq2i crg elin islmod biid anbi12i simpr simpl2 simpl3 3jca divrngring
      3ad2ant1 simp2 simp3 simp1 jca impbii 3bitri bitri ) KUBUCKUDUEUFZUCZKUEU
      CZHUGUCZLUHZBUHZEUIZJUCVRVSAUHZCUIEUIVTVRWAEUICUIUJMUHZVRDUIVSEUIWBVSEUIV
      TCUIUJUKWBVTEUIWBVRFUIVSEUIUJGVSEUIVSUJULULBJUMAJUMLIUMMIUMZUKZUBVNKUNUOV
      OKUDUCZVPULKUPUCZVQWCUKZVPULZWDKUDUEUQWEWGVPVPABCDEFGHIJKLMNOPQRSTUAURVPU
      SUTWHWDWHVPVQWCWGVPVAWFVQWCVPVBWFVQWCVPVCVDWDWGVPWDWFVQWCVPVQWFWCKVEVFVPV
      QWCVGVPVQWCVHVDVPVQWCVIVJVKVLVM $.
      $( [11-Nov-2013] $) $( [21-Sep-2011] $)
  $}

  ${
    $d x y z A $.  $d q r u w x y z B $.  $d x y z P $.  $d x y z S $.
    $d x y z T $.  $d x U $.  $d u w x y z V $.  $d q r u w W $.
    $d q r u w x y z ph $.
    islvecd.b $e |- ( ph -> B = ( Base ` W ) ) $.
    islvecd.p $e |- ( ph -> P = ( +g ` W ) ) $.
    islvecd.t $e |- ( ph -> T = ( .r ` W ) ) $.
    islvecd.u $e |- ( ph -> U = ( 1r ` W ) ) $.
    islvecd.v $e |- ( ph -> V = ( vbase ` W ) ) $.
    islvecd.a $e |- ( ph -> A = ( vadd ` W ) ) $.
    islvecd.s $e |- ( ph -> S = ( vsca ` W ) ) $.
    islvecd.r $e |- ( ph -> W e. DivRing ) $.
    $( Abelian group operations $)
    islvecd.g $e |- ( ph -> G
          = { <. ( Base ` ndx ) , V >. , <. ( +g ` ndx ) , A >. } ) $.
    islvecd.l $e |- ( ph -> G e. Abel ) $.
    $( Scalar product operation $)
    islvecd.w $e |- ( ( ph /\ x e. B /\ y e. V ) -> ( x S y ) e. V ) $.
    islvecd.c $e |- ( ( ph /\ ( x e. B /\ y e. V /\ z e. V ) )
        -> ( x S ( y A z ) ) = ( ( x S y ) A ( x S z ) ) ) $.
    islvecd.d $e |- ( ( ph /\ ( x e. B /\ y e. B /\ z e. V ) )
        -> ( ( x P y ) S z ) = ( ( x S z ) A ( y S z ) ) ) $.
    islvecd.e $e |- ( ( ph /\ ( x e. B /\ y e. B /\ z e. V ) )
        -> ( x S ( y S z ) ) = ( ( x T y ) S z ) ) $.
    islvecd.f $e |- ( ( ph /\ x e. V ) -> ( U S x ) = x ) $.
    $( Properties that determine a left vector space. $)
    islvecd $p |- ( ph -> W e. LVec ) $=
      ( vr vw vu vq cdivring wcel cnx cbs cfv cvbase cop cplusg cvadd cpr
      cabel cv cvsca co wceq w3a cmulr cur wa wral clvec simp1 simp2r simp3r
      wi opreq1 eleq1d imbi2d opreq2 3expb expcom vtocl2ga impcom syl12anc
      simp3l opreq12d eqeq12d opreq2d opreq1d vtocl3ga syl13anc simp2l 3jca id
      vtoclga sylc jca32 3expia r19.21aivv r19.21aivva opeq2d preq12d eqtrd
      opreqd eleq12d eqidd opreq123d 3anbi123d eqeq1d anbi12d raleqbidv
      3anbi23d mpbid eqid islvec sylibr ) AMUMUNZUOUPUQZMURUQZUSZUOUTUQZMVAUQZU
      SZVBZVCUNZUIVDZUJVDZMVEUQZVFZYAUNZYHYIUKVDZYDVFZYJVFZYKYHYMYJVFZYDVFZVGZU
      LVDZYHMUTUQZVFZYIYJVFZYSYIYJVFZYKYDVFZVGZVHZYSYKYJVFZYSYHMVIUQZVFZYIYJVFZ
      VGZMVJUQZYIYJVFZYIVGZVKZVKZUJYAVLZUKYAVLZUIMUPUQZVLZULUUSVLZVHZMVMUNAXSKV
      CUNZYHYIHVFZLUNZYHYIYMEVFZHVFZUVDYHYMHVFZEVFZVGZYSYHGVFZYIHVFZYSYIHVFZUVD
      EVFZVGZVHZYSUVDHVFZYSYHIVFZYIHVFZVGZJYIHVFZYIVGZVKZVKZUJLVLZUKLVLZUIFVLZU
      LFVLZVHUVBAXSUVCUWHUAUCAUWFULUIFFAYSFUNZYHFUNZVKZVKUWDUKUJLLAUWKYMLUNZYIL
      UNZVKZUWDAUWKUWNVHZUVPUVTUWBUWOUVEUVJUVOUWOAUWJUWMUVEAUWKUWNVNZAUWIUWJUWN
      VOZAUWKUWLUWMVPZUWJUWMVKAUVEABVDZCVDZHVFZLUNZVQAYHUWTHVFZLUNZVQAUVEVQBCYH
      YIFLUWSYHVGZUXBUXDAUXEUXAUXCLUWSYHUWTHVRZVSVTUWTYIVGZUXDUVEAUXGUXCUVDLUWT
      YIYHHWAZVSVTAUWSFUNZUWTLUNZVKUXBAUXIUXJUXBUDWBWCWDWEWFUWOAUWJUWMUWLUVJUWP
      UWQUWRAUWKUWLUWMWGUWJUWMUWLVHAUVJAUWSUWTDVDZEVFZHVFZUXAUWSUXKHVFZEVFZVGZV
      QAYHUXLHVFZUXCYHUXKHVFZEVFZVGZVQAYHYIUXKEVFZHVFZUVDUXREVFZVGZVQAUVJVQBCDY
      HYIYMFLLUXEUXPUXTAUXEUXMUXQUXOUXSUWSYHUXLHVRUXEUXAUXCUXNUXREUXFUWSYHUXKHV
      RWHWIVTUXGUXTUYDAUXGUXQUYBUXSUYCUXGUXLUYAYHHUWTYIUXKEVRWJUXGUXCUVDUXREUXH
      WKWIVTUXKYMVGZUYDUVJAUYEUYBUVGUYCUVIUYEUYAUVFYHHUXKYMYIEWAWJUYEUXRUVHUVDE
      UXKYMYHHWAWJWIVTAUXIUXJUXKLUNZVHUXPUEWCWLWEWMUWOAUWIUWJUWMUVOUWPAUWIUWJUW
      NWNZUWQUWRUWIUWJUWMVHZAUVOAUWSUWTGVFZUXKHVFZUXNUWTUXKHVFZEVFZVGZVQAYSUWTG
      VFZUXKHVFZYSUXKHVFZUYKEVFZVGZVQAUVKUXKHVFZUYPUXREVFZVGZVQAUVOVQBCDYSYHYIF
      FLUWSYSVGZUYMUYRAVUBUYJUYOUYLUYQVUBUYIUYNUXKHUWSYSUWTGVRWKVUBUXNUYPUYKEUW
      SYSUXKHVRWKWIVTUWTYHVGZUYRVUAAVUCUYOUYSUYQUYTVUCUYNUVKUXKHUWTYHYSGWAWKVUC
      UYKUXRUYPEUWTYHUXKHVRZWJWIVTUXKYIVGZVUAUVOAVUEUYSUVLUYTUVNUXKYIUVKHWAVUEU
      YPUVMUXRUVDEUXKYIYSHWAUXKYIYHHWAZWHWIVTAUXIUWTFUNUYFVHZUYMUFWCWLWEWMWOUWO
      AUWIUWJUWMUVTUWPUYGUWQUWRUYHAUVTAUWSUYKHVFZUWSUWTIVFZUXKHVFZVGZVQAYSUYKHV
      FZYSUWTIVFZUXKHVFZVGZVQAYSUXRHVFZUVRUXKHVFZVGZVQAUVTVQBCDYSYHYIFFLVUBVUKV
      UOAVUBVUHVULVUJVUNUWSYSUYKHVRVUBVUIVUMUXKHUWSYSUWTIVRWKWIVTVUCVUOVURAVUCV
      ULVUPVUNVUQVUCUYKUXRYSHVUDWJVUCVUMUVRUXKHUWTYHYSIWAWKWIVTVUEVURUVTAVUEVUP
      UVQVUQUVSVUEUXRUVDYSHVUFWJUXKYIUVRHWAWIVTAVUGVUKUGWCWLWEWMUWOUWMAUWBUWRUW
      PAJUWSHVFZUWSVGZVQAUWBVQBYILUWSYIVGZVUTUWBAVVAVUSUWAUWSYIUWSYIJHWAVVAWPWI
      VTAUWSLUNVUTUHWCWQWRWSWTXAXBWOAUVCYGUWHUVAXSAKYFVCAKXTLUSZYCEUSZVBYFUBAVV
      BYBVVCYEALYAXTRXCAEYDYCSXCXDXEVSAUWGUUTULFUUSNAUWFUURUIFUUSNAUWEUUQUKLYAR
      AUWDUUPUJLYARAUVPUUFUWCUUOAUVEYLUVJYRUVOUUEAUVDYKLYAAHYJYHYITXFZRXGAUVGYO
      UVIYQAYHYHUVFYNHYJTAYHXHAEYDYIYMSXFXIAUVDYKUVHYPEYDSVVDAHYJYHYMTXFXIWIAUV
      LUUBUVNUUDAUVKUUAYIYIHYJTAGYTYSYHOXFAYIXHZXIAUVMUUCUVDYKEYDSAHYJYSYITXFVV
      DXIWIXJAUVTUUKUWBUUNAUVQUUGUVSUUJAYSYSUVDYKHYJTAYSXHVVDXIAUVRUUIYIYIHYJTA
      IUUHYSYHPXFVVEXIWIAUWAUUMYIAJUULYIYIHYJTQVVEXIXKXLXLXMXMXMXMXNXOUKUJYDYTY
      JUUHUULYFUUSYAMUIULUUSXPYTXPUUHXPYAXPYDXPYJXPUULXPYFXPXQXR $.
      $( [6-Oct-2013] $)
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x O $.  $d x y z P $.  $d x y z S $.
    $d x y z T $.  $d x U $.  $d x y z V $.  $d x y z ph $.
    islvec2d.b $e |- ( ph -> B = ( Base ` W ) ) $.
    islvec2d.p $e |- ( ph -> P = ( +g ` W ) ) $.
    islvec2d.t $e |- ( ph -> T = ( .r ` W ) ) $.
    islvec2d.u $e |- ( ph -> U = ( 1r ` W ) ) $.
    islvec2d.v $e |- ( ph -> V = ( vbase ` W ) ) $.
    islvec2d.a $e |- ( ph -> A = ( vadd ` W ) ) $.
    islvec2d.s $e |- ( ph -> S = ( vsca ` W ) ) $.
    islvec2d.r $e |- ( ph -> W e. DivRing ) $.
    $( Abelian group (vector) addition $)
    islvec2d.h $e |- ( ( ph /\ x e. V /\ y e. V ) -> ( x A y ) e. V ) $.
    islvec2d.i $e |- ( ( ph /\ ( x e. V /\ y e. V /\ z e. V ) )
        -> ( ( x A y ) A z ) = ( x A ( y A z ) ) ) $.
    islvec2d.j $e |- ( ph -> O e. V ) $.
    islvec2d.k $e |- ( ( ph /\ x e. V ) -> ( O A x ) = x ) $.
    islvec2d.l $e |- ( ( ph /\ x e. V ) -> N e. V ) $.
    islvec2d.m $e |- ( ( ph /\ x e. V ) -> ( N A x ) = O ) $.
    islvec2d.n $e |- ( ( ph /\ x e. V /\ y e. V ) -> ( x A y ) = ( y A x ) ) $.
    $( Scalar product operations $)
    islvec2d.w $e |- ( ( ph /\ x e. B /\ y e. V ) -> ( x S y ) e. V ) $.
    islvec2d.c $e |- ( ( ph /\ ( x e. B /\ y e. V /\ z e. V ) )
        -> ( x S ( y A z ) ) = ( ( x S y ) A ( x S z ) ) ) $.
    islvec2d.d $e |- ( ( ph /\ ( x e. B /\ y e. B /\ z e. V ) )
        -> ( ( x P y ) S z ) = ( ( x S z ) A ( y S z ) ) ) $.
    islvec2d.e $e |- ( ( ph /\ ( x e. B /\ y e. B /\ z e. V ) )
        -> ( x S ( y S z ) ) = ( ( x T y ) S z ) ) $.
    islvec2d.f $e |- ( ( ph /\ x e. V ) -> ( U S x ) = x ) $.
    $( Properties that determine a left vector space.  The hypotheses of this
       version of ~ islvecd include all explicit properties of the vector space
       so that a separate proof of the Abelian group of vectors is not
       required.  Note that the negative element ` N ` is a function of ` x `
       (i.e. allows ` x ` as a free variable). $)
    islvec2d $p |- ( ph -> W e. LVec ) $=
      ( cnx cbs cfv cop cplusg cpr eqidd cvv wcel wceq cvbase fvex a1i eqeltrd
      eqid grpbase syl cvadd grpplusg prex isgrpd isabld islvecd ) ABCDEFGHIJUO
      UPUQMURZUOUSUQEURZUTZMNOPQRSTUAUBAVTVAABCMEVTABCDMEVTKLAMVBVCMVTUPUQVDAMN
      VEUQZVBSWAVBVCANVEVFVGVHMEVTVBVTVIZVJVKZAEVBVCEVTUSUQVDAENVLUQZVBTWDVBVCA
      NVLVFVGVHMEVTVBWBVMVKZVTVBVCAVRVSVNVGUCUDUEUFUGUHVOWCWEUIVPUJUKULUMUNVQ
      $.
      $( [6-Oct-2013] $)
  $}


