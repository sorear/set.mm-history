$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                     Modules and vector spaces
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c vbase $.
  $c vadd $.
  $c vsca $.
  $c LMod $.
  $c LVec $.

  $( Extend class notation with set of vectors in a left module or a vector
     space. $)
  cvbase $a class vbase $.

  $( Extend class notation with vector addition. $)
  cvadd $a class vadd $.

  $( Extend class notation with scalar product. $)
  cvsca $a class vsca $.

  $( Extend class notation with class of all left modules. $)
  clmod $a class LMod $.

  $( Extend class notation with class of all left vector spaces. $)
  clvec $a class LVec $.

  $( Def. 8.5.12, p. 219. $)
  $( Define set of vectors in a vector space ` v ` . $)
  df-vbase $a |- vbase = ( v e. _V |-> ( v ` 5 ) ) $.

  $( Def. 8.5.12, p. 219. $)
  $( Define vector addition. $)
  df-vadd $a |- vadd = ( v e. _V |-> ( v ` 6 ) ) $.

  $( Def. 8.5.12, p. 219. $)
  $( Define scalar product. $)
  df-vsca $a |- vsca = ( v e. _V |-> ( v ` 7 ) ) $.

  $( Utility theorem: index-independent form of vector base set ~ df-vbase . $)
  vbaseid $p |- vbase = ( f e. _V |-> ( f ` ( vbase ` ndx ) ) ) $=
    ( cvbase c5 df-vbase 5nn ndxid ) BCAADEF $.
    $( [2-Oct-2013] $)

  $( Utility theorem: index-independent form of vector addition ~ df-vadd . $)
  vaddid $p |- vadd = ( f e. _V |-> ( f ` ( vadd ` ndx ) ) ) $=
    ( cvadd c6 df-vadd 6nn ndxid ) BCAADEF $.
    $( [2-Oct-2013] $)

  $( Utility theorem: index-independent form of scalar product ~ df-vsca . $)
  vscaid $p |- vsca = ( f e. _V |-> ( f ` ( vsca ` ndx ) ) ) $=
    ( cvsca c7 df-vsca 7nn ndxid ) BCAADEF $.
    $( [2-Oct-2013] $)

  $( Utility lemma for constructing a left module or left vector space. $)
  lmodlem1 $p |- -. ( vbase ` ndx )
        e. { ( Base ` ndx ) , ( +g ` ndx ) , ( .r ` ndx ) } $=
    ( vs cnx cvbase cfv cbs cplusg cmulr ctp wcel wceq wne c5 ndxarg 5re ltneii
    c1 neeqtrri eqnetri c2 c3 w3o w3a wn df-vbase 5nn 1re 1lt5 basendx 2re 2lt5
    df-plusg 2nn 3re 3lt5 df-mulr 3nn 3pm3.2i ne3anior mpbi fvex eltp mtbir )
    BCDZBEDZBFDZBGDZHIVCVDJVCVEJVCVFJUAZVCVDKZVCVEKZVCVFKZUBVGUCVHVIVJVCLVDCLAA
    UDUEMZLPVDPLUFNUGOUHQRVCLVEVKLSVESLUINUJOFSAAUKULMQRVCLVFVKLTVFTLUMNUNOGTAA
    UOUPMQRUQVCVDVCVEVCVFURUSVCVDVEVFBCUTVAVB $.
    $( [30-Sep-2013] $)

  $( Utility lemma for constructing a left module or left vector space. $)
  lmodlem2 $p |- -. ( vadd ` ndx ) e. ( { ( Base ` ndx ) , ( +g ` ndx ) ,
         ( .r ` ndx ) } u. { ( vbase ` ndx ) } ) $=
    ( vs cnx cvadd cfv cplusg cmulr cvbase wcel wceq wo wne ndxarg 6re neeqtrri
    c6 ltneii eqnetri c2 c3 c5 cbs ctp csn cun w3o w3a df-vadd 6nn 1lt6 basendx
    wn 1re 2re 2lt6 df-plusg 2nn 3re 3lt6 df-mulr 3nn 3pm3.2i ne3anior mpbi 5re
    c1 5lt6 df-vbase 5nn df-ne pm3.2ni elun fvex eltp elsnc orbi12i bitri mtbir
    ) BCDZBUADZBEDZBFDZUBZBGDZUCZUDHZVRVSIVRVTIVRWAIUEZVRWCIZJZWFWGVRVSKZVRVTKZ
    VRWAKZUFWFUKWIWJWKVROVSCOAAUGUHLZOVEVSVEOULMUIPUJNQVROVTWLORVTROUMMUNPERAAU
    OUPLNQVROWAWLOSWASOUQMURPFSAAUSUTLNQVAVRVSVRVTVRWAVBVCVRWCKWGUKVROWCWLOTWCT
    OVDMVFPGTAAVGVHLNQVRWCVIVCVJWEVRWBHZVRWDHZJWHVRWBWDVKWMWFWNWGVRVSVTWABCVLZV
    MVRWCWOVNVOVPVQ $.
    $( [30-Sep-2013] $)

  $( Utility lemma for constructing a left module or left vector space. $)
  lmodlem3 $p |- -. ( vsca ` ndx ) e. ( { ( Base ` ndx ) , ( +g ` ndx ) ,
         ( .r ` ndx ) } u. { ( vbase ` ndx ) , ( vadd ` ndx ) } ) $=
    ( vs cnx cvsca cfv cplusg cmulr wcel wceq wo wne ndxarg 7re ltneii neeqtrri
    c7 eqnetri c2 c3 c5 c6 cbs ctp cvbase cvadd cpr cun w3o w3a df-vsca 7nn 1re
    wn 1lt7 basendx 2re 2lt7 df-plusg 2nn 3re 3lt7 df-mulr 3nn 3pm3.2i ne3anior
    mpbi 5re 5lt7 df-vbase 5nn 6re 6lt7 df-vadd 6nn pm3.2i neanior pm3.2ni elun
    c1 wa fvex eltp elpr orbi12i bitri mtbir ) BCDZBUADZBEDZBFDZUBZBUCDZBUDDZUE
    ZUFGZWFWGHWFWHHWFWIHUGZWFWKHWFWLHIZIZWOWPWFWGJZWFWHJZWFWIJZUHWOULWRWSWTWFOW
    GCOAAUIUJKZOVRWGVROUKLUMMUNNPWFOWHXAOQWHQOUOLUPMEQAAUQURKNPWFOWIXAORWIROUSL
    UTMFRAAVAVBKNPVCWFWGWFWHWFWIVDVEWFWKJZWFWLJZVSWPULXBXCWFOWKXAOSWKSOVFLVGMUC
    SAAVHVIKNPWFOWLXAOTWLTOVJLVKMUDTAAVLVMKNPVNWFWKWFWLVOVEVPWNWFWJGZWFWMGZIWQW
    FWJWMVQXDWOXEWPWFWGWHWIBCVTZWAWFWKWLXFWBWCWDWE $.
    $( [30-Sep-2013] $)

  ${
    lvecfn.w $e |- W = ( { <. ( Base ` ndx ) , B >. , <. ( +g ` ndx ) , P >. ,
                   <. ( .r ` ndx ) , T >. }
                u. { <. ( vbase ` ndx ) , V >. , <. ( vadd ` ndx ) , A >. ,
                   <. ( vsca ` ndx ) , S >. } ) $.
    ${
      lvecfn.d $e |- D = ( { ( Base ` ndx ) , ( +g ` ndx ) , ( .r ` ndx ) }
                  u. { ( vbase ` ndx ) , ( vadd ` ndx ) , ( vsca ` ndx ) } ) $.
      $( A constructed left module or left vector space is a function on
         ` D ` .  Starting from ~ rngfn (which has 3 members), we chain
         ~ fnunsn 3 times, each time adding an ordered pair to the function, to
         get all 6 members. $)
      lmodfn $p |- W Fn D $=
        ( cnx cfv ctp cun cop fvex csn eqid uneq2i unass cbs cplusg cmulr cvadd
        cvbase cvsca rngfn lmodlem1 fnunsn df-pr eqtr4i lmodlem2 df-tp lmodlem3
        cpr 3eqtr4i ) KUALZKUBLZKUCLZMZKUELZKUDLZUOZNZCUQBOURDOUSFOMZVAGOZVBAOZ
        UOZNZHKUFLZEKUFPUTVAQZNZVDVEVFQZNZVIVBAKUDPUTVLVEVNVAGKUEPBUTDVEFVERUTR
        UGVNRVLRUHUIVIVEVMVGQZNZNVNVONVHVPVEVFVGUJSVEVMVOTUKVDUTVKVBQZNZNVLVQNV
        CVRUTVAVBUJSUTVKVQTUKULUIVEVFVGVJEOZMZNVEVHVSQZNZNHVIWANVTWBVEVFVGVSUMS
        IVEVHWATUPUTVAVBVJMZNUTVCVJQZNZNCVDWDNWCWEUTVAVBVJUMSJUTVCWDTUPUNUI $.
        $( [1-Oct-2013] $)
    $}

    $( Lemma to shorten proofs of ~ lmodbase through ~ lmodvsca . $)
    lmodfun $p |- Fun W $=
      ( cnx cbs cfv cplusg cmulr ctp cvbase cvadd cvsca cun wfn wfun eqid fnfun
      lmodfn ax-mp ) GIJKILKIMKNIOKIPKIQKNRZSGTABUECDEFGHUEUAUCUEGUBUD $.
      $( [4-Oct-2013] $)

    $( The base set of a constructed left vector space. $)
    lmodbase $p |- ( B e. X -> B = ( Base ` W ) ) $=
      ( vs cbs cnx cfv cop cplusg cmulr ctp cvbase cvadd tpex cvsca cun eqeltri
      cvv unex lmodfun baseid ssun1 opex tpid1 sselii eleqtrri strfv ) BGKHJGLK
      MZBNZLOMCNZLPMENZQZLRMFNZLSMANZLUAMDNZQZUBZUDIURVBUOUPUQTUSUTVATUEUCABCDE
      FGIUFJUGUOVCGURVCUOURVBUHUOUPUQUNBUIUJUKIULUM $.
      $( [2-Oct-2013] $)

    $( The additive operation of a constructed left vector space. $)
    lmodplusg $p |- ( P e. X -> P = ( +g ` W ) ) $=
      ( vs cplusg cnx cbs cfv cop cmulr ctp cvbase cvadd tpex cvsca cun eqeltri
      cvv unex lmodfun plusgid ssun1 opex tpid2 sselii eleqtrri strfv ) CGKHJGL
      MNBOZLKNZCOZLPNEOZQZLRNFOZLSNAOZLUANDOZQZUBZUDIURVBUNUPUQTUSUTVATUEUCABCD
      EFGIUFJUGUPVCGURVCUPURVBUHUNUPUQUOCUIUJUKIULUM $.
      $( [2-Oct-2013] $)

    $( The multiplicative operation of a constructed left vector space. $)
    lmodmulr $p |- ( T e. X -> T = ( .r ` W ) ) $=
      ( vs cmulr cnx cbs cfv cop cplusg ctp cvbase cvadd tpex cvsca cun eqeltri
      cvv unex lmodfun mulrid ssun1 opex tpid3 sselii eleqtrri strfv ) EGKHJGLM
      NBOZLPNCOZLKNZEOZQZLRNFOZLSNAOZLUANDOZQZUBZUDIURVBUNUOUQTUSUTVATUEUCABCDE
      FGIUFJUGUQVCGURVCUQURVBUHUNUOUQUPEUIUJUKIULUM $.
      $( [2-Oct-2013] $)

    $( The set of vectors of a constructed left vector space. $)
    lmodvbase $p |- ( V e. X -> V = ( vbase ` W ) ) $=
      ( vs cvbase cnx cbs cfv cop cplusg cmulr ctp cvadd tpex cvsca cun eqeltri
      cvv unex lmodfun vbaseid ssun2 opex tpid1 sselii eleqtrri strfv ) FGKHJGL
      MNBOZLPNCOZLQNEOZRZLKNZFOZLSNAOZLUANDOZRZUBZUDIUQVBUNUOUPTUSUTVATUEUCABCD
      EFGIUFJUGUSVCGVBVCUSVBUQUHUSUTVAURFUIUJUKIULUM $.
      $( [2-Oct-2013] $)

    $( The vector addition operation of a constructed left vector space. $)
    lmodvadd $p |- ( A e. X -> A = ( vadd ` W ) ) $=
      ( vs cvadd cnx cbs cfv cop cplusg cmulr ctp cvbase tpex cvsca cun eqeltri
      cvv unex lmodfun vaddid ssun2 opex tpid2 sselii eleqtrri strfv ) AGKHJGLM
      NBOZLPNCOZLQNEOZRZLSNFOZLKNZAOZLUANDOZRZUBZUDIUQVBUNUOUPTURUTVATUEUCABCDE
      FGIUFJUGUTVCGVBVCUTVBUQUHURUTVAUSAUIUJUKIULUM $.
      $( [2-Oct-2013] $)

    $( The scalar product operation of a constructed left vector space. $)
    lmodvsca $p |- ( S e. X -> S = ( vsca ` W ) ) $=
      ( vs cvsca cnx cbs cfv cop cplusg cmulr ctp cvbase tpex cvadd cun eqeltri
      cvv unex lmodfun vscaid ssun2 opex tpid3 sselii eleqtrri strfv ) DGKHJGLM
      NBOZLPNCOZLQNEOZRZLSNFOZLUANAOZLKNZDOZRZUBZUDIUQVBUNUOUPTURUSVATUEUCABCDE
      FGIUFJUGVAVCGVBVCVAVBUQUHURUSVAUTDUIUJUKIULUM $.
      $( [2-Oct-2013] $)
  $}

  ${
    $d a f k p q r s t v w x $.
    $( Def. 8.5.11, p. 218. $)
    $( Define the class of all left modules, which are generalizations of left
       vector spaces.  A left module is a ring together with an Abelian group
       and a left scalar product connecting them. $)
    df-lmod $a |- LMod = { f e. Ring |
      E. k E. p E. t E. v E. a E. s
         ( ( k = ( Base ` f ) /\ p = ( +g ` f ) /\ t = ( .r ` f ) )
          /\ ( v = ( vbase ` f ) /\ a = ( vadd ` f ) /\ s = ( vsca ` f ) )
          /\ ( { <. ( Base ` ndx ) , v >. , <. ( +g ` ndx ) , a >. } e. Abel
             /\ A. q e. k A. r e. k A. x e. v A. w e. v
               ( ( ( r s w ) e. v
                 /\ ( r s ( w a x ) ) = ( ( r s w ) a ( r s x ) )
                 /\ ( ( q p r ) s w ) = ( ( q s w ) a ( r s w ) )
               ) /\ ( ( q s ( r s w ) ) = ( ( q t r ) s w )
                 /\ ( ( 1r ` f ) s w ) = w ) ) ) ) } $.
  $}

  ${
    $d a f k p q r s t v w x A $.  $d a s G $.  $d a f k p q r s t v K $.
    $d a f k p q r s t v w x P $.  $d a f k p q r s t v w x S $.
    $d a f k p q r s t v w x T $.  $d a f k p s t v U $.
    $d a f k p q r s t v w x V $.  $d a f k p q r s t v w x W $.
    islmod.k $e |- K = ( Base ` W ) $.
    islmod.p $e |- P = ( +g ` W ) $.
    islmod.t $e |- T = ( .r ` W ) $.
    islmod.v $e |- V = ( vbase ` W ) $.
    islmod.a $e |- A = ( vadd ` W ) $.
    islmod.s $e |- S = ( vsca ` W ) $.
    islmod.u $e |- U = ( 1r ` W ) $.
    islmod.g $e |- G = { <. ( Base ` ndx ) , V >. , <. ( +g ` ndx ) , A >. } $.
    $( The predicate "is a left module". $)
    islmod $p |- ( W e. LMod <-> ( W e. Ring /\ G e. Abel
        /\ A. q e. K A. r e. K A. x e. V A. w e. V
               ( ( ( r S w ) e. V
                 /\ ( r S ( w A x ) ) = ( ( r S w ) A ( r S x ) )
                 /\ ( ( q P r ) S w ) = ( ( q S w ) A ( r S w ) )
               ) /\ ( ( q S ( r S w ) ) = ( ( q T r ) S w )
                 /\ ( U S w ) = w ) ) ) ) $=
      ( vk vp vt vv va vs vf crg wcel wceq w3a cnx cbs cfv cop cplusg cpr cabel
      cv co wral wex clmod cvv fvex eqeltri cmulr cvbase cvadd cvsca raleqbi1dv
      wa raleq anbi2d opreq opreq1d eqeq1d 3anbi3d anbi1d 2ralbidv eqeq2d opeq2
      preq1d eleq1d 3anbi1d anbi12d syl6eqr opreq2d 3anbi23d opreq12d 3anbi123d
      eleq2 preq2d eqeq12d id eqidd opreq123d ceqsex6v anbi2i cur fveq2 3exbidv
      df-lmod elrab2 3anass 3bitr4i ) KUIUJZUBUTZIUKZUCUTZDUKZUDUTZFUKZULZUEUTZ
      JUKZUFUTZCUKZUGUTZEUKZULZUMUNUOZXPUPZUMUQUOZXRUPZURZUSUJZLUTZBUTZXTVAZXPU
      JZYIYJAUTZXRVAZXTVAZYKYIYMXTVAZXRVAZUKZMUTZYIXKVAZYJXTVAZYSYJXTVAZYKXRVAZ
      UKZULZYSYKXTVAZYSYIXMVAZYJXTVAZUKZGYJXTVAZYJUKZVMZVMZBXPVBAXPVBZLXIVBZMXI
      VBZVMZULZUGVCUFVCUEVCZUDVCUCVCUBVCZVMXHHUSUJZYIYJEVAZJUJZYIYJYMCVAZEVAZUV
      BYIYMEVAZCVAZUKZYSYIDVAZYJEVAZYSYJEVAZUVBCVAZUKZULZYSUVBEVAZYSYIFVAZYJEVA
      ZUKZGYJEVAZYJUKZVMZVMZBJVBAJVBZLIVBMIVBZVMZVMKVDUJXHUVAUWDULUUTUWEXHUUQYH
      UUNLIVBZMIVBZVMYHYLYRUVIYJXTVAZUUCUKZULZUULVMZBXPVBAXPVBZLIVBMIVBZVMYHUWJ
      UUFUVPYJXTVAZUKZUUKVMZVMZBXPVBZAXPVBZLIVBMIVBZVMYCJUPZYFURZUSUJZYKJUJZYRU
      WIULZUWPVMZBJVBZAJVBZLIVBMIVBZVMUVAUXDYIUVDXTVAZYKYPCVAZUKZUWHUUBYKCVAZUK
      ZULZUWPVMZBJVBAJVBZLIVBMIVBZVMUWEUBUCUDUEUFUGIDFJCEIKUNUOZVENKUNVFVGDKUQU
      OZVEOKUQVFVGFKVHUOZVEPKVHVFVGJKVIUOZVEQKVIVFVGCKVJUOZVERKVJVFVGEKVKUOZVES
      KVKVFVGXJUUPUWGYHUUOUWFMXIIUUNLXIIVNVLVOXLUWGUWMYHXLUUNUWLMLIIXLUUMUWKABX
      PXPXLUUEUWJUULXLUUDUWIYLYRXLUUAUWHUUCXLYTUVIYJXTYSYIXKDVPVQVRVSVTWAWAVOXN
      UWMUWTYHXNUWLUWSMLIIXNUWKUWQABXPXPXNUULUWPUWJXNUUIUWOUUKXNUUHUWNUUFXNUUGU
      VPYJXTYSYIXMFVPVQWBVTVOWAWAVOXQYHUXCUWTUXIXQYGUXBUSXQYDUXAYFXPJYCWCWDWEXQ
      UWSUXHMLIIUWRUXGAXPJUWQUXFBXPJXQUWJUXEUWPXQYLUXDYRUWIXPJYKWMWFVTVLVLWAWGX
      SUXCUVAUXIUXRXSUXBHUSXSUXBUXAYECUPZURHXSYFUYEUXAXRCYEWCWNUAWHWEXSUXHUXQML
      IIXSUXFUXPABJJXSUXEUXOUWPXSYRUXLUWIUXNUXDXSYOUXJYQUXKXSYNUVDYIXTYJYMXRCVP
      WIYKYPXRCVPWOXSUUCUXMUWHUUBYKXRCVPWBWJVTWAWAWGYAUXRUWDUVAYAUXQUWCMLIIYAUX
      PUWBABJJYAUXOUVNUWPUWAYAUXDUVCUXLUVHUXNUVMYAYKUVBJYIYJXTEVPZWEYAUXJUVEUXK
      UVGYIUVDXTEVPYAYKUVBYPUVFCUYFYIYMXTEVPWKWOYAUWHUVJUXMUVLUVIYJXTEVPYAUUBUV
      KYKUVBCYSYJXTEVPUYFWKWOWLYAUWOUVRUUKUVTYAUUFUVOUWNUVQYAYSYSYKUVBXTEYAWPYA
      YSWQUYFWRUVPYJXTEVPWOYAUUJUVSYJGYJXTEVPVRWGWGWAWAVOWSWTXIUHUTZUNUOZUKZXKU
      YGUQUOZUKZXMUYGVHUOZUKZULZXPUYGVIUOZUKZXRUYGVJUOZUKZXTUYGVKUOZUKZULZYHUUE
      UUIUYGXAUOZYJXTVAZYJUKZVMZVMZBXPVBAXPVBZLXIVBMXIVBZVMZULZUGVCUFVCUEVCZUDV
      CUCVCUBVCUUTUHKUIVDUYGKUKZVUKUUSUBUCUDVULVUJUURUEUFUGVULUYNXOVUAYBVUIUUQV
      ULUYIXJUYKXLUYMXNVULUYHIXIVULUYHUXSIUYGKUNXBNWHWBVULUYJDXKVULUYJUXTDUYGKU
      QXBOWHWBVULUYLFXMVULUYLUYAFUYGKVHXBPWHWBWLVULUYPXQUYRXSUYTYAVULUYOJXPVULU
      YOUYBJUYGKVIXBQWHWBVULUYQCXRVULUYQUYCCUYGKVJXBRWHWBVULUYSEXTVULUYSUYDEUYG
      KVKXBSWHWBWLVULVUHUUPYHVULVUGUUNMLXIXIVULVUFUUMABXPXPVULVUEUULUUEVULVUDUU
      KUUIVULVUCUUJYJVULVUBGYJXTVULVUBKXAUOGUYGKXAXBTWHVQVRVOVOWAWAVOWLXCXCABUE
      UDUHUBUGLMUCUFXDXEXHUVAUWDXFXG $.
      $( [4-Nov-2013] $)

    $d q r w x Q $.  $d q r w x R $.  $d q r w x U $.  $d w x X $.  $d w Y $.
    $( Lemma for properties of a left module. $)
    lmodlema $p |- ( ( W e. LMod /\ ( Q e. K /\ R e. K )
          /\ ( X e. V /\ Y e. V ) ) ->
               ( ( ( R S Y ) e. V
                 /\ ( R S ( Y A X ) ) = ( ( R S Y ) A ( R S X ) )
                 /\ ( ( Q P R ) S Y ) = ( ( Q S Y ) A ( R S Y ) )
               ) /\ ( ( Q S ( R S Y ) ) = ( ( Q T R ) S Y )
                 /\ ( U S Y ) = Y ) ) ) $=
      ( vr vw vx vq clmod wcel wa wceq w3a crg cabel wral islmod opreq1 opreq1d
      co eqeq12d 3anbi3d anbi1d anbi12d 2ralbidv eleq1d opreq12d opreq2 opreq2d
      cv wi 3anbi123d rcla42v 3anbi2d com12 syl6com imp3a 3ad2ant3 sylbi 3impib
      id ) KUFUGZCIUGDIUGUHZLJUGMJUGUHZDMEUQZJUGZDMLAUQZEUQZWBDLEUQZAUQZUIZCDBU
      QZMEUQZCMEUQZWBAUQZUIZUJZCWBEUQZCDFUQZMEUQZUIZGMEUQZMUIZUHZUHZVSKUKUGZHUL
      UGZUBVGZUCVGZEUQZJUGZXEXFUDVGZAUQZEUQZXGXEXIEUQZAUQZUIZUEVGZXEBUQZXFEUQZX
      OXFEUQZXGAUQZUIZUJZXOXGEUQZXOXEFUQZXFEUQZUIZGXFEUQZXFUIZUHZUHZUCJUMUDJUMZ
      UBIUMUEIUMZUJVTWAUHXBVHZUDUCABEFGHIJKUBUENOPQRSTUAUNYKXCYLXDYKVTWAXBVTYKD
      XFEUQZJUGZDXJEUQZYMDXIEUQZAUQZUIZWIXFEUQZCXFEUQZYMAUQZUIZUJZCYMEUQZWPXFEU
      QZUIZYGUHZUHZUCJUMUDJUMZWAXBVHYJUUIXHXNCXEBUQZXFEUQZYTXGAUQZUIZUJZCXGEUQZ
      CXEFUQZXFEUQZUIZYGUHZUHZUCJUMUDJUMUEUBCDIIXOCUIZYIUUTUDUCJJUVAYAUUNYHUUSU
      VAXTUUMXHXNUVAXQUUKXSUULUVAXPUUJXFEXOCXEBUOUPUVAXRYTXGAXOCXFEUOUPURUSUVAY
      EUURYGUVAYBUUOYDUUQXOCXGEUOUVAYCUUPXFEXOCXEFUOUPURUTVAVBXEDUIZUUTUUHUDUCJ
      JUVBUUNUUCUUSUUGUVBXHYNXNYRUUMUUBUVBXGYMJXEDXFEUOZVCUVBXKYOXMYQXEDXJEUOUV
      BXGYMXLYPAUVCXEDXIEUOVDURUVBUUKYSUULUUAUVBUUJWIXFEXEDCBVEUPUVBXGYMYTAUVCV
      FURVIUVBUURUUFYGUVBUUOUUDUUQUUEUVBXGYMCEUVCVFUVBUUPWPXFEXEDCFVEUPURUTVAVB
      VJWAUUIXBUUHXBYNDXFLAUQZEUQZYMWFAUQZUIZUUBUJZUUGUHUDUCLMJJXILUIZUUCUVHUUG
      UVIYRUVGYNUUBUVIYOUVEYQUVFUVIXJUVDDEXILXFAVEVFUVIYPWFYMAXILDEVEVFURVKUTXF
      MUIZUVHWNUUGXAUVJYNWCUVGWHUUBWMUVJYMWBJXFMDEVEZVCUVJUVEWEUVFWGUVJUVDWDDEX
      FMLAUOVFUVJYMWBWFAUVKUPURUVJYSWJUUAWLXFMWIEVEUVJYTWKYMWBAXFMCEVEUVKVDURVI
      UVJUUFWRYGWTUVJUUDWOUUEWQUVJYMWBCEUVKVFXFMWPEVEURUVJYFWSXFMXFMGEVEUVJVRUR
      VAVAVJVLVMVNVOVPVQ $.
      $( [8-Dec-2013] $)
  $}

  ${
    $d q r w x A $.  $d q r w x V $.  $d q r w x W $.
    lmodlemb.v $e |- V = ( vbase ` W ) $.
    lmodlemb.a $e |- A = ( vadd ` W ) $.
    lmodlemb.g $e |- G = { <. ( Base ` ndx ) , V >. , <. ( +g ` ndx ) , A >. }
        $.
    $( Lemma for properties of a left module. $)
    lmodlemb $p |- ( W e. LMod -> ( W e. Ring /\ G e. Abel ) ) $=
      ( vr vw vx vq wcel cv cfv co wceq w3a wa wral eqid clmod crg cabel cplusg
      cvsca cmulr cur cbs islmod 3simpa sylbi ) DUALDUBLZBUCLZHMZIMZDUENZOZCLUN
      UOJMZAOUPOUQUNURUPOAOPKMZUNDUDNZOUOUPOUSUOUPOUQAOPQUSUQUPOUSUNDUFNZOUOUPO
      PDUGNZUOUPOUOPRRICSJCSHDUHNZSKVCSZQULUMRJIAUTUPVAVBBVCCDHKVCTUTTVATEFUPTV
      BTGUIULUMVDUJUK $.
      $( [8-Dec-2013] $)

    $( The vectors in a left module form an Abelian group. $)
    lmodabl $p |- ( W e. LMod -> G e. Abel ) $=
      ( clmod wcel crg cabel lmodlemb simprd ) DHIDJIBKIABCDEFGLM $.
      $( [8-Dec-2013] $)
  $}

  ${
    $( A left module is a ring. $)
    lmodrng $p |- ( W e. LMod -> W e. Ring ) $=
      ( clmod crg cnx cbs cfv cvbase cop cplusg cvadd cpr cabel lmodlemb simpld
      wcel eqid ) ABOACODEFAGFZHDIFAJFZHKZLORSQAQPRPSPMN $.
      $( [8-Dec-2013] $)
  $}

  ${
    lmodbn0.b $e |- B = ( Base ` W ) $.
    $( The base set of a left module is nonempty. $)
    lmodbn0 $p |- ( W e. LMod -> B =/= (/) ) $=
      ( clmod wcel crg cgrp c0 wne lmodrng ringgrp grpn0 3syl ) BDEBFEBGEAHIBJB
      KABCLM $.
      $( [8-Dec-2013] $)
  $}

  ${
    lmodvn0.v $e |- V = ( vbase ` W ) $.
    $( The set of vectors in a left module is nonempty. $)
    lmodvn0 $p |- ( W e. LMod -> V =/= (/) ) $=
      ( clmod wcel cnx cbs cfv cop cplusg cvadd cpr cabel cgrp wne eqid lmodabl
      c0 cvv cvbase ablgrp wceq fvex eqeltri grpbase ax-mp grpn0 3syl ) BDEFGHA
      IFJHBKHZILZMEUJNEAROUIUJABCUIPUJPZQUJUAAUJASEAUJGHUBABTHSCBTUCUDAUIUJSUKU
      EUFUGUH $.
      $( [8-Dec-2013] $)
  $}

  ${
    lmodvacl.v $e |- V = ( vbase ` W ) $.
    lmodvacl.a $e |- A = ( vadd ` W ) $.
    $( Closure of vector addition for a left module. $)
    lmodvacl $p |- ( ( W e. LMod /\ X e. V /\ Y e. V ) -> ( X A Y ) e. V ) $=
      ( wcel cnx cbs cfv cop cplusg cvv wceq cvbase fvex eqeltri ax-mp cvadd co
      clmod cpr cgrp cabel eqid lmodabl ablgrp grpbase grpplusg grpcl syl3an1
      syl ) CUBHZIJKBLIMKALUCZUDHZDBHEBHDEAUABHUNUOUEHUPAUOBCFGUOUFZUGUOUHUMBAU
      ODEBNHBUOJKOBCPKNFCPQRBAUONUQUISANHAUOMKOACTKNGCTQRBAUONUQUJSUKUL $.
      $( [8-Dec-2013] $)
  $}

  ${
    $d p y K $.  $d p y R $.  $d p y S $.  $d p y V $.  $d p y W $.
    $d p y X $.
    lmodvscl.k $e |- K = ( Base ` W ) $.
    lmodvscl.v $e |- V = ( vbase ` W ) $.
    lmodvscl.s $e |- S = ( vsca ` W ) $.
    $( Closure of scalar product for a left module. $)
    lmodvscl $p |- ( ( W e. LMod /\ R e. K /\ X e. V ) -> ( R S X ) e. V ) $=
      ( vy vp wcel co cv wex wa wi cfv wceq eqid clmod c0 lmodvn0 sylib lmodbn0
      wne n0 an4 w3a cvadd cplusg cmulr cur cnx cbs cop cpr lmodlema simpl1 syl
      3expib syl5bi exp4c 19.23adv mpd 3impib ) EUALZACLZFDLZAFBMZDLZVGJNZDLZJO
      ZVHVIPZVKQZVGDUBUFVNDEHUCJDUGUDVGVMVPJVGKNZCLZKOZVMVPQZVGCUBUFVSCEGUEKCUG
      UDVGVRVTKVGVRVMVOVKVRVMPVOPVRVHPZVMVIPZPVGVKVRVMVHVIUHVGWAWBVKVGWAWBUIVKA
      FVLEUJRZMBMVJAVLBMWCMSZVQAEUKRZMFBMVQFBMVJWCMSZUIVQVJBMVQAEULRZMFBMSEUMRZ
      FBMFSPZPVKWCWEVQABWGWHUNUORDUPUNUKRWCUPUQZCDEVLFGWETWGTHWCTIWHTWJTURVKWDW
      FWIUSUTVAVBVCVDVEVDVEVF $.
      $( [8-Dec-2013] $)
  $}

  $c 0v $.

  $( Extend class notation with zero vector. $)
  czv $a class 0v $.

  $( Def. 8.5.13, p. 219. $)
  $( Define zero vector. $)
  df-zv $a |- 0v = ( v e. _V |-> ( 0g ` { <. ( Base ` ndx ) , ( vbase ` v ) >.
         , <. ( +g ` ndx ) , ( vadd ` v ) >. } ) ) $.

  $c LSubSp $.

  $( Extend class notation with all (not necessarily closed) linear subspaces
     of a left module or left vector space. $)
  clss $a class LSubSp $.

  ${
    $d w s x y z $.
    $( Define the set of all (not necessarily closed) linear subspaces of a
       left module or left vector space. $)
    df-lss $a |- LSubSp = ( w e. _V |-> { s e. ~P ( vbase ` w ) |
         A. a e. s A. b e. s A. x e. ( Base ` w )
           ( a ( vadd ` w ) ( x ( vsca ` w ) b ) ) e. s } ) $.
  $}

  ${
    $d w x B $.  $d w P $.  $d w T $.  $d s w V $.  $d a b s w x W $.
    lssset.b $e |- B = ( Base ` W ) $.
    lssset.v $e |- V = ( vbase ` W ) $.
    lssset.p $e |- P = ( vadd ` W ) $.
    lssset.t $e |- T = ( vsca ` W ) $.
    lssset.s $e |- S = ( LSubSp ` W ) $.
    $( The set of all (not necessarily closed) linear subspaces of a left
       module or left vector space. $)
    lssset $p |- ( W e. X -> S
    = { s e. ~P V | A. a e. s A. b e. s A. x e. B ( a P ( x T b ) ) e. s } ) $=
      ( wcel cv wral cfv vw cvv co cpw crab wceq elisset cvsca cvadd cbs cvbase
      clss fveq2 syl6eqr pweqd eqidd opreqd opreq123d eleq1d raleqbidv 2ralbidv
      rabeqbidv df-lss fvex eqeltri pwex rabex fvmpt syl5eq syl ) GHQGUBQZDJRZA
      RZKRZEUCZCUCZIRZQZABSZKVQSJVQSZIFUDZUEZUFGHUGVKDGULTWBPUAGVLVMVNUARZUHTZU
      CZWCUITZUCZVQQZAWCUJTZSZKVQSJVQSZIWCUKTZUDZUEWBUBULWCGUFZWKVTIWMWAWNWLFWN
      WLGUKTZFWCGUKUMMUNUOWNWJVSJKVQVQWNWHVRAWIBWNWIGUJTBWCGUJUMLUNWNWGVPVQWNVL
      VLWEVOWFCWNWFGUITCWCGUIUMNUNWNVLUPWNWDEVMVNWNWDGUHTEWCGUHUMOUNUQURUSUTVAV
      BAUAIJKVCVTIWAFFWOUBMGUKVDVEVFVGVHVIVJ $.
      $( [8-Dec-2013] $)

    $d s B $.  $d s P $.  $d s T $.  $d a b s x U $.
    $( The predicate "is a subspace" (of a left module or left vector
       space). $)
    islss $p |- ( W e. X -> ( U e. S
  <-> ( U C_ V /\ A. a e. U A. b e. U A. x e. B ( a P ( x T b ) ) e. U ) ) ) $=
      ( vs wcel cv wral co cpw crab wss wa lssset wceq eleq2 ralbidv raleqbi1dv
      eleq2d elrab cvbase cfv cvv fvex eqeltri elpw2 anbi1i bitri syl6bb ) HIRZ
      FDRFJSASKSEUACUAZQSZRZABTZKVDTZJVDTZQGUBZUCZRZFGUDZVCFRZABTZKFTZJFTZUEZVB
      DVJFABCDEGHIQJKLMNOPUFUKVKFVIRZVPUEVQVHVPQFVIVGVOJVDFVFVNKVDFVDFUGVEVMABV
      DFVCUHUIUJUJULVRVLVPFGGHUMUNUOMHUMUPUQURUSUTVA $.
      $( [8-Dec-2013] $)
  $}

  ${
    $d a b x U $.  $d a b x W $.  $d a b x ph $.
    islssd.b $e |- ( ph -> B = ( Base ` W ) ) $.
    islssd.v $e |- ( ph -> V = ( vbase ` W ) ) $.
    islssd.p $e |- ( ph -> P = ( vadd ` W ) ) $.
    islssd.t $e |- ( ph -> T = ( vsca ` W ) ) $.
    islssd.s $e |- ( ph -> S = ( LSubSp ` W ) ) $.
    islssd.u $e |- ( ph -> U C_ V ) $.
    islssd.c $e |- ( ( ph /\ ( a e. U /\ b e. U /\ x e. B ) ) ->
            ( a P ( x T b ) ) e. U ) $.
    $( Properties that determine a subspace of a left module or left vector
       space. $)
    islssd $p |- ( ( ph /\ W e. X ) -> U e. S ) $=
      ( wcel wa clss cfv cvbase wss cv cvsca co cvadd wral wb eqid islss adantl
      cbs sseqtrd adantr wi 3exp2 imp32 eleq2d eqidd opreqd opreq123d r19.21aiv
      eleq1d 3imtr3d r19.21aivva mpbir2and wceq eleqtrrd ) AIJTZUAZGIUBUCZEVMGV
      NTZGIUDUCZUEZKUFZBUFZLUFZIUGUCZUHZIUIUCZUHZGTZBIUOUCZUJZLGUJKGUJZVLVOVQWH
      UAUKABWFWCVNWAGVPIJKLWFULVPULWCULWAULVNULUMUNAVQVLAGHVPRNUPUQAWHVLAWGKLGG
      AVRGTZVTGTZUAZUAZWEBWFWLVSCTZVRVSVTFUHZDUHZGTZVSWFTZWEAWIWJWMWPURAWIWJWMW
      PSUSUTAWMWQUKWKACWFVSMVAUQAWPWEUKWKAWOWDGAVRVRWNWBDWCOAVRVBAFWAVSVTPVCVDV
      FUQVGVEVHUQVIAEVNVJVLQUQVK $.
      $( [8-Dec-2013] $)
  $}

  ${
    $d x y z B $.  $d x y z P $.  $d x y z T $.  $d x y z U $.  $d x y z W $.
    $d x y z X $.  $d y z Y $.  $d z Z $.
    lsscl.b $e |- B = ( Base ` W ) $.
    lsscl.p $e |- P = ( vadd ` W ) $.
    lsscl.t $e |- T = ( vsca ` W ) $.
    lsscl.s $e |- S = ( LSubSp ` W ) $.
    $( Closure property of a subspace. $)
    lsscl $p |- ( ( ( W e. V /\ U e. S ) /\ ( X e. U /\ Y e. U /\ Z e. B ) )
       -> ( X P ( Z T Y ) ) e. U ) $=
      ( vx vz vy wcel co wral w3a cvbase cfv wss cv wa eqid islss opreq1 eleq1d
      wi wceq ralbidv opreq2 opreq2d rcla42v rcla4cv syl6com exp3a 3impd adantl
      syl6bi imp31 ) GFRZECRZHERZIERZJARZUAZHJIDSZBSZERZVDVEEGUBUCZUDZOUEZPUEZQ
      UEZDSZBSZERZPATZQETOETZUFVIVLUKZPABCDEVMGFOQKVMUGLMNUHWBWCVNWBVFVGVHVLWBV
      FVGVHVLUKZVFVGUFWBHVPIDSZBSZERZPATZWDWAWHHVRBSZERZPATOQHIEEVOHULZVTWJPAWK
      VSWIEVOHVRBUIUJUMVQIULZWJWGPAWLWIWFEWLVRWEHBVQIVPDUNUOUJUMUPWGVLPJAVPJULZ
      WFVKEWMWEVJHBVPJIDUIUOUJUQURUSUTVAVBVC $.
      $( [8-Dec-2013] $)
  $}

  ${
    $d a b x U $.  $d a b x V $.  $d a b x W $.
    lssss.v $e |- V = ( vbase ` W ) $.
    lssss.s $e |- S = ( LSubSp ` W ) $.
    $( A subspace is a set of vectors. $)
    lssss $p |- ( ( W e. X /\ U e. S ) -> U C_ V ) $=
      ( va vx vb wcel wss cv cvsca cfv co cvadd cbs wral eqid islss syl6bi imp
      wa simpl ) DEKZBAKZBCLZUFUGUHHMIMJMDNOZPDQOZPBKIDROZSJBSHBSZUDUHIUKUJAUIB
      CDEHJUKTFUJTUITGUAUHULUEUBUC $.
      $( [8-Dec-2013] $)

    $( The set of vectors in a left module is a subspace. $)
    lss1 $p |- ( W e. LMod -> V e. S ) $=
      ( vx va vb clmod wcel cbs cfv cvadd eqidd wceq a1i cv co eqid syl111anc
      cvsca cvbase clss wss w3a wa simpl simpr1 simpr3 simpr2 lmodvscl lmodvacl
      ssid islssd anidms ) CIJZBAJUPFCKLZCMLZACUALZBBCIGHUPUQNBCUBLOUPDPUPURNUP
      USNACUCLOUPEPBBUDUPBUMPUPGQZBJZHQZBJZFQZUQJZUEZUFZUPVAVDVBUSRZBJZUTVHURRB
      JUPVFUGZUPVAVCVEUHVGUPVEVCVIVJUPVAVCVEUIUPVAVCVEUJVDUSUQBCVBUQSDUSSUKTURB
      CUTVHDURSULTUNUO $.
      $( [8-Dec-2013] $)
  $}

  ${
    $d a b x y A $.  $d a b x y S $.  $d a b x y W $.
    lssintcl.s $e |- S = ( LSubSp ` W ) $.
    $( The intersection of a nonempty set of subspaces is a subspace. $)
    lssintcl $p |- ( ( W e. LMod /\ A C_ S /\ A =/= (/) ) -> |^| A e. S ) $=
      ( vx va vb vy clmod wcel wss w3a cfv eqidd cv wa simpr sseldd eqid co wne
      c0 cint simp1 cbs cvadd cvsca cvbase clss wceq a1i wex n0 biimpi 3ad2ant3
      intss1 adantl simpl1 simpl2 lssss syl11anc sstrd ex 19.23adv mpd wral wel
      simpll1 simpll2 simplr1 elinti sylc simplr2 simplr3 lsscl syl23anc elint2
      r19.21aiva oprex sylibr islssd mpdan ) CIJZABKZAUBUAZLZWCAUCZBJWCWDWEUDWF
      ECUEMZCUFMZBCUGMZWGCUHMZCIFGWFWHNWFWKNWFWINWFWJNBCUIMUJWFDUKWFHOZAJZHULZW
      GWKKZWEWCWNWDWEWNHAUMUNUOWFWMWOHWFWMWOWFWMPZWGWLWKWMWGWLKWFWLAUPUQWPWCWLB
      JZWLWKKWCWDWEWMURWPABWLWCWDWEWMUSWFWMQRBWLWKCIWKSDUTVAVBVCVDVEWFFOZWGJZGO
      ZWGJZEOZWHJZLZPZWRXBWTWJTZWITZWLJZHAVFXGWGJXEXHHAXEWMPZWCWQFHVGZGHVGZXCXH
      WCWDWEXDWMVHXIABWLWCWDWEXDWMVIXEWMQZRXIWSWMXJWSXAXCWFWMVJXLWRAWLVKVLXIXAW
      MXKWSXAXCWFWMVMXLWTAWLVKVLWSXAXCWFWMVNWHWIBWJWLICWRWTXBWHSWISWJSDVOVPVRHX
      GAWRXFWIVSVQVTWAWB $.
      $( [8-Dec-2013] $)
  $}

  $c LSpan $.

  $( Extend class notation with span of a set of vectors. $)
  clspn $a class LSpan $.

  ${
    $d w s t $.
    $( Define span of a set of vectors of a left module or left vector
       space. $)
    df-lsp $a |- LSpan = ( w e. _V |-> ( s e. ~P ( vbase ` w ) |->
         |^| { t e. ( LSubSp ` w ) | s C_ t } ) ) $.
  $}

  ${
    $d t w S $.  $d s w V $.  $d s t w W $.
    lspval.v $e |- V = ( vbase ` W ) $.
    lspval.s $e |- S = ( LSubSp ` W ) $.
    lspval.n $e |- N = ( LSpan ` W ) $.
    $( The span function for a left vector space (or a left module). $)
    lspfval $p |- ( W e. X
      -> N = ( s e. ~P V |-> |^| { t e. S | s C_ t } ) ) $=
      ( vw wcel cvv cpw cv crab cint cfv cvbase clss cmpt elisset clspn syl6eqr
      wss wceq fveq2 pweqd biidd rabeqbidv inteqd mpteq12dv df-lsp fvex eqeltri
      pwex mptexg ax-mp fvmpt syl5eq syl ) EFLEMLZCGDNZGOAOUEZABPZQZUAZUFEFUBVB
      CEUCRVGJKEGKOZSRZNZVDAVHTRZPZQZUAVGMUCVHEUFZGVJVMVCVFVNVIDVNVIESRZDVHESUG
      HUDUHVNVLVEVNVDVDAVKBVNVKETRBVHETUGIUDVNVDUIUJUKULKAGUMVCMLVGMLDDVOMHESUN
      UOUPGVCVFMUQURUSUTVA $.
      $( [8-Dec-2013] $)

    $d s S $.  $d s t U $.  $d t V $.
    $( The span of a set of vectors (in a left module). $)
    lspval $p |- ( ( W e. LMod /\ U C_ V )
       -> ( N ` U ) = |^| { t e. S | U C_ t } ) $=
      ( vs clmod wcel wss cfv cv crab cint wceq cvv cvbase wa cpw fveq1d adantr
      cmpt lspfval fvex eqeltri elpw2 biimpri adantl wrex lss1 rcla4ev intexrab
      sseq2 sylan sylib sseq1 rabbidv inteqd eqid fvmptg syl11anc eqtrd ) FKLZC
      EMZUAZCDNZCJEUBZJOZAOZMZABPZQZUEZNZCVLMZABPZQZVFVIVQRVGVFCDVPABDEFKJGHIUF
      UCUDVHCVJLZVTSLZVQVTRVGWAVFWAVGCEEFTNSGFTUGUHUIUJUKVHVRABULZWBVFEBLVGWCBE
      FGHUMVRVGAEBVLECUPUNUQVRABUOURJCVOVTVJSVPVKCRZVNVSWDVMVRABVKCVLUSUTVAVPVB
      VCVDVE $.
      $( [8-Dec-2013] $)

    $( The span of a set of vectors is a subspace. $)
    lspcl $p |- ( ( W e. LMod /\ U C_ V ) -> ( N ` U ) e. S ) $=
      ( vt clmod wcel wss wa cfv cv crab cint lspval c0 wne anim1i sseq2 sylibr
      lss1 elrab ne0i syl ssrab2 lssintcl mp3an2 syldan eqeltrd ) EJKZBDLZMZBCN
      BIOZLZIAPZQZAIABCDEFGHRUMUNURSTZUSAKZUODURKZUTUODAKZUNMVBUMVCUNADEFGUDUAU
      QUNIDAUPDBUBUEUCURDUFUGUMURALUTVAUQIAUHURAEGUIUJUKUL $.
      $( [9-Dec-2013] $)
  $}

  ${
    $d t T $.  $d t U $.  $d t V $.  $d t W $.
    lspss.v $e |- V = ( vbase ` W ) $.
    lspss.n $e |- N = ( LSpan ` W ) $.
    $( Span preserves subset ordering. $)
    lspss $p |- ( ( W e. LMod /\ U C_ V /\ T C_ U )
          -> ( N ` T ) C_ ( N ` U ) ) $=
      ( vt clmod wcel wss w3a cv clss cfv crab cint wi wceq lspval sstr2 adantr
      3ad2ant3 ss2rabdv intss syl simp1 ancoms 3adant1 syl11anc 3adant3 3sstr4d
      sstr eqid ) EIJZBDKZABKZLZAHMZKZHENOZPZQZBUSKZHVAPZQZACOZBCOZURVEVBKVCVFK
      URVDUTHVAURVDUTRZUSVAJUQUOVIUPABUSUAUCUBUDVEVBUEUFURUOADKZVGVCSUOUPUQUGUP
      UQVJUOUQUPVJABDUMUHUIHVAACDEFVAUNZGTUJUOUPVHVFSUQHVABCDEFVKGTUKUL $.
      $( [11-Dec-2013] $)
  $}

  ${
    $d t S $.  $d t U $.  $d t W $.
    lspid.s $e |- S = ( LSubSp ` W ) $.
    lspid.n $e |- N = ( LSpan ` W ) $.
    $( The span of a subspace is itself. $)
    lspid $p |- ( ( W e. LMod /\ U e. S ) -> ( N ` U ) = U ) $=
      ( vt clmod wcel wa cfv cv wss crab cint cvbase wceq eqid lssss lspval
      syldan intmin adantl eqtrd ) DHIZBAIZJBCKZBGLMGANOZBUEUFBDPKZMUGUHQABUIDH
      UIRZESGABCUIDUJEFTUAUFUHBQUEGBAUBUCUD $.
      $( [15-Dec-2013] $)
  $}

  $( Define the class of all left vector spaces.  A left vector space is a
     division ring together with an Abelian group and a left scalar product
     connecting them.  Some authors call this a "left module over a division
     ring", reserving "vector space" for those where the division ring is
     commutative i.e. a field. $)
  df-lvec $a |- LVec = ( LMod i^i DivRing ) $.

  $( The predicate "is a left vector space". $)
  islvec2 $p |- ( W e. LVec <-> ( W e. LMod /\ W e. DivRing ) ) $=
    ( clvec wcel clmod cdivring cin wa df-lvec eleq2i elin bitri ) ABCADEFZCADC
    AECGBLAHIADEJK $.
    $( [11-Nov-2013] $)

  $( A left vector space is a left module. $)
  lveclmod $p |- ( W e. LVec -> W e. LMod ) $=
    ( clvec wcel clmod cdivring wa islvec2 simpl sylbi ) ABCADCZAECZFJAGJKHI $.
    $( [9-Dec-2013] $)

  ${
    $d x w A r q $.  $d x w P r q $.  $d x w S r q $.  $d x w T r q $.
    $d x w V r q $.  $d x w W r q $.  $d K r q $.
    islvec.k $e |- K = ( Base ` W ) $.
    islvec.p $e |- P = ( +g ` W ) $.
    islvec.t $e |- T = ( .r ` W ) $.
    islvec.v $e |- V = ( vbase ` W ) $.
    islvec.a $e |- A = ( vadd ` W ) $.
    islvec.s $e |- S = ( vsca ` W ) $.
    islvec.u $e |- U = ( 1r ` W ) $.
    islvec.g $e |- G = { <. ( Base ` ndx ) , V >. , <. ( +g ` ndx ) , A >. } $.
    $( The predicate "is a left vector space".  (Revised by FL,
       11-Nov-2013.) $)
    islvec $p |- ( W e. LVec <-> ( W e. DivRing /\ G e. Abel
        /\ A. q e. K A. r e. K A. x e. V A. w e. V
               ( ( ( r S w ) e. V
                 /\ ( r S ( w A x ) ) = ( ( r S w ) A ( r S x ) )
                 /\ ( ( q P r ) S w ) = ( ( q S w ) A ( r S w ) )
               ) /\ ( ( q S ( r S w ) ) = ( ( q T r ) S w )
                 /\ ( U S w ) = w ) ) ) ) $=
      ( clvec wcel clmod cdivring cin cabel cv wceq w3a wral df-lvec eleq2i crg
      co elin islmod biid anbi12i simpr simpl2 simpl3 divrngring 3ad2ant1 simp2
      wa 3jca simp3 simp1 jca impbii 3bitri bitri ) KUBUCKUDUEUFZUCZKUEUCZHUGUC
      ZLUHZBUHZEUOZJUCVRVSAUHZCUOEUOVTVRWAEUOCUOUIMUHZVRDUOVSEUOWBVSEUOVTCUOUIU
      JWBVTEUOWBVRFUOVSEUOUIGVSEUOVSUIVFVFBJUKAJUKLIUKMIUKZUJZUBVNKULUMVOKUDUCZ
      VPVFKUNUCZVQWCUJZVPVFZWDKUDUEUPWEWGVPVPABCDEFGHIJKLMNOPQRSTUAUQVPURUSWHWD
      WHVPVQWCWGVPUTWFVQWCVPVAWFVQWCVPVBVGWDWGVPWDWFVQWCVPVQWFWCKVCVDVPVQWCVEVP
      VQWCVHVGVPVQWCVIVJVKVLVM $.
      $( [11-Nov-2013] $) $( [21-Sep-2011] $)
  $}

  ${
    $d x y z A $.  $d q r u w x y z B $.  $d x y z P $.  $d x y z S $.
    $d x y z T $.  $d x U $.  $d u w x y z V $.  $d q r u w W $.
    $d q r u w x y z ph $.
    islvecd.b $e |- ( ph -> B = ( Base ` W ) ) $.
    islvecd.p $e |- ( ph -> P = ( +g ` W ) ) $.
    islvecd.t $e |- ( ph -> T = ( .r ` W ) ) $.
    islvecd.u $e |- ( ph -> U = ( 1r ` W ) ) $.
    islvecd.v $e |- ( ph -> V = ( vbase ` W ) ) $.
    islvecd.a $e |- ( ph -> A = ( vadd ` W ) ) $.
    islvecd.s $e |- ( ph -> S = ( vsca ` W ) ) $.
    islvecd.r $e |- ( ph -> W e. DivRing ) $.
    $( Abelian group operations $)
    islvecd.g $e |- ( ph -> G
          = { <. ( Base ` ndx ) , V >. , <. ( +g ` ndx ) , A >. } ) $.
    islvecd.l $e |- ( ph -> G e. Abel ) $.
    $( Scalar product operation $)
    islvecd.w $e |- ( ( ph /\ x e. B /\ y e. V ) -> ( x S y ) e. V ) $.
    islvecd.c $e |- ( ( ph /\ ( x e. B /\ y e. V /\ z e. V ) )
        -> ( x S ( y A z ) ) = ( ( x S y ) A ( x S z ) ) ) $.
    islvecd.d $e |- ( ( ph /\ ( x e. B /\ y e. B /\ z e. V ) )
        -> ( ( x P y ) S z ) = ( ( x S z ) A ( y S z ) ) ) $.
    islvecd.e $e |- ( ( ph /\ ( x e. B /\ y e. B /\ z e. V ) )
        -> ( x S ( y S z ) ) = ( ( x T y ) S z ) ) $.
    islvecd.f $e |- ( ( ph /\ x e. V ) -> ( U S x ) = x ) $.
    $( Properties that determine a left vector space. $)
    islvecd $p |- ( ph -> W e. LVec ) $=
      ( vr vw vu vq cdivring wcel cnx cbs cfv cvbase cop cplusg cvadd cpr cabel
      cv cvsca co wceq w3a cmulr cur wa clvec simp1 simp2r simp3r opreq1 eleq1d
      wral imbi2d opreq2 3expb expcom vtocl2ga impcom syl12anc opreq12d eqeq12d
      wi simp3l opreq2d opreq1d vtocl3ga syl13anc simp2l 3jca id vtoclga 3expia
      sylc jca32 r19.21aivv r19.21aivva opeq2d preq12d opreqd eleq12d opreq123d
      eqtrd eqidd 3anbi123d eqeq1d anbi12d raleqbidv 3anbi23d mpbid eqid islvec
      sylibr ) AMUMUNZUOUPUQZMURUQZUSZUOUTUQZMVAUQZUSZVBZVCUNZUIVDZUJVDZMVEUQZV
      FZYAUNZYHYIUKVDZYDVFZYJVFZYKYHYMYJVFZYDVFZVGZULVDZYHMUTUQZVFZYIYJVFZYSYIY
      JVFZYKYDVFZVGZVHZYSYKYJVFZYSYHMVIUQZVFZYIYJVFZVGZMVJUQZYIYJVFZYIVGZVKZVKZ
      UJYAVRZUKYAVRZUIMUPUQZVRZULUUSVRZVHZMVLUNAXSKVCUNZYHYIHVFZLUNZYHYIYMEVFZH
      VFZUVDYHYMHVFZEVFZVGZYSYHGVFZYIHVFZYSYIHVFZUVDEVFZVGZVHZYSUVDHVFZYSYHIVFZ
      YIHVFZVGZJYIHVFZYIVGZVKZVKZUJLVRZUKLVRZUIFVRZULFVRZVHUVBAXSUVCUWHUAUCAUWF
      ULUIFFAYSFUNZYHFUNZVKZVKUWDUKUJLLAUWKYMLUNZYILUNZVKZUWDAUWKUWNVHZUVPUVTUW
      BUWOUVEUVJUVOUWOAUWJUWMUVEAUWKUWNVMZAUWIUWJUWNVNZAUWKUWLUWMVOZUWJUWMVKAUV
      EABVDZCVDZHVFZLUNZWHAYHUWTHVFZLUNZWHAUVEWHBCYHYIFLUWSYHVGZUXBUXDAUXEUXAUX
      CLUWSYHUWTHVPZVQVSUWTYIVGZUXDUVEAUXGUXCUVDLUWTYIYHHVTZVQVSAUWSFUNZUWTLUNZ
      VKUXBAUXIUXJUXBUDWAWBWCWDWEUWOAUWJUWMUWLUVJUWPUWQUWRAUWKUWLUWMWIUWJUWMUWL
      VHAUVJAUWSUWTDVDZEVFZHVFZUXAUWSUXKHVFZEVFZVGZWHAYHUXLHVFZUXCYHUXKHVFZEVFZ
      VGZWHAYHYIUXKEVFZHVFZUVDUXREVFZVGZWHAUVJWHBCDYHYIYMFLLUXEUXPUXTAUXEUXMUXQ
      UXOUXSUWSYHUXLHVPUXEUXAUXCUXNUXREUXFUWSYHUXKHVPWFWGVSUXGUXTUYDAUXGUXQUYBU
      XSUYCUXGUXLUYAYHHUWTYIUXKEVPWJUXGUXCUVDUXREUXHWKWGVSUXKYMVGZUYDUVJAUYEUYB
      UVGUYCUVIUYEUYAUVFYHHUXKYMYIEVTWJUYEUXRUVHUVDEUXKYMYHHVTWJWGVSAUXIUXJUXKL
      UNZVHUXPUEWBWLWDWMUWOAUWIUWJUWMUVOUWPAUWIUWJUWNWNZUWQUWRUWIUWJUWMVHZAUVOA
      UWSUWTGVFZUXKHVFZUXNUWTUXKHVFZEVFZVGZWHAYSUWTGVFZUXKHVFZYSUXKHVFZUYKEVFZV
      GZWHAUVKUXKHVFZUYPUXREVFZVGZWHAUVOWHBCDYSYHYIFFLUWSYSVGZUYMUYRAVUBUYJUYOU
      YLUYQVUBUYIUYNUXKHUWSYSUWTGVPWKVUBUXNUYPUYKEUWSYSUXKHVPWKWGVSUWTYHVGZUYRV
      UAAVUCUYOUYSUYQUYTVUCUYNUVKUXKHUWTYHYSGVTWKVUCUYKUXRUYPEUWTYHUXKHVPZWJWGV
      SUXKYIVGZVUAUVOAVUEUYSUVLUYTUVNUXKYIUVKHVTVUEUYPUVMUXRUVDEUXKYIYSHVTUXKYI
      YHHVTZWFWGVSAUXIUWTFUNUYFVHZUYMUFWBWLWDWMWOUWOAUWIUWJUWMUVTUWPUYGUWQUWRUY
      HAUVTAUWSUYKHVFZUWSUWTIVFZUXKHVFZVGZWHAYSUYKHVFZYSUWTIVFZUXKHVFZVGZWHAYSU
      XRHVFZUVRUXKHVFZVGZWHAUVTWHBCDYSYHYIFFLVUBVUKVUOAVUBVUHVULVUJVUNUWSYSUYKH
      VPVUBVUIVUMUXKHUWSYSUWTIVPWKWGVSVUCVUOVURAVUCVULVUPVUNVUQVUCUYKUXRYSHVUDW
      JVUCVUMUVRUXKHUWTYHYSIVTWKWGVSVUEVURUVTAVUEVUPUVQVUQUVSVUEUXRUVDYSHVUFWJU
      XKYIUVRHVTWGVSAVUGVUKUGWBWLWDWMUWOUWMAUWBUWRUWPAJUWSHVFZUWSVGZWHAUWBWHBYI
      LUWSYIVGZVUTUWBAVVAVUSUWAUWSYIUWSYIJHVTVVAWPWGVSAUWSLUNVUTUHWBWQWSWTWRXAX
      BWOAUVCYGUWHUVAXSAKYFVCAKXTLUSZYCEUSZVBYFUBAVVBYBVVCYEALYAXTRXCAEYDYCSXCX
      DXHVQAUWGUUTULFUUSNAUWFUURUIFUUSNAUWEUUQUKLYARAUWDUUPUJLYARAUVPUUFUWCUUOA
      UVEYLUVJYRUVOUUEAUVDYKLYAAHYJYHYITXEZRXFAUVGYOUVIYQAYHYHUVFYNHYJTAYHXIAEY
      DYIYMSXEXGAUVDYKUVHYPEYDSVVDAHYJYHYMTXEXGWGAUVLUUBUVNUUDAUVKUUAYIYIHYJTAG
      YTYSYHOXEAYIXIZXGAUVMUUCUVDYKEYDSAHYJYSYITXEVVDXGWGXJAUVTUUKUWBUUNAUVQUUG
      UVSUUJAYSYSUVDYKHYJTAYSXIVVDXGAUVRUUIYIYIHYJTAIUUHYSYHPXEVVEXGWGAUWAUUMYI
      AJUULYIYIHYJTQVVEXGXKXLXLXMXMXMXMXNXOUKUJYDYTYJUUHUULYFUUSYAMUIULUUSXPYTX
      PUUHXPYAXPYDXPYJXPUULXPYFXPXQXR $.
      $( [6-Oct-2013] $)
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x O $.  $d x y z P $.  $d x y z S $.
    $d x y z T $.  $d x U $.  $d x y z V $.  $d x y z ph $.
    islvec2d.b $e |- ( ph -> B = ( Base ` W ) ) $.
    islvec2d.p $e |- ( ph -> P = ( +g ` W ) ) $.
    islvec2d.t $e |- ( ph -> T = ( .r ` W ) ) $.
    islvec2d.u $e |- ( ph -> U = ( 1r ` W ) ) $.
    islvec2d.v $e |- ( ph -> V = ( vbase ` W ) ) $.
    islvec2d.a $e |- ( ph -> A = ( vadd ` W ) ) $.
    islvec2d.s $e |- ( ph -> S = ( vsca ` W ) ) $.
    islvec2d.r $e |- ( ph -> W e. DivRing ) $.
    $( Abelian group (vector) addition $)
    islvec2d.h $e |- ( ( ph /\ x e. V /\ y e. V ) -> ( x A y ) e. V ) $.
    islvec2d.i $e |- ( ( ph /\ ( x e. V /\ y e. V /\ z e. V ) )
        -> ( ( x A y ) A z ) = ( x A ( y A z ) ) ) $.
    islvec2d.j $e |- ( ph -> O e. V ) $.
    islvec2d.k $e |- ( ( ph /\ x e. V ) -> ( O A x ) = x ) $.
    islvec2d.l $e |- ( ( ph /\ x e. V ) -> N e. V ) $.
    islvec2d.m $e |- ( ( ph /\ x e. V ) -> ( N A x ) = O ) $.
    islvec2d.n $e |- ( ( ph /\ x e. V /\ y e. V ) -> ( x A y ) = ( y A x ) ) $.
    $( Scalar product operations $)
    islvec2d.w $e |- ( ( ph /\ x e. B /\ y e. V ) -> ( x S y ) e. V ) $.
    islvec2d.c $e |- ( ( ph /\ ( x e. B /\ y e. V /\ z e. V ) )
        -> ( x S ( y A z ) ) = ( ( x S y ) A ( x S z ) ) ) $.
    islvec2d.d $e |- ( ( ph /\ ( x e. B /\ y e. B /\ z e. V ) )
        -> ( ( x P y ) S z ) = ( ( x S z ) A ( y S z ) ) ) $.
    islvec2d.e $e |- ( ( ph /\ ( x e. B /\ y e. B /\ z e. V ) )
        -> ( x S ( y S z ) ) = ( ( x T y ) S z ) ) $.
    islvec2d.f $e |- ( ( ph /\ x e. V ) -> ( U S x ) = x ) $.
    $( Properties that determine a left vector space.  The hypotheses of this
       version of ~ islvecd include all explicit properties of the vector space
       so that a separate proof of the Abelian group of vectors is not
       required.  Note that the negative element ` N ` is a function of ` x `
       (i.e. allows ` x ` as a free variable). $)
    islvec2d $p |- ( ph -> W e. LVec ) $=
      ( cnx cbs cfv cop cplusg cpr eqidd cvv wcel wceq cvbase fvex eqeltrd eqid
      a1i grpbase syl cvadd grpplusg prex isgrpd isabld islvecd ) ABCDEFGHIJUOU
      PUQMURZUOUSUQEURZUTZMNOPQRSTUAUBAVTVAABCMEVTABCDMEVTKLAMVBVCMVTUPUQVDAMNV
      EUQZVBSWAVBVCANVEVFVIVGMEVTVBVTVHZVJVKZAEVBVCEVTUSUQVDAENVLUQZVBTWDVBVCAN
      VLVFVIVGMEVTVBWBVMVKZVTVBVCAVRVSVNVIUCUDUEUFUGUHVOWCWEUIVPUJUKULUMUNVQ $.
      $( [6-Oct-2013] $)
  $}


