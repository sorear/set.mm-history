$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
        Propositional calculus
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)

$(
Informally, propositional calculus can be thought of as describing formulas
that are universally "true" when their variables are replaced by any
combination of "true" and "false".  Such formulas are called "tautologies".  In
standard texts, there is a metatheorem that allows tautologies to be proved
very simply using truth tables.  However, this metatheorem is too advanced from
our minimalist perspective, as it implicitly presupposes set theory.  We
therefore derive everything we need directly from the axioms.
$)

  $( Declare the primitive constant symbols for propositional calculus. $)
  $c ( $.  $( Left parenthesis $)
  $c ) $.  $( Right parenthesis $)
  $c -> $. $( Right arrow (read:  'implies') $)
  $c -. $. $( Right handle (read:  'not') $)
  $c wff $. $( Well-formed formula symbol (read:  'the following symbol
               sequence is a wff') $)
  $c |- $. $( Turnstyle (read:  'the following symbol sequence is provable' or
              'a proof exists for') $)

  $( Introduce some variable names we will use to represent well-formed
     formulas (wff's).  Traditionally, Greek letters are used as metavariables
     ranging over wff's. $)
  $v ph $. $( Greek phi $)
  $v ps $.  $( Greek psi $)
  $v ch $.  $( Greek chi $)
  $v th $.  $( Greek theta $)
  $v ta $.  $( Greek tau $)

  $(
     Specify some variables that we will use to represent wff's.
     The fact that a variable represents a wff is relevant only to a theorem
     referring to that variable, so we may use $f hypotheses.  The symbol
     ` wff ` specifies that the variable that follows it represents a wff.
  $)

  $( Let variable ` ph ` be a wff. $)
  wph   $f wff ph $.
  $( Let variable ` ps ` be a wff. $)
  wps   $f wff ps $.
  $( Let variable ` ch ` be a wff. $)
  wch   $f wff ch $.
  $( Let variable ` th ` be a wff. $)
  wth   $f wff th $.
  $( Let variable ` ta ` be a wff. $)
  wta   $f wff ta $.

  $(
     Recursively define wff's.  Note that we only define wff's built up
     from other wff's, i.e. there is no starting or "atomic" wff.  Later,
     in predicate calculus, we will extend the basic wff definition by
     defining atomic wff's.
  $)

  $( If ` ph ` is a wff, so is ` -. ph `.  Part of the recursive definition
     of a wff. $)
  wn $a wff -. ph $.

  $( If ` ph ` and ` ps ` are wff's, so is ` ( ph -> ps ) `.  Part of the
     recursive definition of a wff.  The left-hand wff is called the
     antecedent, and the right-hand wff is called the consequent.
     In the case of ` ( ph -> ( ps -> ch ) ) `, the middle ` ps ` may
     be informally called either an antecedent or a consequent depending
     on context. $)
  wi $a wff ( ph -> ps ) $.

