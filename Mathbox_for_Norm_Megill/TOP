$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
                Mathbox for Norm Megill
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)

  $( Recover the commutative law of addition for complex numbers from the
     Abelian group structure. $)
  cnaddcom $p |- ( ( A e. CC /\ B e. CC ) -> ( A + B ) = ( B + A ) ) $=
    ( cnx cbs cfv cc cop cplusg caddc cpr cabel wcel co wceq eqid cnaddabl
    ax-cnex addex grpbase grpplusg ablcom mp3an1 ) CDEFGCHEIGJZKLAFLBFLABIMBAIM
    NUCUCOZPFIUCABFIUCQRUDSFIUCQRUDTUAUB $.
    $( [17-Mar-2013] $)


  ${
    $d g K $.
    toycom.1 $e |- C = { g e. Abel | ( Base ` g ) = CC } $.
    toycom.2 $e |- O = ( +g ` K ) $.
    $( Show the commutative law for an operation ` O ` on a toy structure class
       ` C ` of commuatitive operations on ` CC ` .  This illustrates how a
       structure class can be partially specialized.  In practice, we would
       ordinarily define a new constant such as "CAbel" in place of ` C ` . $)
    toycom $p |- ( ( K e. C /\ A e. CC /\ B e. CC )
                    -> ( A O B ) = ( B O A ) ) $=
      ( wcel cc w3a cplusg cfv co cabel cbs wceq cv crab ssrab2 eqsstri sseli
      3ad2ant1 simp2 fveq2 eqeq1d elrab2 simprbi eleqtrrd simp3 eqid ablcom
      syl111anc opreqi 3eqtr4g ) ECIZAJIZBJIZKZABELMZNZBAUTNZABFNBAFNUSEOIZAEPM
      ZIBVDIVAVBQUPUQVCURCOECDRZPMZJQZDOSOGVGDOTUAUBUCUSAJVDUPUQURUDUPUQVDJQZUR
      UPVCVHVGVHDEOCVEEQVFVDJVEEPUEUFGUGUHUCZUIUSBJVDUPUQURUJVIUIVDUTEABVDUKUTU
      KULUMFUTABHUNFUTBAHUNUO $.
      $( [17-Mar-2013] $)
  $}

  $( Class variables used as operators, relations, etc. $)

  $v .< $.
$(
  $v .<_ $.
  $v ./\ $.
  $v .\/ $.
  $v .+ $.
$)

  .lt $f class .< $.
$(
  .le $f class .<_ $.
  .an $f class ./\ $.
  .or $f class .\/ $.
  .pl $f class .+ $.
$)

  ${
    $d x y z B $.  $d x y z .\/ $.  $d x y z K $.  $d y z .<_ $.  $d x y z S $.
    $d x y z T $.  $d x y z U $.
    lubunNEW.b $e |- B = ( Base ` K ) $.
    lubunNEW.j $e |- .\/ = ( join ` K ) $.
    lubunNEW.u $e |- U = ( lub ` K ) $.
    $( The LUB of a union. $)
    lubunNEW $p |- ( ( K e. CLat /\ S C_ B /\ T C_ B )
                      -> ( U ` ( S u. T ) ) = ( ( U ` S ) .\/ ( U ` T ) ) ) $=
      ( vy vx vz ccla wcel wss w3a cun cfv cv cple wbr wral wi wa crio co wceq
      simp1 unss biimpi 3adant1 eqid lubval syl11anc clat clatl 3ad2ant1
      clatlubcl 3adant3 3adant2 latjcl syl111anc wb simpl1 syl simpr adantr
      latasymb simpl2 sseldd simpl3 lubel latlej1 lattrd r19.21aiva latlej2
      ralunb sylanbrc breq2 ralbidv imbi12d rcla4v mpid imp ad2ant2rl lubl
      anim12d latjle12 syl13anc sylibd syl5bi adantrr mpbi2and ex wo elun
      jaodan sylan2b breq1 imbi2d anbi12d biimprcd impbid riota5 mpdan eqtrd )
      FMNZBAOZCAOZPZBCQZDRZJSZKSZFTRZUAZJXKUBZXMLSZXOUAZJXKUBZXNXRXOUAZUCZLAUBZ
      UDZKAUEZBDRZCDRZEUFZXJXGXKAOZXLYEUGXGXHXIUHXHXIYIXGXHXIUDYIBCAUIUJUKKJLMA
      XKDFXOGXOULZIUMUNXJYHANZYEYHUGXJFUONZYFANZYGANZYKXGXHYLXIFUPZUQZXGXHYMXIA
      BDFGIURZUSZXGXIYNXHACDFGIURZUTZAEFYFYGGHVAZVBZXJYDKAYHXJXNANZYDXNYHUGZVCY
      KXJUUCUDZYDUUDUUEYDUUDUUEYDUDXNYHXOUAZYHXNXOUAZUUDUUEUUFUUGUDUUDVCZYDUUEY
      LUUCYKUUHUUEXGYLXGXHXIUUCVDZYOVEZXJUUCVFZXJYKUUCUUBVGAFXOXNYHGYJVHVBVGXJY
      CUUFUUCXQXJYCUUFXJYCXMYHXOUAZJXKUBZUUFXJUULJBUBUULJCUBUUMXJUULJBXJXMBNZUD
      ZAFXOXMYFYHGYJUUOXGYLXGXHXIUUNVDZYOVEZUUOBAXMXGXHXIUUNVIZXJUUNVFZVJUUOXGX
      HYMUUPUURYQUNZUUOYLYMYNYKUUQUUTUUOXGXIYNUUPXGXHXIUUNVKYSUNZUUAVBUUOXGUUNX
      HXMYFXOUAUUPUUSUURABDFXOXMGYJIVLVBUUOYLYMYNYFYHXOUAUUQUUTUVAAEFXOYFYGGYJH
      VMVBVNZVOXJUULJCXJXMCNZUDZAFXOXMYGYHGYJXJYLUVCYPVGZUVDCAXMXGXHXIUVCVKZXJU
      VCVFZVJUVDXGXIYNXGXHXIUVCVDZUVFYSUNZXJYKUVCUUBVGUVDXGUVCXIXMYGXOUAUVHUVGU
      VFACDFXOXMGYJIVLVBUVDYLYMYNYGYHXOUAUVEUVDXGXHYMUVHXGXHXIUVCVIYQUNUVIAEFXO
      YFYGGYJHVPVBVNZVOUULJBCVQVRXJYKYCUUMUUFUCZUCUUBYBUVKLYHAXRYHUGZXTUUMYAUUF
      UVLXSUULJXKXRYHXMXOVSVTXRYHXNXOVSWAWBVEWCWDWEUUEXQUUGYCUUEXQUUGXQXPJBUBZX
      PJCUBZUDZUUEUUGXPJBCVQUUEUVOYFXNXOUAZYGXNXOUAZUDZUUGUUEUVMUVPUVNUVQUUEXGX
      HUUCUVMUVPUCUUIXGXHXIUUCVIUUKJABDFXOXNGYJIWFVBUUEXGXIUUCUVNUVQUCUUIXGXHXI
      UUCVKUUKJACDFXOXNGYJIWFVBWGUUEYLYMYNUUCUVRUUGVCUUJXJYMUUCYRVGXJYNUUCYTVGU
      UKAEFXOYFYGXNGYJHWHWIWJWKWDWLWMWNXJUUDYDUCZUUCXJUUMXTYHXRXOUAZUCZLAUBZUVS
      XJUULJXKXMXKNXJUUNUVCWOUULXMBCWPXJUUNUULUVCUVBUVJWQWRVOXJUWALAXJXRANZUDZX
      TYFXRXOUAZYGXRXOUAZUDZUVTXTXSJBUBZXSJCUBZUDUWDUWGXSJBCVQUWDUWHUWEUWIUWFUW
      DXGXHUWCUWHUWEUCXGXHXIUWCVDZXGXHXIUWCVIZXJUWCVFZJABDFXOXRGYJIWFVBUWDXGXIU
      WCUWIUWFUCUWJXGXHXIUWCVKZUWLJACDFXOXRGYJIWFVBWGWKUWDYLYMYNUWCUWGUVTVCUWDX
      GYLUWJYOVEUWDXGXHYMUWJUWKYQUNUWDXGXIYNUWJUWMYSUNUWLAEFXOYFYGXRGYJHWHWIWJV
      OUUDYDUUMUWBUDUUDXQUUMYCUWBUUDXPUULJXKXNYHXMXOVSVTUUDYBUWALAUUDYAUVTXTXNY
      HXRXOWSWTVTXAXBUNVGXCUTXDXEXF $.
      $( [5-Mar-2012] $)
  $}

$(
  @c ser @.
  @( Extend class notation with series generator. @)
  cser @a class ser @.

  @{
    @d p f x y @.
    @( Def. 8.3.72, p. 198. @)
    @( Define series generator.  (This may be used to replace ` seq ` .) @)
    df-ser @a |- ser = ( p e. _V , f e. _V |-> ran ( rec ( ( x e. _V , y e. _V
     |-> <. ( x + 1 ) , ( y ( 2nd ` p ) ( f ` ( x + 1 ) ) ) >. ) ,
             <. ( 1st ` p ) , ( f ` ( 1st ` p ) ) >. ) |` om ) ) @.
  @}

  @{
    @d x y A @.  @d f p x y F @.  @d f p x y M @.  @d f p x y S @.
    serval.1 @e |- S e. _V @.
    serval.2 @e |- F e. _V @.
    @( Value of the arbitrary-based recursive sequence builder operation. @)
    serfval @p |- ( M e. A -> ( <. M , S >. ser F )
       = ran ( rec ( ( x e. _V , y e. _V
          |-> <. ( x + 1 ) , ( y S ( F ` ( x + 1 ) ) ) >. ) ,
             <. M , ( F ` M ) >. ) |` om ) ) @=
      ( vp vf wcel cvv cv c1 caddc co cfv cop c2nd cmpt2 c1st crdg com cres
      crn cser wceq eqidd op2ndg mpan2 opreqd opeq2d mpt2eq123dv rdgeq1 syl
      op1stg fveq2d opeq12d rdgeq2 eqtrd reseq1 rneqd opex fveq2 fveq1 opreq2d
      df-ser wfun con0 wfn rdgfnon fnfun ax-mp omex resfunexg mp2an rnex
   ovmpt2 syl5eqOLD ) FCKZABLLAMNOPZBMZWAEQZFDRZSQZPZRZTZWDUAQZWIEQZRZUBZUCUDZU
      EZABLLWAWBWCDPZRZTZFFEQZRZUBZUCUDZUEWDEUFPZVTWMXAVTWLWTUGWMXAUGVTWLWQWKUB
      ZWTVTWHWQUGWLXCUGVTABLLWGLLWPVTLUHZXDVTWFWOWAVTWEDWBWCVTDLKWEDUGGFDCLUIUJ
      UKULUMWKWHWQUNUOVTWKWSUGXCWTUGVTWIFWJWRFDCUPZVTWIFEXEUQURWKWSWQUSUOUTWLWT
      UCVAUOVBWDLKELKXBWNUGFDVCHIJWDELLABLLWAWBWAJMZQZIMZSQZPZRZTZXHUAQZXMXFQZR
      ZUBZUCUDZUEWNUFABLLWAWBXGWEPZRZTZWIWIXFQZRZUBZUCUDZUEXHWDUGZXQYDYEXPYCUGX
      QYDUGYEXPXTXOUBZYCYEXLXTUGXPYFUGYEABLLXKLLXSYELUHZYGYEXJXRWAYEXIWEWBXGXHW
      DSVDUKULUMXOXLXTUNUOYEXOYBUGYFYCUGYEXMWIXNYAXHWDUAVDZYEXMWIXFYHUQURXOYBXT
      USUOUTXPYCUCVAUOVBXFEUGZYDWMYIYCWLUGYDWMUGYIYCWHYBUBZWLYIXTWHUGYCYJUGYIAB
      LLXSLLWGYILUHZYKYIXRWFWAYIXGWCWBWEWAXFEVEVFULUMYBXTWHUNUOYIYBWKUGYJWLUGYI
      YAWJWIWIXFEVEULYBWKWHUSUOUTYCWLUCVAUOVBABJIVGWMWLVHZUCLKWMLKWLVIVJYLWKWHV
      KVIWLVLVMVNWLUCLVOVPVQVRVPVS @.
      @( [29-Oct-2011] @)
$)

$(
    @( Functionality and domain of a sequence generated by the arbitrary-based
       recursive sequence builder. @)
    serfn @p |- ( M e. ZZ ->
                 ( <. M , S >. ser F ) Fn ( ZZ>= ` M ) ) @=
      ? @.
      @( [29-Oct-2011] @)

    @( Value of the arbitrary-based recursive sequence builder operation. @)
    serval @p |- ( ( M e. A /\ N e. ZZ /\ M <_ N ) ->
                   ( ( <. M , S >. ser F ) ` N ) =    ) @=
      ? @.
      @( [29-Oct-2011] @)
  @}
$)

$(
  @{
    om2seq.1 @e |- M e. ZZ @.
@( om2uz.2 @e |- G = ( rec ( { <. x , y >. | y = ( x + 1 ) } , C ) |` om ) @)
    om2seq.2 @e |- G = ( rec ( ( x e. _V , y e. _V
          |-> <. ( x + 1 ) , ( x B y ) >. ) , <. M , A >. ) |` om ) @.
    @( Ordinal natural number 0 maps to complex number ` C `
       (normally 0 for the upper integers ` NN0 ` or 1 for the upper integers
       ` NN ` ), 1 maps to ` C ` + 1, etc.  This theorem shows the value of
       ` G ` at ordinal natural number zero. @)
    om2seq0i @p |- ( G ` (/) ) = <. M , A >. @=
      ( c0 cfv cvv cv c1 caddc co cop cmpt2 crdg com cres fveq1i wcel wceq
      opex fr0g ax-mp eqtri ) IEJIABKKALMNODPQZFCPZRSTZJZUIIEUJHUAUIKUBUKUIUCFC
      UDUIKUHUEUFUG @.
      @( [15-Oct-2004] @) @( [3-Oct-2004] @)

    @( The value of ` G ` (see ~ om2uz0i ) at a successor. @)
    om2seqsuci @p |- ( N e. om -> ( G ` suc N ) = <. ( ( G ` N ) + 1 ) ,
         [ ( G ` N ) / x ] B >. ) @=
      ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? om2seq.2 ? frsucmpt mpan2
      vtoclga @.
      @( [15-Oct-2004] @) @( [3-Oct-2004] @)

    @( MAY BE REVISED - use ~ df-uz stuff instead of ` { z e. ZZ | C <_ z } `
       here and other om2uz* @)
    @( The value ` G ` (see ~ om2uz0i ) at an ordinal natural number is in the
       upper integers. @)
    om2sequzi @p |- ( A e. om -> ( G ` A ) e. { z e. ZZ | C <_ z } ) @=
      ? @.
      @( [15-Oct-2004] @) @( [3-Oct-2004] @)

    @( Less-than relation for ` G ` (see ~ om2uz0i ). @)
    om2seqlti @p |- ( ( A e. om /\ B e. om ) ->
                   ( A e. B -> ( G ` A ) < ( G ` B ) ) ) @=
      ? @.
      @( [15-Oct-2004] @) @( [3-Oct-2004] @)

    @( The mapping ` G ` (see ~ om2uz0i ) preserves order. @)
    om2seqlt2i @p |- ( ( A e. om /\ B e. om ) ->
                   ( A e. B <-> ( G ` A ) < ( G ` B ) ) ) @=
      ? @.
      @( [7-May-2005] @) @( [4-May-2005] @)

    @( Range of ` G ` (see ~ om2uz0i ). @)
    om2seqrani @p |- ran G = { z e. ZZ | C <_ z } @=
      ? @.
      @( [15-Oct-2004] @) @( [3-Oct-2004] @)

    @( ` G ` (see ~ om2uz0i ) is a one-to-one onto mapping. @)
    om2seqf1oi @p |- G : om -1-1-onto-> { z e. ZZ | C <_ z } @=
      ? @.
  @}
$)

