$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                    Hilbert space reconstruction
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c Lines $.
  $c Points $.
  $c PSubSp $.
  $c pmap $.
  $c +P $.
  $c sumP $.
  $c Indep $.
  $c BasesP $.
  $c rankP $.
  $c _|_P $.
  $c PHyp $.
  $c ww $.
  $c WPoints $.
  $c PAut $.
  $c Dil $.
  $c Trn $.
  $c trP $.
  $c TGrp $.
  $c GrpEndo $.
  $c TGrpEndo $.
  $c ERing $.
  $c TPEndo $.
  $c DRing $.
  $c DVecA $.
  $c DVIsoPre $.
  $c DVecB $.
  $c DVecH $.
  $c ee $.
  $c DVIsoA $.
  $c qtr $.
  $c DVIsoB $.
  $c DVIsoC $.
  $c DVIsoH $.
  $c S_|_ $.
  $c Ropp $.
  $c Vldual $.
  $c vecdom $.
  $c ker $.
  $c mapd $.
  $c eimage $.
  $c hmap $.
  $c gmap $.
  $c HLtoHil $.

  $( Extend class notation with set of all lines in Hilbert lattice $L$. $)
  clines $a class Lines $.

  $( Extend class notation with set of all points. $)
  cpoints $a class Points $.

  $( Extend class notation with set of all projective subspaces. $)
  cpsubsp $a class PSubSp $.

  $( Extend class notation with projective map. $)
  cpmap $a class pmap $.

  $( Extend class notation with projective subspace sum. $)
  cplusp $a class +P $.

  $( Extend class notation with projective subspace sum. $)
  csump $a class sumP $.

  $( Extend class notation with set of all sets of independent points. $)
  cindep $a class Indep $.

  $( Extend class notation with all bases for projective subspaces. $)
  cbasesp $a class BasesP $.

  $( Extend class notation with rank of projective subspace $m$. $)
  crankp $a class rankP $.

  $( Extend class notation with polarity of projective subspace $m$. $)
  cpol $a class _|_P $.

  $( Extend class notation with set of all (projective) hyperplanes. $)
  cphyp $a class PHyp $.

  $( Extend class notation with designated hyperplane. $)
  cww $a class ww $.

  $( Extend class notation with W points. $)
  cwpoints $a class WPoints $.

  $( Extend class notation with set of all projective automorphisms. $)
  cpaut $a class PAut $.

  $( Extend class notation with set of all dilations. $)
  cdil $a class Dil $.

  $( Extend class notation with set of all translations. $)
  ctrn $a class Trn $.

  $( Extend class notation with trace of a translation $f$. $)
  ctrp $a class trP $.

  $( Extend class notation with translation group. $)
  ctgrp $a class TGrp $.

  $( Extend class notation with group endomorphisms of $G$. $)
  cgrpendo $a class GrpEndo $.

  $( Extend class notation with translation group endomorphisms. $)
  ctgrpendo $a class TGrpEndo $.

  $( Extend class notation with endomorphism ring. $)
  cering $a class ERing $.

  $( Extend class notation with trace-preserving endomorphisms. $)
  ctpendo $a class TPEndo $.

  $( Extend class notation with $\Delta$-ring. $)
  cdring $a class DRing $.

  $( Extend class notation with constructed vector space A. $)
  cdveca $a class DVecA $.

  $( Extend class notation with preliminary projective subspace isomorphism. $)
  cdvisopre $a class DVIsoPre $.

  $( Extend class notation with constructed vector space B. $)
  cdvecb $a class DVecB $.

  $( Extend class notation with constructed vector space. $)
  cdvech $a class DVecH $.

  $( Extend class notation with e vector. $)
  cee $a class ee $.

  $( Extend class notation with projective subspace isomorphism A. $)
  cdvisoa $a class DVIsoA $.

  $( Extend class notation with q-translation. $)
  cqtr $a class qtr $.

  $( Extend class notation with projective subspace isomorphism B. $)
  cdvisob $a class DVIsoB $.

  $( Extend class notation with projective subspace isomorphism C. $)
  cdvisoc $a class DVIsoC $.

  $( Extend class notation with projective subspace isomorphism. $)
  cdvisoh $a class DVIsoH $.

  $( Extend class notation with constructed orthocomplement. $)
  csoc $a class S_|_ $.

  $( Extend class notation with opposite ring. $)
  cropp $a class Ropp $.

  $( Extend class notation with left dualvector space. $)
  cvldual $a class Vldual $.

  $( Extend class notation with vector domain. $)
  cvecdom $a class vecdom $.

  $( Extend class notation with kernel of a functional. $)
  cker $a class ker $.

  $( Extend class notation with one-dimensional subspace map. $)
  cmapd $a class mapd $.

  $( Extend class notation with e vector image. $)
  ceimage $a class eimage $.

  $( Extend class notation with h map. $)
  chmap $a class hmap $.

  $( Extend class notation with g map. $)
  cgmap $a class gmap $.

  $( Extend class notation with Hilbert space constructed from Hilbert
     lattice. $)
  chltohil $a class HLtoHil $.

  ${
    $d a b d e f g h k l m n p q r s t u v w x y z $.
    $( Define set of all lines in Hilbert lattice $L$.  Def. 8.6.1, p. 229. $)
    df-lines $a |- Lines = ( l e. _V |-> { s | E. q e. ( AtomsNEW ` l )
     E. r e. ( AtomsNEW ` l ) ( q =/= r /\
     s = { p e. ( AtomsNEW ` l ) | p ( le ` l ) ( q ( join ` l ) r ) } ) } ) $.

    $( Define set of all points.  Def. 8.6.2, p. 229. $)
    df-points $a |- Points = ( l e. _V |-> { q |
                   E. p e. ( AtomsNEW ` l ) q = { p } } ) $.

    $( Define set of all projective subspaces.  Def. 8.6.3, p. 229. $)
    df-psubsp $a |- PSubSp = ( l e. _V |-> { s | ( s C_ ( AtomsNEW ` l )
      /\ A. p e. s A. q e. s A. r e. ( AtomsNEW ` l )
        ( r ( le ` l ) ( p ( join ` l ) q ) -> r e. s ) ) } ) $.

    $( Define projective map for ` l ` at ` a ` .  Def. 8.6.4, p. 230. $)
    df-pmap $a |- pmap = ( l e. _V |-> ( a e. ( base ` l ) |->
               { p e. ( AtomsNEW ` l ) | p ( le ` l ) a } ) ) $.

    $( Define projective sum of two subspaces.  Def. 8.6.6, p. 230. $)
    df-plusp $a |- +P = ( l e. _V |-> ( m e. ( PSubSp ` l ) , n e. ( PSubSp ` l
        )
      |-> { p e. ( AtomsNEW ` l ) | E. q e. m E. r e. n
         p ( le ` l ) ( q ( join ` l ) r ) } ) ) $.

    $( Define projective sum of a set of subspaces.  Def. 8.6.7, p. 231. $)
    df-sump $a |- sumP = ( l e. _V |-> ( s e. ~P ( PSubSp ` l ) |->
       ( ( +P ` l ) idsumf s ) ) ) $.

    $( Define set of all sets of independent points.  Def. 8.6.8, p. 231. $)
    df-indep $a |- Indep = ( l e. _V |-> { s e. ~P ( Points ` l )
    | A. a A. b ( ( ( a u. b ) = s /\ ( a i^i b ) = (/) ) ->
      ( ( ( sumP ` l ) ` a ) i^i ( ( sumP ` l ) ` b ) ) = (/) ) } ) $.

    $( Define all bases for projective subspace $m$.  Def. 8.6.9, p. 231. $)
    df-basesp $a |- BasesP = ( l e. _V , m e. _V |-> { s e. ( Indep ` l )
      | ( ( sumP ` l ) ` s ) = m } ) $.

    $( Define rank of projective subspace $m$.  Def. 8.6.10, p. 232. $)
    df-rankp $a |- rankP = ( l e. _V , m e. _V |-> ( iota r
    A. b e. ( l Bases m ) r = ( card ` b ) ) ) $.

    $( Define polarity of projective subspace $m$.  Def. 8.6.11, p. 232. $)
    df-polarity $a |- _|_P = ( l e. _V |-> ( m e. ( PSubSp ` l ) |->
    |^| { w | E. p e. m w = ( ( pmap ` l ) ` ( ( oc ` l ) ` p ) ) } ) ) $.

    $( Define set of all (projective) hyperplanes.  Def. 8.6.13, p. 233. $)
    df-phyp $a |- PHyp = ( l e. _V |-> { h | E. p e. ( Points ` l )
        h = ( ( _|_P ` l ) ` p ) } ) $.

    $( Define designated hyperplane.  Def. 8.6.14, p. 233. $)
    df-ww $a |- ww = ( l e. _V , p e. _V |-> ( ( _|_P ` l ) ` { p } ) ) $.

    $( Define W points.  Def. 8.6.15, p. 233. $)
    df-wpoints $a |- WPoints = ( l e. _V , p e. _V |-> { x e. ( Points ` l )
      | -. x C_ ( l ww p ) } ) $.

    $( Define set of all projective automorphisms.  Def. 8.6.16, p. 234. $)
    df-paut $a |- PAut = ( l e. _V |-> { f | ( f : ( PSubSp ` l ) -1-1-onto->
      ( PSubSp ` l ) /\ A. x e. ( PSubSp ` l ) A. y e. ( PSubSp ` l )
        ( x C_ y <-> ( f ` x ) C_ ( f ` y ) ) ) } ) $.

    $( Define set of all dilations.  Def. 8.6.17, p. 234. $)
    df-dil $a |- Dil = ( l e. _V , p e. _V |-> { f e. ( PAut ` l )
     | A. x e. ( PSubSp ` l ) ( x C_ ( l ww p ) -> ( f ` x ) = x ) } ) $.

    $( Define set of all translations.  Def. 8.6.18, p. 234. $)
    df-trn $a |- Trn = ( l e. _V , p e. _V |-> { f e. ( l Dil p )
     | A. q e. ( l WPoints p ) A. r e. ( l WPoints p )
        ( ( q ( +P ` l ) ( f ` q ) ) i^i ( l ww p ) )
      = ( ( r ( +P ` l ) ( f ` r ) ) i^i ( l ww p ) ) } ) $.

    $( Define trace of a translation $f$.  Def. 8.6.19, p. 235. $)
    df-trp $a |- trP = ( l e. _V , p e. _V |-> ( f e. ( l Trn p ) |->
     ( iota x ( x e. ( PSubSp ` l ) /\ A. q e. ( l WPoints p )
        x = ( ( q ( +P ` l ) ( f ` q ) ) i^i ( l ww p ) ) ) ) ) ) $.

    $( Define translation group.  Def. 8.6.21, p. 235. $)
    df-tgrp $a |- TGrp = ( l e. _V , p e. _V |-> { <. 1 , ( l Trn p ) >. ,
       <. 2 , ( f e. ( l Trn p ) , g e. ( l Trn p ) |-> ( f o. g ) ) >. } ) $.

    $( Define group endomorphisms of $G$.  Def. 8.6.23, p. 235. $)
    df-grpendo $a |- GrpEndo = ( g e. _V |-> { f |
   ( f : ( base ` g ) --> ( base ` g )
      /\ A. x e. ( base ` g ) A. y e. ( base ` g )
       ( x ( +g ` g ) y ) = ( ( f ` x ) ( +g ` g ) ( f ` y ) ) ) } ) $.

    $( Define translation group endomorphisms.  Def. 8.6.24, p. 236. $)
    df-tgrpendo $a |- TGrpEndo = ( l e. _V , p e. _V |->
      ( GrpEndo ` ( l TGrp p ) ) ) $.

    $( Define endomorphism ring.  Def. 8.6.25, p. 236. $)
    df-ering $a |- ERing = ( l e. _V , p e. _V |-> { <. 1 , ( l TGrpEndo p ) >.
        ,
       <. 2 , ( s e. ( l TGrpEndo p ) , t e. ( l TGrpEndo p ) |->
           ( f e. ( l Trn p ) |-> ( ( s ` f ) o. ( t ` f ) ) ) ) >. ,
       <. 3 , ( s e. ( l TGrpEndo p ) , t e. ( l TGrpEndo p ) |->
           ( f e. ( l Trn p ) |-> ( t ` ( s ` f ) ) ) ) >. } ) $.

    $( Define trace-preserving endomorphisms.  Def. 8.6.27, p. 237. $)
    df-tpendo $a |- TPEndo = ( l e. _V , p e. _V |-> { s e. ( l TGrpEndo p ) |
     A. f e. ( base ` ( l TGrp p ) )
         ( ( l tr p ) ` ( s ` f ) ) C_ ( ( l tr p ) ` f ) } ) $.

    $( Define delta ring.  Def. 8.6.28, p. 237. $)
    df-dring $a |- DRing = ( l e. _V , p e. _V |->
     { <. 1 , ( l TGrpEndo p ) >. ,
       <. 2 , ( +g ` ( l ERing p ) ) >. ,
       <. 3 , ( .r ` ( l ERing p ) ) >. } ) $.

    $( Define constructed partial vector space A. Def. 8.6.30, p. 237. $)
    df-dveca $a |- DVecA = ( l e. _V , p e. _V |-> ( ( l DRing p )
    u. { <. 4 , ( base ` ( l TGrp p ) ) >. ,
         <. 5 , ( +g ` ( l TGrp p ) ) >. ,
         <. 6 , ( s e. ( l TGrpEndo p ) , f e. ( l Trn p ) |->
                ( s ` f ) ) >. } ) ) $.

    $( Define preliminary projective subspace isomorphism.  Def. 8.6.31,
       p. 238. $)
    df-dvisopre $a |- DVIsoPre = ( l e. _V , p e. _V |->
     ( x e. { y e. ( PSubSp ` l ) | y C_ ( l ww p ) } |-> { f e. ( l Trn p ) |
     ( ( l tr p ) ` f ) C_ x } ) ) $.

    $( Define constructed partial vector space B. Def. 8.6.32, p. 238. $)
    df-dvecb $a |- DVecB = ( l e. _V , p e. _V |-> ( ( l DRing p )
    u. { <. 4 , ( base ` ( l DRing p ) ) >. ,
         <. 5 , ( +g ` ( l DRing p ) ) >. ,
         <. 6 , ( .r ` ( l DRing p ) ) >. } ) ) $.

    $( Define constructed vector space.  Def. 8.6.33, p. 239. $)
    df-dvech $a |- DVecH = ( l e. _V , p e. _V |->
        ( ( l DVecA p ) o+ ( l DVecB p ) ) ) $.

    $( Define e vector.  Def. 8.6.34, p. 239. $)
    df-ee $a |- ee = ( l e. _V , p e. _V |->
      <. ( 0vNEW ` ( l DVecA p ) ) , ( 1rNEW ` ( l DRing p ) ) >. ) $.

    $( Define projective subspace isomorphism A. Def. 8.6.36, p. 239. $)
    df-dvisoa $a |- DVIsoA = ( l e. _V , p e. _V |->
     ( x e. { y e. ( PSubSp ` l ) | y C_ ( l ww p ) } |->
      <. ( ( l DVIsoPre p ) ` x ) , ( 0vNEW ` ( l DVecB p ) ) >. ) ) $.

    $( Define q-translation.  Def. 8.6.37, p. 240. $)
    df-qtr $a |- qtr = ( l e. _V , p e. _V |->
    ( q e. ( l WPoints p ) |->
      <. ( iota f ( f e. ( l Trn p ) /\ ( f ` { p } ) = q ) ) ,
          ( 0vNEW ` ( l DVecA p ) ) >. ) ) $.

    $( Define projective subspace isomorphism B. Def. 8.6.38, p. 240. $)
    df-dvisob $a |- DVIsoB = ( l e. _V , p e. _V |->
    ( q e. ( l WPoints p ) |-> { v e. ( l DVecH p ) | E. s e. ( l DRing p )
       v = ( s ( vsca ` ( l DVecH p ) )
         ( ( l ee p ) ( vadd ` ( l DVecH p ) ) ( ( l qtr p ) ` q ) ) ) } ) ) $.

    $( Define projective subspace isomorphism C. Def. 8.6.39, p. 240. $)
    df-dvisoc $a |- DVIsoC = ( l e. _V , p e. _V |->
     ( x e. { y e. ( PSubSp ` l ) | -. y C_ ( l ww p ) } |->
        ( iota z A. q e. ( l WPoints p ) z = ( ( ( l DVIsoB p ) ` q )
              ( +g ` ( l DVecH p ) )
           ( ( l DVIsoA p ) ` ( x i^i ( l ww p ) ) ) ) ) ) ) $.

    $( Define projective subspace isomorphism.  Def. 8.6.40, p. 241. $)
    df-dvisoh $a |- DVIsoH = ( l e. _V , p e. _V |->
          ( ( l DVIsoA p ) u. ( l DVIsoC p ) ) ) $.

    $( Define constructed orthocomplement.  Def. 8.6.43, p. 241. $)
    df-soc $a |- S_|_ = ( l e. _V , p e. _V |->
        ( s e. ( SubSpNEW ` ( l DVecH p ) ) |->
          ( ( _|_P ` l ) ` ( `' ( l DVIsoH p ) ` s ) ) ) ) $.

    $( Define the opposite of a ring with multiplication reversed.  Def.
       8.6.44, p. 242. $)
    df-ropp $a |- Ropp = ( r e. _V |-> ( ( r |` ( _V \ { 3 } ) ) u.
      { <. 3 , ( x e. ( base ` r ) , y e. ( base ` r ) |->
          ( y ( .r ` r ) x ) ) >. } ) ) $.

    $( Define the left dual of a vector space.  Def. 8.6.46, p. 243. $)
    df-vldual $a |- Vldual = ( v e. _V |-> ( ( v |` ( _V \ ( 3 ... 6 ) ) ) u.
      { a | E. l E. k E. t E. u E. w (
          ( k = ( base ` v )
            /\ t = ( .r ` ( Ropp ` v ) )
            /\ u = ( vbase ` v ) )
        /\ ( w = { g | ( g : u --> k /\ A. r e. k A. x e. u
                  ( g ` ( r ( vsca ` v ) x ) ) = ( ( g ` x ) t r ) ) }
             /\ a e. ( { <. 3 , t >. , <. 4 , w >. } u.
                  { <. 5 , ( g e. v , h e. v |-> ( x e. u |->
                      ( ( g ` x ) ( +g ` v ) ( h ` x ) ) ) ) >. ,
                    <. 6 , ( r e. k , g e. v |-> ( x e. u |->
                      ( r t ( g ` x ) ) ) ) >. } ) ) ) } ) ) $.

    $( Define vector domain.  Def. 8.6.47, p. 244. $)
    df-vecdom $a |- vecdom = ( w e. _V |->
             ( iota d A. f e. ( vbase ` w ) d = dom f ) ) $.

    $( Define kernel of a functional.  Def. 8.6.48, p. 244. $)
    df-ker $a |- ker = ( w e. _V |-> ( f e. ( vbase ` w ) |->
       { x e. ( vecdom ` w ) | ( f ` x ) = ( 0g ` w ) } ) ) $.

    $( Define one-dimensional subspace map.  Def. 8.6.49, p. 245. $)
    df-mapd $a |- mapd = ( l e. _V , p e. _V |-> { a | E. v E. w
     ( v = ( l DVecH p ) /\ w = ( Vldual ` v )
       /\ a e. ( s e. { r | E. x e. ( vbase ` v )
          r = ( ( span ` v ) ` { x } ) } |->
               ( iota t A. x e. s A. f e. ( vbase ` w )
   ( ( ( ker ` w ) ` f ) = s /\ t = ( ( span ` w ) ` { f } ) ) ) ) ) } ) $.

    $( Define e vector image.  Def. 8.6.50, p. 246. $)
    df-eimage $a |- eimage = ( l e. _V , p e. _V |-> { a | E. v E. w E. e
        ( ( v = ( l DVecH p ) /\ w = ( Vldual ` v )
          /\ e = ( l ee p ) )
           /\ a e. ( iota f ( f e. ( ( l mapd p ) ` ( ( spanNEW ` v ) ` { e } )
                ) /\ ( f ` e ) = ( 1rNEW ` w ) ) ) ) } ) $.

    $( Define h map.  Def. 8.6.51, p. 246. $)
    df-hmap $a |- hmap = ( l e. _V , p e. _V |-> { a | E. v E. w E. e E. f
   ( ( v = ( l DVecH p ) /\ w = ( Vldual ` v ) /\ e = ( l ee p ) )
     /\ ( f = ( l eimage p )
          /\ a e. ( y e. ( vbase ` v ) |-> if ( y = ( 0vNEW ` v ) ,
              ( 0vNEW ` w ) , if ( y e. ( ( spanNEW ` v ) ` { e } ) ,
   ( iota u ( u e. ( ( spanNEW ` w ) ` { f } ) /\ ( u ` e ) = ( f ` y ) ) ) ,
       ( iota u ( u e. ( vbase ` w )
            /\ ( ( l mapd p ) ` ( ( spanNEW ` v ) ` { y } ) )
                = ( ( spanNEW ` w ) ` { v } )
            /\ ( ( l mapd v ) ` ( ( span ` v ) ` { ( e ( -vNEW ` v ) y ) } ) )
            = ( ( span ` w ) ` { ( f ( -vNEW ` w ) u ) } ) ) ) ) ) ) ) ) } ) $.

    $( Define g map.  Def. 8.6.52, p. 247. $)
    df-gmap $a |- gmap = ( l e. _V , p e. _V |-> { a | E. v E. w E. e E. f
     ( v = ( l DVecH p ) /\ w = ( Vldual ` v ) /\ a e. ( f e. ( vbase ` v ) |->
       ( iota g ( g e. ( base ` w ) /\ A. x e. ( vbase ` v )
          ( ( l hmap p ) ` ( f ( vsca ` v ) x ) )
              = ( g ( vsca ` w ) ( ( l hmap l ) ` x ) ) ) ) ) ) } ) $.

    $( Define Hilbert space constructed from Hilbert lattice.  Def. 8.6.53,
       p. 248. $)
    df-hltohil $a |- HLtoHil = ( l e. _V , p e. _V |->
       ( ( l DVecH p ) u.
         { <. 7 , ( l gmap p ) >. ,
           <. 8 , ( a e. ( vbase ` ( l DVecH p ) ) ,
  b e. ( vbase ` ( l DVecH p ) ) |-> ( ( ( l hmap p ) ` b ) ` a ) ) >. } ) ) $.
  $}

