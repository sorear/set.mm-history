$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
       Linear, continuous, bounded, Hermitian, unitary operators and norms
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d t u v w x y z $.
    $( Define the norm of a Hilbert space operator. $)
    df-nmop $a |- normop = { <. t , y >. | ( t : ~H --> ~H /\ y = sup (
       { x | E. z e. ~H ( ( normh ` z ) <_ 1 /\ x = ( normh ` ( t ` z ) ) ) } ,
              RR* , < ) ) } $.

    $( Define the set of continuous operators on Hilbert space.  For every
       "epsilon" ( ` y ` ) there is an "delta" ( ` z ` ) such that... $)
    df-cnop $a |- ConOp = { t | ( t : ~H --> ~H /\ A. x e. ~H A. y e. RR (
      0 < y -> E. z e. RR ( 0 < z /\ A. w e. ~H ( ( normh ` ( w -h x ) ) < z ->
      ( normh ` ( ( t ` w ) -h ( t ` x ) ) ) < y ) ) ) ) } $.

    $( Define the set of linear operators on Hilbert space.  (See ~ df-hosum
       for definition of operator.) $)
    df-lnop $a |- LinOp = { t | ( t : ~H --> ~H /\
           A. x e. CC A. y e. ~H A. z e. ~H
       ( t ` ( ( x .h y ) +h z ) ) = ( ( x .h ( t ` y ) ) +h ( t ` z ) ) ) } $.

    $( Define the set of bounded linear Hilbert space operators.  (See
       ~ df-hosum for definition of operator.) $)
    df-bdop $a |- BndLinOp = ( LinOp i^i { t | ( t : ~H --> ~H /\
                   ( normop ` t ) < +oo ) } ) $.

    $( Define the set of unitary operators on Hilbert space. $)
    df-unop $a |- UniOp = { t | ( t : ~H -onto-> ~H /\
         A. x e. ~H A. y e. ~H ( ( t ` x ) .ih ( t ` y ) ) = ( x .ih y ) ) } $.

    $( Define the set of Hermitian operators on Hilbert space.  Some books call
       these "symmetric operators" and others call them "self-adjoint
       operators," sometimes with slightly different technical meanings. $)
    df-hmop $a |- HrmOp = { t | ( t : ~H --> ~H /\ A. x e. ~H A. y e. ~H
                   ( x .ih ( t ` y ) ) = ( ( t ` x ) .ih y ) ) } $.

