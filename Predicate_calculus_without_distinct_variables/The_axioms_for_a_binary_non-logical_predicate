$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        The axioms for a binary non-logical predicate
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

$(
   Introduce a binary non-logical predicate symbol.  We will use it
   for the membership predicate of set theory, but this is irrelevant at this
   point:  these axioms apply to any arbitrary binary predicate symbol.  The
   term 'non-logical' means that the predicate is presumed to have additional
   properties beyond the realm of predicate calculus.  The term 'binary' means
   that the predicate has two arguments.
$)

  $( Declare the membership predicate symbol. $)
  $c e. $. $( Stylized epsilon $)

  $( --- Start of patch to prevent connective overloading $)
  ${
    $v A $.
    $v B $.
    wcel.cA $f class A $.
    wcel.cB $f class B $.
    $( (The purpose of introducing ` wff A e. B ` here is to allow us to
       express i.e. "prove" the ~ wel of predicate calculus in terms of the
       ~ wceq of set theory, so that we don't "overload" the ` e. ` connective
       with two syntax definitions.  This is done to prevent ambiguity that
       causes problems in some Metamath parsers.  The class variables ` A ` and
       ` B ` are introduced temporarily for the purpose of this definition but
       otherwise not used in predicate calculus.  See ~ df-clab for more
       information on the set theory usage of ~ wcel .)

       Extend wff definition to include the membership connective between
       classes. $)
    wcel $a wff A e. B $.
  $}

  $( (Instead of introducing ~ wel as an axiomatic statement, as was done
     in an older version of this database, we introduce it by "proving" a
     special case of set theory's more general ~ wcel .  This lets us avoid
     overloading the ` e. ` connective, thus preventing ambiguity that causes
     problems in certain Metamath parsers.  However, logically ~ wel is
     considered to be a primitive syntax, even though here it is artificially
     "derived" from ~ wcel .  Note: To see the proof steps of this syntax
     proof, type "show proof wel /all" in the Metamath program.)

     Extend wff definition to include atomic formulas with the epsilon
     (membership) predicate.  This is read " ` x ` is an element of ` y ` ,"
     " ` x ` is a member of ` y ` ," " ` x ` belongs to ` y ` ," or " ` y `
     contains ` x ` ."   Note:  The phrase " ` y ` includes ` x ` " means
     " ` x ` is a subset of ` y ` ;" to use it also for ` x e. y ` , as some
     authors occasionally do, is poor form and causes confusion, according to
     George Boolos (1992 lecture at MIT). $)
  wel $p wff x e. y $=
    ( cv wcel ) ACBCD $.
    $( [24-Jan-2006] $)
  $( --- End of patch to prevent connective overloading $)

  $( --- Start of old code before overloading prevention patch. $)
  $(
  @( Extend wff definition to include atomic formulas with the epsilon
     (membership) predicate.  This is read " ` x ` is an element of ` y ` ,"
     " ` x ` is a member of ` y ` ," " ` x ` belongs to ` y ` ," or " ` y `
     contains ` x ` ."   Note:  The phrase " ` y ` includes ` x ` " means
     " ` x ` is a subset of ` y ` "; to use it also for ` x e. y ` (as some
     authors occasionally do) is poor form and causes confusion.

     After we introduce ~ cv and ~ wcel in set theory, this syntax construction
     becomes redundant, since it can be derived with the proof
     "vx cv vy cv wcel". @)
  wel @a wff x e. y @.
  $)
  $( --- End of old code before overloading prevention patch. $)

  $( Axiom of Equality.  One of the equality and substitution axioms for a
     non-logical predicate in our predicate calculus with equality.  It
     substitutes equal variables into the left-hand side of the ` e. ` binary
     predicate.  Axiom scheme C12' in [Megill] p. 448  (p. 16 of the preprint).
     It is a special case of Axiom B8 (p. 75) of system S2 of [Tarski] p. 77.
     "Non-logical" means that the predicate is not a primitive of predicate
     calculus proper but instead is an extension to it.  "Binary" means that
     the predicate has two arguments. $)
  ax-13 $a |- ( x = y -> ( x e. z -> y e. z ) ) $.

  $( Axiom of Equality.  One of the equality and substitution axioms for a
     non-logical predicate in our predicate calculus with equality.  It
     substitutes equal variables into the right-hand side of the ` e. ` binary
     predicate.  Axiom scheme C13' in [Megill] p. 448  (p. 16 of the preprint).
     It is a special case of Axiom B8 (p. 75) of system S2 of [Tarski]
     p. 77. $)
  ax-14 $a |- ( x = y -> ( z e. x -> z e. y ) ) $.

  $( Axiom of Quantifier Introduction.  One of the equality and substitution
     axioms for a non-logical predicate in our predicate calculus with
     equality.  Axiom scheme C14' in [Megill] p. 448 (p. 16 of the preprint).
     It is redundant if we include ~ ax-17 ; see theorem ~ ax15 .  Alternately,
     ~ ax-17 becomes unnecessary in principle with this axiom, but we lose the
     more powerful metalogic afforded by ~ ax-17 . We retain ~ ax-15 here to
     provide completeness for systems with the simpler metalogic that results
     from omitting ~ ax-17 , which might be easier to study for some
     theoretical purposes.  $)
  ax-15 $a |- ( -. A. z z = x -> ( -. A. z z = y ->
              ( x e. y -> A. z x e. y ) ) ) $.

  $( A variant of ~ ax-9 .  Axiom scheme C10' in [Megill] p. 448 (p. 16 of the
     preprint).  Theorem ~ ax9a shows that ~ ax-9 and ~ ax9 are equivalent in
     the presence of the others. $)
  ax9 $p |- ( A. x ( x = y -> A. x ph ) -> ph ) $=
    ( weq wal wi wex wn ax-9 df-ex mpbir 19.22 mpi a6e syl ) BCDZABEZFBEZQBGZAR
    PBGZSTPHBEHBCIPBJKPQBLMABNO $.
    $( [5-Aug-1993] $)

  $( This theorem is a re-derivation of ~ ax-9 from ~ ax9 . This shows that
     ~ ax-9 and ~ ax9 are interchangeable in the presence of the other
     axioms.  Lemma L18 in [Megill] p. 446 (p. 14 of the preprint).  Use it
     instead of ~ ax-9 so we interchange ~ ax-9 and ~ ax9 as our axiom.  $)
  ax9a $p |- -. A. x -. x = y $=
    ( weq wn wal wi ax9 modal-b mpg ) ABCZJDAEDZAEFKAKABGJAHI $.
    $( [5-Aug-1993] $)

  $( At least one individual exists.  This is not a theorem of free logic,
     which is sound in empty domains; for such a logic, we would add this
     theorem as an axiom of set theory (Axiom 0 of [Kunen] p. 10). $)
  a9e $p |- E. x x = y $=
    ( weq wex wn wal ax9a df-ex mpbir ) ABCZADJEAFEABGJAHI $.
    $( [5-Aug-1993] $)

  $( Identity law for equality (reflexivity).  Lemma 6 of [Tarski] p. 68.
     This is often an axiom of equality in textbook systems, but we don't need
     it as an axiom since it can be proved from our other axioms (although
     the proof, as you can see below, is not as obvious as you might think).
     This proof uses only axioms without distinct variable conditions and thus
     requires no dummy variables.  A simpler proof, similar to Tarki's, is
     possible if we make use of ~ ax-17 ; see the proof of ~ equid1 .  $)
  equid $p |- x = x $=
    ( weq wal wn wi ax-12 pm2.43i 19.20i ax9 syl ax-6 pm2.61i ) AABZACZDZACZMPM
    NEZACMOQAOQAAAFGHMAAIJMAKL $.
    $( [5-Aug-1993] $)

  $( One of the two equality axioms of standard predicate calculus, called
     reflexivity of equality.  (The other one is ~ stdpc7 .)  Axiom 6 of
     [Mendelson] p. 95.  Mendelson doesn't say why he prepended the redundant
     quantifier, but it was probably to be compatible with free logic (which is
     valid in the empty domain). $)
  stdpc6 $p |- A. x x = x $=
    ( weq equid ax-gen ) AABAACD $.
    $( [16-Feb-2005] $) $( [16-Feb-2005] $)

  $( Commutative law for equality.  Lemma 7 of [Tarski] p. 69. $)
  equcomi $p |- ( x = y -> y = x ) $=
    ( weq equid ax-8 mpi ) ABCAACBACADABAEF $.
    $( [5-Aug-1993] $)

  $( Commutative law for equality. $)
  equcom $p |- ( x = y <-> y = x ) $=
    ( weq equcomi impbi ) ABCBACABDBADE $.
    $( [20-Aug-1993] $)

  ${
    equcoms.1 $e |- ( x = y -> ph ) $.
    $( An inference commuting equality in antecedent.  Used to eliminate the
       need for a syllogism. $)
    equcoms $p |- ( y = x -> ph ) $=
      ( weq equcomi syl ) CBEBCEACBFDG $.
      $( [5-Aug-1993] $)
  $}

  $( A transitive law for equality. $)
  equtr $p |- ( x = y -> ( y = z -> x = z ) ) $=
    ( weq wi ax-8 equcoms ) BCDACDEBABACFG $.
    $( [23-Aug-1993] $)

  $( A transitive law for equality.  Lemma L17 in [Megill] p. 446
     (p. 14 of the preprint). $)
  equtrr $p |- ( x = y -> ( z = x -> z = y ) ) $=
    ( weq equtr com12 ) CADABDCBDCABEF $.
    $( [23-Aug-1993] $)

  $( A transitive law for equality. $)
  equtr2 $p |- ( ( x = z /\ y = z ) -> x = y ) $=
    ( weq equtr equcomi syl5 imp ) ACDZBCDZABDZICBDKJACBEBCFGH $.
    $( [12-Aug-1993] $)

  $( An equivalence law for equality. $)
  equequ1 $p |- ( x = y -> ( x = z <-> y = z ) ) $=
    ( weq ax-8 equtr impbid ) ABDACDBCDABCEABCFG $.
    $( [5-Aug-1993] $)

  $( An equivalence law for equality. $)
  equequ2 $p |- ( x = y -> ( z = x <-> z = y ) ) $=
    ( weq equtrr wi equcoms impbid ) ABDCADZCBDZABCEJIFBABACEGH $.
    $( [5-Aug-1993] $)

  $( An identity law for the non-logical predicate. $)
  elequ1 $p |- ( x = y -> ( x e. z <-> y e. z ) ) $=
    ( weq wel ax-13 wi equcoms impbid ) ABDACEZBCEZABCFKJGBABACFHI $.
    $( [5-Aug-1993] $)

  $( An identity law for the non-logical predicate. $)
  elequ2 $p |- ( x = y -> ( z e. x <-> z e. y ) ) $=
    ( weq wel ax-14 wi equcoms impbid ) ABDCAEZCBEZABCFKJGBABACFHI $.
    $( [5-Aug-1993] $)

  $( Commutation law for identical variable specifiers.  The antecedent and
     consequent are true when ` x ` and ` y ` are substituted with the same
     variable. $)
  alequcom $p |- ( A. x x = y -> A. y y = x ) $=
    ( weq wal ax-10 pm2.43i equcomi 19.20i syl ) ABCZADZJBDZBACZBDKLJABEFJMBABG
    HI $.
    $( [5-Aug-1993] $)

  ${
    alequcoms.1 $e |- ( A. x x = y -> ph ) $.
    $( A commutation rule for identical variable specifiers. $)
    alequcoms $p |- ( A. y y = x -> ph ) $=
      ( weq wal alequcom syl ) CBECFBCEBFACBGDH $.
      $( [5-Aug-1993] $)
  $}

  ${
    nalequcoms.1 $e |- ( -. A. x x = y -> ph ) $.
    $( A commutation rule for distinct variable specifiers. $)
    nalequcoms $p |- ( -. A. y y = x -> ph ) $=
      ( weq wal alequcom nsyl4 con1i ) ACBECFZBCEBFJABCGDHI $.
      $( [2-Jan-2002] $)
  $}

  $( All variables are effectively bound in an identical variable specifier. $)
  hbae $p |- ( A. x x = y -> A. z A. x x = y ) $=
    ( weq wal wi wn ax-12 ax-4 syl7 ax-10 alequcoms pm2.43i syl5 pm2.61ii a5i
    ax-7 syl ) ABDZAEZSCEZAETCESUAACADCEZCBDCEZTUAFZUBGUCGSUATABCHSAIJUDACSACKL
    UDBCBCDBESBEZUATSBCKTUESABKMNLOPSACQR $.
    $( [5-Aug-1993] $)

  ${
    hbalequs.1 $e |- ( A. z A. x x = y -> ph ) $.
    $( Rule that applies ~ hbae to antecedent. $)
    hbaes $p |- ( A. x x = y -> ph ) $=
      ( weq wal hbae syl ) BCFBGZJDGABCDHEI $.
      $( [5-Aug-1993] $)
  $}

  $( All variables are effectively bound in a distinct variable specifier.
     Lemma L19 in [Megill] p. 446 (p. 14 of the preprint). $)
  hbnae $p |- ( -. A. x x = y -> A. z -. A. x x = y ) $=
    ( weq wal hbae hbne ) ABDAECABCFG $.
    $( [5-Aug-1993] $)

  ${
    hbnalequs.1 $e |- ( A. z -. A. x x = y -> ph ) $.
    $( Rule that applies ~ hbnae to antecedent. $)
    hbnaes $p |- ( -. A. x x = y -> ph ) $=
      ( weq wal wn hbnae syl ) BCFBGHZKDGABCDIEJ $.
      $( [5-Aug-1993] $)
  $}

  $( Lemma used in proofs of substitution properties. $)
  equs3 $p |- ( E. x ( x = y /\ ph ) <-> -. A. x ( x = y -> -. ph ) ) $=
    ( weq wn wi wal wa wex alinexa con2bii ) BCDZAEFBGLAHBILABJK $.
    $( [5-Aug-1993] $)

  $( Lemma used in proofs of substitution properties. $)
  equs4 $p |- ( A. x ( x = y -> ph ) -> E. x ( x = y /\ ph ) ) $=
    ( weq wi wal wn wa wex pm3.27 ax-4 imp jc nsyl ex hbn1 syl6 a5i ax9 syl
    equs3 sylibr ) BCDZAEZBFZUCAGEZBFZGZUCAHBIUEUCUHBFZEZBFUHUDUJBUEUCUHUIUEUCU
    HUEUCHZUFUGUKUCAUEUCJUEUCAUDBKLMUFBKNOUFBPQRUHBCSTABCUAUB $.
    $( [5-Aug-1993] $)

  ${
    equsal.1 $e |- ( ps -> A. x ps ) $.
    equsal.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( A useful equivalence related to substitution. $)
    equsal $p |- ( A. x ( x = y -> ph ) <-> ps ) $=
      ( weq wi wal 19.3r syl6bb pm5.74i albii ax-1 a5i syl ax9 impbi bitr4 ) CD
      GZAHZCITBCIZHZCIZBUAUCCTAUBTABUBFBCEJKLMBUDBUBUDEBUCCUBTNOPBCDQRS $.
      $( [5-Aug-1993] $)
  $}

  ${
    equsex.1 $e |- ( ps -> A. x ps ) $.
    equsex.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( A useful equivalence related to substitution. $)
    equsex $p |- ( E. x ( x = y /\ ph ) <-> ps ) $=
      ( weq wn wi wex wal wa exnal df-an exbii hbne negbid equsal con2bii
      3bitr4 ) CDGZAHZIZHZCJUCCKZHUAALZCJBUCCMUFUDCUAANOUEBUBBHCDBCEPUAABFQRST
      $.
      $( [5-Aug-1993] $)
  $}

  ${
    dvelimf2.1 $e |- ( ph -> A. x ph ) $.
    dvelimf2.2 $e |- ( ps -> A. z ps ) $.
    dvelimf2.3 $e |- ( z = y -> ( ph <-> ps ) ) $.
    $( Proof of ~ dvelimf without using ~ ax-11 . $)
    dvelimf2 $p |- ( -. A. x x = y -> ( ps -> A. x ps ) ) $=
      ( weq wal wn wi ax-10 alequcoms hba1 syl5 a1d wa hbnae hban ax-12 imp
      a1i hbimd hbald ex pm2.61i equsal albii 3imtr3g ) CDICJKZEDIZALZEJZUNCJZB
      BCJCEICJZUKUNUOLZLUPUQUKUPUNEJZUOUNURUOLECUNECMNUMEOPQUPKZUKUQUSUKRZUMCEU
      SUKECEESCDESTUTULACUSUKCCECSCDCSTUSUKULULCJLEDCUAUBAACJLUTFUCUDUEUFUGABED
      GHUHZUNBCVAUIUJ $.
      $( [12-Nov-2002] $)
  $}

  ${
    dral1.1 $e |- ( A. x x = y -> ( ph <-> ps ) ) $.
    $( Formula-building lemma for use with the Distinctor Reduction Theorem.
       Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint). $)
    dral1 $p |- ( A. x x = y -> ( A. x ph <-> A. y ps ) ) $=
      ( weq wal wi biimpd 19.20ii hbaes ax-10 syld biimprd alequcoms impbid )
      CDFCGZACGZBDGZQRBCGZSRTHCDCQABCQABEIJKBCDLMQSADGZRSUAHCDDQBADQABENJKUARHD
      CADCLOMP $.
      $( [24-Nov-1994] $)
  $}

  ${
    dral2.1 $e |- ( A. x x = y -> ( ph <-> ps ) ) $.
    $( Formula-building lemma for use with the Distinctor Reduction Theorem.
       Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint). $)
    dral2 $p |- ( A. x x = y -> ( A. z ph <-> A. z ps ) ) $=
      ( weq wal hbae albid ) CDGCHABECDEIFJ $.
      $( [21-Mar-2005] $) $( [27-Feb-2005] $)
  $}

  ${
    drex1.1 $e |- ( A. x x = y -> ( ph <-> ps ) ) $.
    $( Formula-building lemma for use with the Distinctor Reduction Theorem.
       Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint). $)
    drex1 $p |- ( A. x x = y -> ( E. x ph <-> E. y ps ) ) $=
      ( weq wal wn wex negbid dral1 df-ex 3bitr4g ) CDFCGZAHZCGZHBHZDGZHACIBDIN
      PROQCDNABEJKJACLBDLM $.
      $( [5-Apr-2005] $) $( [27-Feb-2005] $)
  $}

  ${
    drex2.1 $e |- ( A. x x = y -> ( ph <-> ps ) ) $.
    $( Formula-building lemma for use with the Distinctor Reduction Theorem.
       Part of Theorem 9.4 of [Megill] p. 448 (p. 16 of preprint). $)
    drex2 $p |- ( A. x x = y -> ( E. z ph <-> E. z ps ) ) $=
      ( weq wal hbae exbid ) CDGCHABECDEIFJ $.
      $( [16-May-2005] $) $( [27-Feb-2005] $)
  $}

  ${
    a4a.1 $e |- ( ps -> A. x ps ) $.
    a4a.2 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Specialization with implicit substitution.  Compare Lemma 14 of [Tarski]
       p. 70. $)
    a4a $p |- ( A. x ph -> ps ) $=
      ( wal weq wi syl6com 19.20i ax9 syl ) ACGCDHZBCGZIZCGBAPCNABOFEJKBCDLM $.
      $( [5-Aug-1993] $)
  $}

  ${
    a4c.1 $e |- ( ph -> A. x ph ) $.
    a4c.2 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Existential introduction with implicit substitution.  Compare Lemma 14
       of [Tarski] p. 70. $)
    a4c $p |- ( ph -> E. x ps ) $=
      ( wn wal wex hbne weq con3d a4a con2i df-ex sylibr ) ABGZCHZGBCIRAQAGCDAC
      EJCDKABFLMNBCOP $.
      $( [7-Aug-1994] $)
  $}

  ${
    a4c1.1 $e |- ( ch -> A. x ch ) $.
    a4c1.2 $e |- ( ch -> ( ph -> A. x ph ) ) $.
    a4c1.3 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( A more general version of ~ a4c . $)
    a4c1 $p |- ( ch -> ( ph -> E. x ps ) ) $=
      ( wex wa wal adantr imp jca 19.26 sylibr weq adantld a4c ex ) CABDICAJZBD
      EUACDKZADKZJUADKUAUBUCCUBAFLCAUCGMNCADOPDEQABCHRST $.
      $( [5-Aug-1993] $)
  $}

  ${
    cbv1.1 $e |- ( ph -> ( ps -> A. y ps ) ) $.
    cbv1.2 $e |- ( ph -> ( ch -> A. x ch ) ) $.
    cbv1.3 $e |- ( ph -> ( x = y -> ( ps -> ch ) ) ) $.
    $( Rule used to change bound variables with implicit substitution. $)
    cbv1 $p |- ( A. x A. y ph -> ( A. x ps -> A. y ch ) ) $=
      ( wal wi a4s 19.20ii ax-7 syl6 weq com23 syl6d ax9 a7s syld ) AEIZDIZBDIZ
      UCEIZCEIZUBUCBEIZDIUDUABUFDABUFJEFKLBDEMNAUDUEJEDADIZUCCEUGUCDEOZCDIZJZDI
      CABUJDABUHCUIAUHBCHPGQLCDERNLST $.
      $( [5-Aug-1993] $)
  $}


  ${
    cbv2.1 $e |- ( ph -> ( ps -> A. y ps ) ) $.
    cbv2.2 $e |- ( ph -> ( ch -> A. x ch ) ) $.
    cbv2.3 $e |- ( ph -> ( x = y -> ( ps <-> ch ) ) ) $.
    $( Rule used to change bound variables with implicit substitution. $)
    cbv2 $p |- ( A. x A. y ph -> ( A. x ps <-> A. y ch ) ) $=
      ( wal weq wb wi bi1 syl6 cbv1 bi2 equcomi syl5 a7s impbid ) AEIDIBDIZCEIZ
      ABCDEFGADEJZBCKZBCLHBCMNOAUBUALEDACBEDGFAUCCBLZEDJAUCUDUEHBCPNEDQROST $.
      $( [5-Aug-1993] $)
  $}

  ${
    cbv3.1 $e |- ( ph -> A. y ph ) $.
    cbv3.2 $e |- ( ps -> A. x ps ) $.
    cbv3.3 $e |- ( x = y -> ( ph -> ps ) ) $.
    $( Rule used to change bound variables with implicit substitution. $)
    cbv3 $p |- ( A. x ph -> A. y ps ) $=
      ( wi wal imim2i a1i weq cbv1 id ax-gen mpg ) AAHZDIACIBDIHCQABCDAADIAEJBB
      CIHQFKCDLABHHQGKMQDANOP $.
      $( [5-Aug-1993] $)
  $}


  ${
    cbval.1 $e |- ( ph -> A. y ph ) $.
    cbval.2 $e |- ( ps -> A. x ps ) $.
    cbval.3 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables with implicit substitution. $)
    cbval $p |- ( A. x ph <-> A. y ps ) $=
      ( wi wal wb imim2i a1i weq cbv2 id ax-gen mpg ) AAHZDIACIBDIJCRABCDAADIAE
      KBBCIHRFLCDMABJHRGLNRDAOPQ $.
      $( [5-Aug-1993] $)
  $}

  ${
    cbvex.1 $e |- ( ph -> A. y ph ) $.
    cbvex.2 $e |- ( ps -> A. x ps ) $.
    cbvex.3 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables with implicit substitution. $)
    cbvex $p |- ( E. x ph <-> E. y ps ) $=
      ( wn wal wex hbne weq negbid cbval negbii df-ex 3bitr4 ) AHZCIZHBHZDIZHAC
      JBDJSUARTCDADEKBCFKCDLABGMNOACPBDPQ $.
      $( [5-Aug-1993] $)
  $}

  ${
    chv2.1 $e |- ( ps -> A. x ps ) $.
    chv2.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    chv2.3 $e |- ph $.
    $( Implicit substitution of ` y ` for ` x ` into a theorem.  (Contributed
       by Raph Levien, 9-Jul-03.) $)
    chvar $p |- ps $=
      ( weq biimpd a4a mpg ) ABCABCDECDHABFIJGK $.
      $( [29-Jul-2003] $)
  $}

  $( A variable introduction law for equality.  Lemma 15 of [Monk2] p. 109,
     however we do not require ` z ` to be distinct from ` x ` and ` y `
     (making the proof longer). $)
  equvini $p |- ( x = y -> E. z ( x = z /\ z = y ) ) $=
    ( weq wal wo wa wex wi a9e equid jctl 19.22i ax-mp hba1 ax-8 a4s anim1d
    19.22d mpi equcomi jctir equtrr anim2d jaoi a1d wn ioran hbnae hban ax-12
    imp anc2li equcoms a4c1 sylbi pm2.61i ) CADZCEZCBDZCEZFZABDZACDZUTGZCHZIZVB
    VFVCUSVFVAUSCCDZUTGZCHZVFUTCHVJCBJUTVICUTVHCKZLMNUSVIVECURCOUSVHVDUTURVHVDI
    CCACPQRSTVAVDVHGZCHZVFURCHVMCAJURVLCURVDVHCAUAVKUBMNVAVLVECUTCOVAVHUTVDUTVH
    UTICCBCUCQUDSTUEUFVBUGUSUGZVAUGZGZVGUSVAUHVCVEVPCAVNVOCCACUICBCUIUJVNVOVCVC
    CEIABCUKULVCVEIACVDVCUTACBPUMUNUOUPUQ $.
    $( [5-Aug-1993] $)

  $( Bound-variable hypothesis builder for ` x = x ` .  This theorem tells us
     that ` x ` is effectively not free in ` x = x ` , even though it is
     technically free according to the traditional definition of free variable.
     (The proof shows that this can be proved without ~ ax-9 , even though the
     theorem ~ equid cannot be.  A shorter proof that uses ~ ax-9 is obtainable
     from ~ equid and ~ hbth .) $)
  hbequid $p |- ( x = x -> A. x x = x ) $=
    ( weq wal wn wi ax-12 pm2.43i a4s hbn1 ax-6 19.21ai a1d pm2.61i ) AABZACZDZ
    ACZNOEZPRAPRAAAFGHQDZONSNAPAINAJKLM $.
    $( [17-Feb-2005] $) $( [27-Dec-2004] $)

