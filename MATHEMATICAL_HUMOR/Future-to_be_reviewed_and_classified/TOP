$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
                 (Future - to be reviewed and classified)
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)

  $c ringLMod $.
  $c RSpan $. $( Ring span function $)
  $c subringAlg $.

  $( Extend class notation with the left module induced by a ring over
     itself. $)
  crglmod $a class ringLMod $.

  $( Ring span function. $)
  crsp $a class RSpan $.

  $( Extend class notation with the subring algebra generator. $)
  csra $a class subringAlg $.

  ${
    $d a w s t $.
    $( Given any subring of a ring, we can construct a left-algebra by
       regarding the elements of the subring as scalars and the ring itself as
       a set of vectors. $)
    df-sra $a |- subringAlg = ( w e. _V |-> ( s e. ~P ( Base ` w ) |->
        ( { <. ( Base ` ndx ) , ( Base ` w ) >. , <. ( +g ` ndx ) ,
            ( +g ` w ) >. , <. ( .r ` ndx ) , ( .r ` w ) >. } u.
          { <. ( Scalar ` ndx ) , ( w |`s s ) >. ,
            <. ( vsca ` ndx ) , ( .r ` w ) >. } ) ) ) $.

    $( Every ring can be viewed as a left module over itself. $)
    df-rgmod $a |- ringLMod = ( w e. _V |->
        ( ( subringAlg ` w ) ` ( Base ` w ) ) ) $.

    $( Define the linear span function in a ring (Ideal generator). $)
    df-rsp $a |- RSpan = ( LSpan o. ringLMod ) $.
  $}

  ${
    $d x m n k $.  $d x m n A $.  $d x m n G $.  $d x m n B $.
    $( Define the composite for the law ` G ` of a finite sequence of elements
       whose values are defined by the expression ` B ` and whose set of
       indices is ` A ` . ` A ` may be empty.  It may be thougt as a product
       (if ` G ` is a multiplication), a sum (if ` G ` is an addition) or
       whatever.  The variable ` k ` is normally a free variable in ` B `
       ( i.e. ` B ` can be thought of as ` B ( k ) ` ).  The definition is
       meaningful when ` A ` is a finite set of sequential integers and ` G `
       is an internal operation.  Our definition corresponds to the first part
       of the definition of ~ df-sum .  The operation ` + ` has been replaced
       by the generic operation ` G ` .  The reference to the concept of limit
       has been removed because one wants to use the product in contexts where
       limits are irrelevant.  I could be still more generic and replace
       ` ( m ... n ) ` by a finite totally ordered set.  I would then get the
       definition given by Bourbaki in the first chapter of the algebra book of
       his treatise ( A I.3 def.4 ).  I don't because the present definition is
       easier to deal with and because there exists an order isomorphism
       between any finite totally ordered set and any finite sets of integers.
       I don't specify anything about ` G ` because nothing is required of
       ` g ` in the definition of ` seq ` .  I hope it will be ok.  Otherwise
       one could add ` G e. Magma ` . $)
    df-prod $a |- prod_ k e. A G B = if ( A = (/) , ( Id ` G ) ,
                  { x | E. m E. n e. ( ZZ>= ` m ) ( A = ( m ... n ) /\
                    x e. ( seq m ( G , ( k e. _V |-> B ) ) ` n ) ) } ) $.
  $}

