$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
                 (Future - to be reviewed and classified)
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)

  $c ringLMod $.
  $c RSpan $. $( Ring span function $)
  $c subringAlg $.

  $( Extend class notation with the left module induced by a ring over
     itself. $)
  crglmod $a class ringLMod $.

  $( Ring span function. $)
  crsp $a class RSpan $.

  $( Extend class notation with the subring algebra generator. $)
  csra $a class subringAlg $.

  ${
    $d a w s t $.
    $( Given any subring of a ring, we can construct a left-algebra by
       regarding the elements of the subring as scalars and the ring itself as
       a set of vectors. $)
    df-sra $a |- subringAlg = ( w e. _V |-> ( s e. ~P ( Base ` w ) |->
        ( { <. ( Base ` ndx ) , ( Base ` w ) >. , <. ( +g ` ndx ) ,
            ( +g ` w ) >. , <. ( .r ` ndx ) , ( .r ` w ) >. } u.
          { <. ( Scalar ` ndx ) , ( w |`s s ) >. ,
            <. ( vsca ` ndx ) , ( .r ` w ) >. } ) ) ) $.

    $( Every ring can be viewed as a left module over itself. $)
    df-rgmod $a |- ringLMod = ( w e. _V |->
        ( ( subringAlg ` w ) ` ( Base ` w ) ) ) $.

    $( Define the linear span function in a ring (Ideal generator). $)
    df-rsp $a |- RSpan = ( LSpan o. ringLMod ) $.
  $}

  $c Idl $.
  $c PrIdl $.
  $c MaxIdl $.

  $( Extend class notation with the class of ideals. $)
  cidl $a class Idl $.

  $( Extend class notation with the class of prime ideals. $)
  cpridl $a class PrIdl $.

  $( Extend class notation with the class of maximal ideals. $)
  cmaxidl $a class MaxIdl $.

  ${
    $d r s i x y z $.
    $( Define the class of (two-sided) ideals of a ring ` R ` .  A subset of
       ` R ` is an ideal if it contains ` 0 ` , is closed under addition, and
       is closed under multiplication on either side by any element of
       ` R ` . $)
    df-idl $a |- Idl = { <. r , s >. | ( r e. RingOps /\ s =
                { i e. ~P ran ( 1st ` r ) | ( ( Id ` ( 1st ` r ) ) e. i /\
                      A. x e. i ( A. y e. i ( x ( 1st ` r ) y ) e. i /\
                    A. z e. ran ( 1st ` r ) ( ( z ( 2nd ` r ) x ) e. i /\
                            ( x ( 2nd ` r ) z ) e. i ) ) ) } ) } $.
  $}

  ${
    $d r s i a b x y $.
    $( Define the class of prime ideals of a ring ` R ` .  A proper ideal ` I `
       of ` R ` is prime if whenever ` A B C_ I ` for ideals ` A ` and ` B ` ,
       either ` A C_ I ` or ` B C_ I ` .  The more familiar definition using
       elements rather than ideals is equivalent provided ` R ` is commutative;
       see ~ ispridl2 and ~ ispridlc . $)
    df-pridl $a |- PrIdl = { <. r , s >. | ( r e. RingOps /\ s =
        { i e. ( Idl ` r ) | ( i =/= ran ( 1st ` r ) /\ A. a e. ( Idl ` r )
          A. b e. ( Idl ` r ) ( A. x e. a A. y e. b ( x ( 2nd ` r ) y ) e. i ->
                                      ( a C_ i \/ b C_ i ) ) ) } ) } $.
  $}

  ${
    $d r s i j $.
    $( Define the class of maximal ideals of a ring ` R ` .  A proper ideal is
       called maximal if it is maximal with respect to inclusion among proper
       ideals. $)
    df-maxidl $a |- MaxIdl = { <. r , s >. | ( r e. RingOps /\ s =
            { i e. ( Idl ` r ) | ( i =/= ran ( 1st ` r ) /\ A. j e. ( Idl ` r )
                      ( i C_ j -> ( j = i \/ j = ran ( 1st ` r ) ) ) ) } ) } $.
  $}

  $c Toset $.

  $( Extend class notation with the class of all tosets. $)
  ctos $a class Toset $.

  ${
    $d f b r x y $.
    $( Define the class of totally ordered sets (tosets). $)
    df-toset $a |- Toset = { f e. Poset | [ ( Base ` f ) / b ]
      [ ( le ` f ) / r ] A. x e. b A. y e. b ( x r y \/ y r x ) } $.
  $}

  ${
    $d b f r x y B $.  $d b f r K $.  $d b f r x y L $.
    istos.b $e |- B = ( Base ` K ) $.
    istos.l $e |- L = ( le ` K ) $.
    $( The predicate "is a toset."  (Contributed by FL, 17-Nov-2014.) $)
    istos $p |- ( K e. Toset <-> ( K e. Poset
               /\ A. x e. B A. y e. B ( x L y \/ y L x ) ) ) $=
      ( vr vb vf cv wbr wral cple cfv wsbc cbs wceq wb wi wo cpo ctos wcel fvex
      cvv fveq2 dfsbcq sbcbidgv mpan2 bitrd wa eqtr breq orbi12d 2ralbidv raleq
      raleqbi1dv sylan9bb ex expcom eqcoms ax-mp syl5com sbc2ie syl6bb df-toset
      syl imp elrab2 ) AKZBKZHKZLZVLVKVMLZUAZBIKZMAVQMZHJKZNOZPZIVSQOZPZVKVLELZ
      VLVKELZUAZBCMZACMZJDUBUCVSDRZWCVRHDNOZPZIDQOZPZWHWIWCWKIWBPZWMWIWBUFUDWCW
      NSVSQUEWIWAWKIWBUFWIVTWJRWAWKSVSDNUGVRHVTWJUHVHUIUJWIWBWLRWNWMSVSDQUGWKIW
      BWLUHVHUKVRWHIHWLWJDQUEDNUEVQWLRZVMWJRZVRWHSZCWLRWOWPWQTZTZFWSWLCWOWLCRZW
      RWOWTULVQCRZWPWQVQWLCUMEWJRWPXAWQTZTZGXCWJEWPWJERZXBWPXDULVMERZXBVMWJEUMX
      EXAWQXEVRWFBVQMZAVQMXAWHXEVPWFABVQVQXEVNWDVOWEVKVLVMEUNVLVKVMEUNUOUPXFWGA
      VQCWFBVQCUQURUSUTVHVAVBVCVDVAVBVCVIVEVFABJHIVGVJ $.
      $( [17-Nov-2014] $)
  $}

  ${
    $d x y B $.  $d x y K $.  $d x y L $.  $d x y S $.
    tosso.b $e |- B = ( Base ` K ) $.
    tosso.l $e |- L = ( le ` K ) $.
    tosso.s $e |- S = ( lt ` K ) $.
    $( Write the totally ordered set structure predicate in terms of the proper
       class strict order predicate. $)
    tosso $p |- ( K e. V ->
      ( K e. Toset <-> ( S Or B /\ ( _I |` B ) C_ L ) ) ) $=
      ( vx vy wcel cv wbr wo wral wa wceq wb pleval2 3expb ctos cpo wor cid wss
      cres istos w3o wpo pospo anbi1d eqcom orbi2i syl6bb 3com23 orbi12d df-3or
      w3a or32 orordir 3bitri syl6bbr 2ralbidva pm5.32i df-so anbi1i an32 bitri
      3bitr4g syl5bb ) CUAKCUBKZILZJLZDMZVMVLDMZNZJAOIAOZPZCEKZABUCZUDAUFDUEZPZ
      IJACDFGUGVSVKVLVMBMZVLVMQZVMVLBMZUHZJAOIAOZPABUIZWAPZWGPZVRWBVSVKWIWGABCD
      EFGHUJUKVKVQWGVKVPWFIJAAVKVLAKZVMAKZPPZVPWCWDNZWEWDNZNZWFWMVNWNVOWOVKWKWL
      VNWNRABCDVLVMFGHSTVKWKWLVOWORZVKWLWKWQVKWLWKURVOWEVMVLQZNWOABCDVMVLFGHSWR
      WDWEVMVLULUMUNUOTUPWFWNWENWCWENWDNWPWCWDWEUQWCWDWEUSWCWEWDUTVAVBVCVDWBWHW
      GPZWAPWJVTWSWAIJABVEVFWHWGWAVGVHVIVJ $.
      $( [8-Feb-2015] $)
  $}

