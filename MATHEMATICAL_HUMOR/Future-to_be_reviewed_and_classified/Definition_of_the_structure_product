$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    Definition of the structure product
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c Xm_ Xs_ ^s $.

  $( The function constructing module products. $)
  cprdm $a class Xm_ $.

  $( The function constructing structure products. $)
  cprs $a class Xs_ $.

  $( The function constructing structure powers. $)
  cpws $a class ^s $.

  ${
    $d s r x v f g $.
    $( Define a module product, which is a structure product with an externally
       specified ring of scalars.  This can be a product of groups, rings,
       modules, or ordered topological fields; any unused components will have
       garbage in them but this usually not relevant for the purpos of
       inheriting the structures present in the factors. $)
    df-prdm $a |- Xm_ = ( s e. _V , r e. _V |->
      [_ X_ x e. dom r ( Base ` ( r ` x ) ) / v ]_
      ( ( { <. ( Base ` ndx ) , v >. ,
        <. ( +g ` ndx ) , ( f e. v , g e. v |-> ( x e. dom r |->
          ( ( f ` x ) ( +g ` ( r ` x ) ) ( g ` x ) ) ) ) >. ,
        <. ( .r ` ndx ) , ( f e. v , g e. v |-> ( x e. dom r |->
          ( ( f ` x ) ( .r ` ( r ` x ) ) ( g ` x ) ) ) ) >. } u.
      { <. ( Scalar ` ndx ) , s >. ,
        <. ( vsca ` ndx ) , ( f e. ( Base ` s ) , g e. v |->
        ( x e. dom r |-> ( f ( vsca ` ( r ` x ) ) ( g ` x ) ) ) ) >. } ) u.
      { <. ( TopOpen ` ndx ) , ( tP ` ( TopOpen o. r ) ) >. ,
        <. ( le ` ndx ) , { <. f , g >. | ( { f , g } C_ v /\
        A. x e. dom r ( f ` x ) ( le ` ( r ` x ) ) ( g ` x ) ) } >. ,
        <. ( dist ` ndx ) , ( f e. v , g e. v |-> sup ( ran ( x e. dom r |->
       ( ( f ` x ) ( dist ` ( r ` x ) ) ( g ` x ) ) ) , RR* , < ) ) >. } ) ) $.

    $( Define a structure product.  This is defined in terms of the module
       product, but the scalar ring is ignored so we can set it to anything
       (here we use the empty set). $)
    df-prd $a |- Xs_ = ( r e. _V |-> ( (/) Xm_ r ) ) $.

    $d r i $.
    $( Define a structure power, which is just a structure product where all
       the factors are the same. $)
    df-pws $a |- ^s = ( r e. _V , i e. _V |->
      ( ( Scalar ` r ) Xm_ ( i X. { r } ) ) ) $.
  $}

