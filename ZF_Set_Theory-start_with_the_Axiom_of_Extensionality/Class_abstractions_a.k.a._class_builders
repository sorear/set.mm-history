$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                   Class abstractions (a.k.a. class builders)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare new constants use in class definition. $)
  $c { $. $( Left brace $)
  $c | $.  $( Vertical bar $)
  $c } $. $( Right brace $)
  $( --- Start of old code before overloading prevention patch. $)
  $(
  @c class @. @( Class variable type @)
  $)
  $( --- End of old code before overloading prevention patch. $)

  $( Declare variable symbols that will be used to represent classes.  Note
     that later on ` R ` , ` S ` , ` F ` and ` G ` denote relations and
     functions, but these letters serve as mnemonics only and in fact behave
     no differently from the variables ` A ` through ` D ` . $)
  $v A $.
  $v B $.
  $v C $.
  $v D $.
  $v P $.
  $v Q $.
  $v R $.
  $v S $.
  $v T $.
  $v U $.

  $( Introduce the class builder or class abstraction notation ("the class of
     sets ` x ` such that ` ph ` is true").  Our class variables ` A ` ,
     ` B ` , etc. range over class builders (implicitly in the case of defined
     class terms such as ~ df-nul ).  Note that a set variable can be expressed
     as a class builder per theorem ~ cvjust , justifying the assignment of set
     variables to class variables via the use of ~ cv . $)
  cab $a class { x | ph } $.

  $( --- Start of old code before overloading prevention patch. $)
  $(
  @( A set variable is a class expression.  The syntax " ` class x ` " can be
     viewed as an abbreviation for " ` class { y | y e. x } ` " (a special case
     of ~ cab ), where ` y ` is distinct from ` x ` .  See the discussion under
     the definition of class in [Jech] p. 4.  Note that ` { y | y e. x } = x `
     by ~ cvjust . @)
  cv @a class x @.
  $)
  $( --- End of old code before overloading prevention patch. $)

  $( Let ` A ` be a class variable. $)
  cA $f class A $.
  $( Let ` B ` be a class variable. $)
  cB $f class B $.
  $( Let ` C ` be a class variable. $)
  cC $f class C $.
  $( Let ` D ` be a class variable. $)
  cD $f class D $.
  $( Let ` P ` be a class variable. $)
  cP $f class P $.
  $( Let ` Q ` be a class variable. $)
  cQ $f class Q $.
  $( Let ` R ` be a class variable. $)
  cR $f class R $.
  $( Let ` S ` be a class variable. $)
  cS $f class S $.
  $( Let ` T ` be a class variable. $)
  cT $f class T $.
  $( Let ` U ` be a class variable. $)
  cU $f class U $.

  $( --- Start of old code before overloading prevention patch. $)
  $(
  @( Extend wff definition to include class equality. @)
  wceq @a wff A = B @.
  $)
  $( --- End of old code before overloading prevention patch. $)

  $( --- Start of old code before overloading prevention patch. $)
  $(
  @( Extend wff definition to include the membership connective between
     classes. @)
  wcel @a wff A e. B @.
  $)
  $( --- End of old code before overloading prevention patch. $)

  $( Define class abstraction notation (so-called by Quine), also called a
     "class builder" in the literature. ` x ` and ` y ` need not be distinct.
     Definition 2.1 of [Quine] p. 16.  Typically, ` ph ` will have ` y ` as a
     free variable, and " ` { y | ph } ` " is read "the class of all sets ` y `
     such that ` ph ( y ) ` is true."  We do not define ` { y | ph } ` in
     isolation but only as part of an expression that extends or "overloads"
     the ` e. ` relationship.

     This is our first use of the ` e. ` symbol to connect classes instead of
     sets.  The syntax definition ~ wcel , which extends or "overloads" the
     ~ wel definition connecting set variables, requires that both sides of
     ` e. ` be a class.  In ~ df-cleq and ~ df-clel , we introduce a new kind
     of variable (class variable) that can substituted with expressions such as
     ` { y | ph } ` .  In the present definition, the ` x ` on the left-hand
     side is a set variable.  Syntax definition ~ cv allows us to substitute a
     set variable ` x ` for a class variable: all sets are classes by ~ cvjust
     (but not necessarily vice-versa).  For a full description of how classes
     are introduced and how to recover the primitive language, see the
     discussion in Quine (and under ~ abeq2 for a quick overview).

     Because class variables can be substituted with compound expressions and
     set variables cannot, it is often useful to convert a theorem containing a
     free set variable to a more general version with a class variable.  This
     is done with theorems such as ~ vtoclg which is used, for example, to
     convert ~ elirrv to ~ elirr . $)
  df-clab $a |- ( x e. { y | ph } <-> [ x / y ] ph ) $.

  $( Simplification of class abstraction notation when the free and bound
     variables are identical. $)
  abid $p |- ( x e. { x | ph } <-> ph ) $=
    ( cv cab wcel wsbc df-clab sbid bitri ) BCZABDEABJFAABBGABHI $.
    $( [5-Aug-1993] $)

  ${
    $d x y $.
    $( Bound-variable hypothesis builder for a class abstraction. $)
    hbab1 $p |- ( y e. { x | ph } -> A. x y e. { x | ph } ) $=
      ( cv wsbc wal cab wcel hbs1 df-clab albii 3imtr4i ) ABCDZEZNBFMABGHZOBFAB
      CIACBJZONBPKL $.
      $( [5-Aug-1993] $)
  $}

  ${
    $d x z $.
    hbab.1 $e |- ( ph -> A. x ph ) $.
    $( Bound-variable hypothesis builder for a class abstraction. $)
    hbab $p |- ( z e. { y | ph } -> A. x z e. { y | ph } ) $=
      ( cv wsbc wal cab wcel wceq wi ax-16 hbsb4 pm2.61i df-clab albii 3imtr4i
      ) ACDFZGZTBHZSACIJZUBBHBFSKBHTUALTBDMACDBENOADCPZUBTBUCQR $.
      $( [1-Mar-1995] $)
  $}

  ${
    $d x z $.
    hbabd.1 $e |- ( ph -> A. x A. y ph ) $.
    hbabd.2 $e |- ( ph -> ( ps -> A. x ps ) ) $.
    $( Deduction form of bound-variable hypothesis builder ~ hbab . $)
    hbabd $p |- ( ph -> ( z e. { y | ps } -> A. x z e. { y | ps } ) ) $=
      ( cv wsbc wal cab wcel wceq wi wn ax-7 syl 19.20i2 hbsb4t 3syl ax-16
      pm2.61d2 df-clab albii 3imtr4g ) ABDEHZIZUGCJZUFBDKLZUICJACHUFMCJZUGUHNZA
      ACJDJZBBCJNZCJDJUJOUKNAADJCJULFACDPQAUMDCGRBDECSTUGCEUAUBBEDUCZUIUGCUNUDU
      E $.
      $( [16-Nov-2005] $) $( [10-Nov-2005] $)
  $}

  ${
    $d x A $.  $d x B $.  $d x y z $.
    df-cleq.1 $e |- ( A. x ( x e. y <-> x e. z ) -> y = z ) $.
    $( Define the equality connective between classes.  Definition 2.7 of
       [Quine] p. 18.  Also Definition 4.5 of [TakeutiZaring] p. 13; Chapter 4
       provides its justification and methods for eliminating it.  Note that
       its elimination will not necessarily result in a single wff in the
       original language but possibly a "scheme" of wffs.

       This is an example of a somewhat "risky" definition, meaning that it has
       a more complex than usual soundness justification (outside of Metamath),
       because it "overloads" or reuses the existing equality symbol rather
       than introducing a new symbol.  This allows us to make statements that
       may not hold for the original symbol.  For example, it permits us to
       deduce ` y = z <-> A. x ( x e. y <-> x e. z ) ` , which is not a theorem
       of logic but rather presupposes the Axiom of Extensionality (see theorem
       ~ axext4 ).  We therefore include this axiom as a hypothesis, so that
       the use of Extensionality is properly indicated.

       We could avoid this complication by introducing a new symbol, say =_2,
       in place of ` = ` .  This would also have the advantage of making
       elimination of the definition straightforward, so that we could
       eliminate Extensionality as a hypothesis.  We would then also have the
       advantage of being able to identify in various proofs exactly where
       Extensionality truly comes into play rather than just being an artifact
       of a definition..  One of our theorems would then be ` x ` =_2
       ` y <-> x = y ` by invoking Extensionality.

       However, to conform to literature usage, we retain this overloaded
       definition.  This also makes some proofs shorter and probably easier to
       read, without the constant switching between two kinds of equality.

       See also comments under ~ df-clab , ~ df-clel , and ~ abeq2 . $)
    df-cleq $a |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $.
  $}

  ${
    $d x A $.  $d x B $.  $d x y z $.
    $( The same as ~ df-cleq with the hypothesis removed using the Axiom of
       Extensionality ~ ax-ext . $)
    dfcleq $p |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $=
      ( vy vz ax-ext df-cleq ) ADEBCDEAFG $.
      $( [15-Sep-1993] $)
  $}

  ${
    $d x y z $.
    $( Every set is a class.  Proposition 4.9 of [TakeutiZaring] p. 13.  This
       theorem shows that a set variable can be expressed as a class
       abstraction.  This provides a motivation for the class syntax
       construction ~ cv , which allows us to substitute a set variable for a
       class variable.  See also ~ cab and ~ df-clab .  Note that this is not a
       rigorous justification, because ~ cv is used as part of the proof of
       this theorem, but a careful argument can be made outside of the
       formalism of Metamath, for example as is done in Chapter 4 of Takeuti
       and Zaring.  See also the discussion under the definition of class in
       [Jech] p. 4 showing that "Every set can be considered to be a class." $)
    cvjust $p |- x = { y | y e. x } $=
      ( vz cv wcel cab wceq wb dfcleq wsbc df-clab elsb3 bitr2i mpgbir ) ADZBDO
      EZBFZGCDZOEZRQEZHCCOQITPBRJSPCBKCBALMN $.
      $( [7-Nov-2006] $) $( [7-Nov-2006] $)
  $}

  ${
    $d x A $.  $d x B $.
    $( Define the membership connective between classes.  Theorem 6.3 of
       [Quine] p. 41, or Proposition 4.6 of [TakeutiZaring] p. 13, which we
       adopt as a definition.  See these references for its metalogical
       justification.  Note that like ~ df-cleq it extends or "overloads" the
       use of the existing membership symbol, but unlike ~ df-cleq it does not
       strengthen the set of valid wffs of logic when the class variables are
       replaced with set variables (see ~ cleljust ), so we don't include any
       set theory axiom as a hypothesis.  See also comments about the syntax
       under ~ df-clab . $)
    df-clel $a |- ( A e. B <-> E. x ( x = A /\ x e. B ) ) $.
  $}

  ${
    $d x A $.  $d x B $.
    eqriv.1 $e |- ( x e. A <-> x e. B ) $.
    $( Infer equality of classes from equivalence of membership. $)
    eqriv $p |- A = B $=
      ( wceq cv wcel wb dfcleq mpgbir ) BCEAFZBGKCGHAABCIDJ $.
      $( [5-Aug-1993] $)
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    eqrdv.1 $e |- ( ph -> ( x e. A <-> x e. B ) ) $.
    $( Deduce equality of classes from equivalence of membership. $)
    eqrdv $p |- ( ph -> A = B ) $=
      ( cv wcel wb wal wceq 19.21aiv dfcleq sylibr ) ABFZCGNDGHZBICDJAOBEKBCDLM
      $.
      $( [17-Mar-1996] $)
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    eqrdav.1 $e |- ( ( ph /\ x e. A ) -> x e. C ) $.
    eqrdav.2 $e |- ( ( ph /\ x e. B ) -> x e. C ) $.
    eqrdav.3 $e |- ( ( ph /\ x e. C ) -> ( x e. A <-> x e. B ) ) $.
    $( MAY BE REVISED - delete this if it is unused / not useful $)
    $( Deduce equality of classes from an equivalence of membership that
       depends on the membership variable. $)
    eqrdav $p |- ( ph -> A = B ) $=
      ( cv wcel wa wi biimpd ex com23 imp mpd biimprd impbida eqrdv ) ABCDABIZC
      JZUADJZAUBKUAEJZUCFAUBUDUCLAUDUBUCAUDUBUCLAUDKZUBUCHMNOPQAUCKUDUBGAUCUDUB
      LAUDUCUBAUDUCUBLUEUBUCHRNOPQST $.
      $( [10-Nov-2008] $) $( [7-Nov-2008] $)
  $}

  ${
    $d x A $.
    $( Law of identity (reflexivity of class equality).  Theorem 6.4 of [Quine]
       p. 41.

       This law is thought to have originated with Aristotle (_Metaphysics_,
       Book VII, Part 17).  (Thanks to Stefan Allan for this information.) $)
    eqid $p |- A = A $=
      ( vx cv wcel biid eqriv ) BAABCADEF $.
      $( [5-Aug-1993] $) $( [5-Aug-1993] $)
  $}

  $( Class identity law with antecedent. $)
  eqidd $p |- ( ph -> A = A ) $=
    ( wceq eqid a1i ) BBCABDE $.
    $( [21-Aug-2008] $) $( [21-Aug-2008] $)

  ${
    $d x A $.  $d x B $.
    $( Commutative law for class equality.  Theorem 6.5 of [Quine] p. 41. $)
    eqcom $p |- ( A = B <-> B = A ) $=
      ( vx cv wcel wb wal wceq bicom albii dfcleq 3bitr4i ) CDZAEZMBEZFZCGONFZC
      GABHBAHPQCNOIJCABKCBAKL $.
      $( [5-Aug-1993] $)
  $}

  ${
    eqcoms.1 $e |- ( A = B -> ph ) $.
    $( Inference applying commutative law for class equality to an
       antecedent. $)
    eqcoms $p |- ( B = A -> ph ) $=
      ( wceq eqcom sylbi ) CBEBCEACBFDG $.
      $( [5-Aug-1993] $)
  $}

  ${
    eqcomi.1 $e |- A = B $.
    $( Inference from commutative law for class equality. $)
    eqcomi $p |- B = A $=
      ( wceq eqcom mpbi ) ABDBADCABEF $.
      $( [5-Aug-1993] $)
  $}

  ${
    eqcomd.1 $e |- ( ph -> A = B ) $.
    $( Deduction from commutative law for class equality. $)
    eqcomd $p |- ( ph -> B = A ) $=
      ( wceq eqcom sylib ) ABCECBEDBCFG $.
      $( [15-Aug-1994] $)
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Equality implies equivalence of equalities. $)
    eqeq1 $p |- ( A = B -> ( A = C <-> B = C ) ) $=
      ( vx wceq cv wcel wb wal dfcleq biimpi 19.21bi bibi1d albidv 3bitr4g ) AB
      EZDFZAGZQCGZHZDIQBGZSHZDIACEBCEPTUBDPRUASPRUAHZDPUCDIDABJKLMNDACJDBCJO $.
      $( [5-Aug-1993] $)
  $}

  ${
    eqeq1i.1 $e |- A = B $.
    $( Inference from equality to equivalence of equalities. $)
    eqeq1i $p |- ( A = C <-> B = C ) $=
      ( wceq wb eqeq1 ax-mp ) ABEACEBCEFDABCGH $.
      $( [5-Aug-1993] $)
  $}

  ${
    eqeq1d.1 $e |- ( ph -> A = B ) $.
    $( Deduction from equality to equivalence of equalities. $)
    eqeq1d $p |- ( ph -> ( A = C <-> B = C ) ) $=
      ( wceq wb eqeq1 syl ) ABCFBDFCDFGEBCDHI $.
      $( [27-Dec-1993] $)
  $}

  $( Equality implies equivalence of equalities. $)
  eqeq2 $p |- ( A = B -> ( C = A <-> C = B ) ) $=
    ( wceq eqeq1 eqcom 3bitr4g ) ABDACDBCDCADCBDABCECAFCBFG $.
    $( [5-Aug-1993] $)

  ${
    eqeq2i.1 $e |- A = B $.
    $( Inference from equality to equivalence of equalities. $)
    eqeq2i $p |- ( C = A <-> C = B ) $=
      ( wceq wb eqeq2 ax-mp ) ABECAECBEFDABCGH $.
      $( [5-Aug-1993] $)
  $}

  ${
    eqeq2d.1 $e |- ( ph -> A = B ) $.
    $( Deduction from equality to equivalence of equalities. $)
    eqeq2d $p |- ( ph -> ( C = A <-> C = B ) ) $=
      ( wceq wb eqeq2 syl ) ABCFDBFDCFGEBCDHI $.
      $( [27-Dec-1993] $)
  $}

  $( Equality relationship among 4 classes. $)
  eqeq12 $p |- ( ( A = B /\ C = D ) -> ( A = C <-> B = D ) ) $=
    ( wceq eqeq1 eqeq2 sylan9bb ) ABEACEBCECDEBDEABCFCDBGH $.
    $( [3-Aug-1994] $)

  ${
    eqeq12i.1 $e |- A = B $.
    eqeq12i.2 $e |- C = D $.
    $( A useful inference for substituting definitions into an equality.  (The
       proof was shortened by Andrew Salmon, 25-May-2011.) $)
    eqeq12i $p |- ( A = C <-> B = D ) $=
      ( wceq wb eqeq12 mp2an ) ABGCDGACGBDGHEFABCDIJ $.
      $( [25-May-2011] $) $( [5-Aug-1993] $)

    $( A useful inference for substituting definitions into an equality. $)
    eqeq12iOLD $p |- ( A = C <-> B = D ) $=
      ( wceq eqeq1i eqeq2i bitri ) ACGBCGBDGABCEHCDBFIJ $.
      $( [5-Aug-1993] $)
  $}

  ${
    eqeq12d.1 $e |- ( ph -> A = B ) $.
    eqeq12d.2 $e |- ( ph -> C = D ) $.
    $( A useful inference for substituting definitions into an equality.  (The
       proof was shortened by Andrew Salmon, 25-May-2011.) $)
    eqeq12d $p |- ( ph -> ( A = C <-> B = D ) ) $=
      ( wceq wb eqeq12 sylanc ) BCHDEHBDHCEHIABCDEJFGK $.
      $( [14-Jun-2011] $) $( [5-Aug-1993] $)

    $( A useful inference for substituting definitions into an equality.  (The
       proof was shortened by Andrew Salmon, 25-May-2011.) $)
    eqeq12dOLD $p |- ( ph -> ( A = C <-> B = D ) ) $=
      ( wceq eqeq1d eqeq2d bitrd ) ABDHCDHCEHABCDFIADECGJK $.
      $( [5-Aug-1993] $)
  $}

  ${
    eqeqan12d.1 $e |- ( ph -> A = B ) $.
    eqeqan12d.2 $e |- ( ps -> C = D ) $.
    $( A useful inference for substituting definitions into an equality.  (The
       proof was shortened by Andrew Salmon, 25-May-2011.) $)
    eqeqan12d $p |- ( ( ph /\ ps ) -> ( A = C <-> B = D ) ) $=
      ( wceq wb eqeq12 syl2an ) CDIEFICEIDFIJABCDEFKGHL $.
      $( [25-May-2011] $) $( [9-Aug-1994] $)

    $( A useful inference for substituting definitions into an equality. $)
    eqeqan12dOLD $p |- ( ( ph /\ ps ) -> ( A = C <-> B = D ) ) $=
      ( wa wceq adantr adantl eqeq12d ) ABICDEFACDJBGKBEFJAHLM $.
      $( [9-Aug-1994] $)
  $}

  ${
    eqeqan12rd.1 $e |- ( ph -> A = B ) $.
    eqeqan12rd.2 $e |- ( ps -> C = D ) $.
    $( A useful inference for substituting definitions into an equality. $)
    eqeqan12rd $p |- ( ( ps /\ ph ) -> ( A = C <-> B = D ) ) $=
      ( wceq wb eqeqan12d ancoms ) ABCEIDFIJABCDEFGHKL $.
      $( [9-Aug-1994] $)
  $}

  $( Transitive law for class equality.  Proposition 4.7(3) of [TakeutiZaring]
     p. 13. $)
  eqtr $p |- ( ( A = B /\ B = C ) -> A = C ) $=
    ( wceq eqeq1 biimpar ) ABDACDBCDABCEF $.
    $( [25-Jan-2004] $) $( [25-Jan-2004] $)

  $( A transitive law for class equality.  (The proof was shortened by Andrew
     Salmon, 25-May-2011.) $)
  eqtr2 $p |- ( ( A = B /\ A = C ) -> B = C ) $=
    ( wceq eqtr eqcom sylanb ) BADACDBCDABDBACEABFG $.
    $( [25-May-2011] $) $( [20-May-2005] $)

  $( A transitive law for class equality. $)
  eqtr2OLD $p |- ( ( A = B /\ A = C ) -> B = C ) $=
    ( wceq eqtr eqcom sylanb ) BADACDBCDABDBACEABFG $.
    $( [21-May-2005] $) $( [20-May-2005] $)

  $( A transitive law for class equality. $)
  eqtr3 $p |- ( ( A = C /\ B = C ) -> A = B ) $=
    ( wceq eqtr eqcom sylan2b ) ACDCBDABDBCDACBEBCFG $.
    $( [21-May-2005] $) $( [20-May-2005] $)

  ${
    eqtri.1 $e |- A = B $.
    eqtri.2 $e |- B = C $.
    $( An equality transitivity inference. $)
    eqtri $p |- A = C $=
      ( wceq eqeq2i mpbi ) ABFACFDBCAEGH $.
      $( [5-Aug-1993] $)
  $}

  ${
    eqtr2i.1 $e |- A = B $.
    eqtr2i.2 $e |- B = C $.
    $( An equality transitivity inference. $)
    eqtr2i $p |- C = A $=
      ( eqtri eqcomi ) ACABCDEFG $.
      $( [21-Feb-1995] $)
  $}

  ${
    eqtr3i.1 $e |- A = B $.
    eqtr3i.2 $e |- A = C $.
    $( An equality transitivity inference. $)
    eqtr3i $p |- B = C $=
      ( eqcomi eqtri ) BACABDFEG $.
      $( [6-May-1994] $)
  $}

  ${
    eqtr4i.1 $e |- A = B $.
    eqtr4i.2 $e |- C = B $.
    $( An equality transitivity inference. $)
    eqtr4i $p |- A = C $=
      ( eqcomi eqtri ) ABCDCBEFG $.
      $( [5-Aug-1993] $)
  $}

  ${
    3eqtri.1 $e |- A = B $.
    3eqtri.2 $e |- B = C $.
    3eqtri.3 $e |- C = D $.
    $( An inference from three chained equalities. $)
    3eqtri $p |- A = D $=
      ( eqtri ) ABDEBCDFGHH $.
      $( [29-Aug-1993] $)

    $( An inference from three chained equalities.  (The proof was shortened by
       Andrew Salmon, 25-May-2011.) $)
    3eqtrri $p |- D = A $=
      ( eqtri eqtr2i ) ACDABCEFHGI $.
      $( [25-May-2011] $) $( [3-Aug-2006] $)

    $( An inference from three chained equalities. $)
    3eqtrriOLD $p |- D = A $=
      ( eqtr2i eqtr3i ) CDAGABCEFHI $.
      $( [4-Aug-2006] $) $( [3-Aug-2006] $)
  $}

  ${
    3eqtr2i.1 $e |- A = B $.
    3eqtr2i.2 $e |- C = B $.
    3eqtr2i.3 $e |- C = D $.
    $( An inference from three chained equalities. $)
    3eqtr2i $p |- A = D $=
      ( eqtr4i eqtri ) ACDABCEFHGI $.
      $( [4-Aug-2006] $) $( [3-Aug-2006] $)

    $( An inference from three chained equalities.  (The proof was shortened by
       Andrew Salmon, 25-May-2011.) $)
    3eqtr2ri $p |- D = A $=
      ( eqtr4i eqtr2i ) ACDABCEFHGI $.
      $( [4-Aug-2006] $) $( [3-Aug-2006] $)

    $( An inference from three chained equalities. $)
    3eqtr2riOLD $p |- D = A $=
      ( eqcomi 3eqtrri ) ABCDECBFHGI $.
      $( [4-Aug-2006] $) $( [3-Aug-2006] $)
  $}

  ${
    3eqtr3i.1 $e |- A = B $.
    3eqtr3i.2 $e |- A = C $.
    3eqtr3i.3 $e |- B = D $.
    $( An inference from three chained equalities.  (The proof was shortened by
       Andrew Salmon, 25-May-2011.) $)
    3eqtr3i $p |- C = D $=
      ( eqtr3i ) BCDABCEFHGH $.
      $( [25-May-2011] $) $( [6-May-1994] $)

    $( An inference from three chained equalities. $)
    3eqtr3iOLD $p |- C = D $=
      ( eqtri eqtr3i ) ACDFABDEGHI $.
      $( [6-May-1994] $)

    $( An inference from three chained equalities. $)
    3eqtr3ri $p |- D = C $=
      ( eqtr3i ) BDCGABCEFHH $.
      $( [16-Aug-2004] $) $( [15-Aug-2004] $)
  $}

  ${
    3eqtr4i.1 $e |- A = B $.
    3eqtr4i.2 $e |- C = A $.
    3eqtr4i.3 $e |- D = B $.
    $( An inference from three chained equalities.  (The proof was shortened by
       Andrew Salmon, 25-May-2011.) $)
    3eqtr4i $p |- C = D $=
      ( eqtr4i ) CADFDBAGEHH $.
      $( [25-May-2011] $) $( [5-Aug-1993] $)

    $( An inference from three chained equalities. $)
    3eqtr4iOLD $p |- C = D $=
      ( eqtr4i eqtri ) CADFABDEGHI $.
      $( [5-Aug-1993] $)

    $( An inference from three chained equalities.  (The proof was shortened by
       Andrew Salmon, 25-May-2011.) $)
    3eqtr4ri $p |- D = C $=
      ( eqtr4i ) DACDBAGEHFH $.
      $( [25-May-2011] $) $( [2-Sep-1995] $)

    $( An inference from three chained equalities. $)
    3eqtr4riOLD $p |- D = C $=
      ( eqtr4i eqtr2i ) CADFABDEGHI $.
      $( [2-Sep-1995] $)
  $}

  ${
    eqtrd.1 $e |- ( ph -> A = B ) $.
    eqtrd.2 $e |- ( ph -> B = C ) $.
    $( An equality transitivity deduction. $)
    eqtrd $p |- ( ph -> A = C ) $=
      ( wceq eqeq2d mpbid ) ABCGBDGEACDBFHI $.
      $( [5-Aug-1993] $)
  $}

  ${
    eqtr2d.1 $e |- ( ph -> A = B ) $.
    eqtr2d.2 $e |- ( ph -> B = C ) $.
    $( An equality transitivity deduction. $)
    eqtr2d $p |- ( ph -> C = A ) $=
      ( eqtrd eqcomd ) ABDABCDEFGH $.
      $( [18-Oct-1999] $)
  $}

  ${
    eqtr3d.1 $e |- ( ph -> A = B ) $.
    eqtr3d.2 $e |- ( ph -> A = C ) $.
    $( An equality transitivity equality deduction. $)
    eqtr3d $p |- ( ph -> B = C ) $=
      ( eqcomd eqtrd ) ACBDABCEGFH $.
      $( [18-Jul-1995] $)
  $}

  ${
    eqtr4d.1 $e |- ( ph -> A = B ) $.
    eqtr4d.2 $e |- ( ph -> C = B ) $.
    $( An equality transitivity equality deduction. $)
    eqtr4d $p |- ( ph -> A = C ) $=
      ( eqcomd eqtrd ) ABCDEADCFGH $.
      $( [18-Jul-1995] $)
  $}

  ${
    3eqtrd.1 $e |- ( ph -> A = B ) $.
    3eqtrd.2 $e |- ( ph -> B = C ) $.
    3eqtrd.3 $e |- ( ph -> C = D ) $.
    $( A deduction from three chained equalities. $)
    3eqtrd $p |- ( ph -> A = D ) $=
      ( eqtrd ) ABCEFACDEGHII $.
      $( [29-Oct-1995] $)

    $( A deduction from three chained equalities.  (The proof was shortened by
       Andrew Salmon, 25-May-2011.) $)
    3eqtrrd $p |- ( ph -> D = A ) $=
      ( eqtrd eqtr2d ) ABDEABCDFGIHJ $.
      $( [25-May-2011] $) $( [4-Aug-2006] $)

    $( A deduction from three chained equalities. $)
    3eqtrrdOLD $p |- ( ph -> D = A ) $=
      ( eqtr2d eqtr3d ) ADEBHABCDFGIJ $.
      $( [8-Aug-2006] $) $( [4-Aug-2006] $)
  $}

  ${
    3eqtr2d.1 $e |- ( ph -> A = B ) $.
    3eqtr2d.2 $e |- ( ph -> C = B ) $.
    3eqtr2d.3 $e |- ( ph -> C = D ) $.
    $( A deduction from three chained equalities. $)
    3eqtr2d $p |- ( ph -> A = D ) $=
      ( eqtr4d eqtrd ) ABDEABCDFGIHJ $.
      $( [8-Aug-2006] $) $( [4-Aug-2006] $)

    $( A deduction from three chained equalities. $)
    3eqtr2rd $p |- ( ph -> D = A ) $=
      ( eqtr4d eqtr2d ) ABDEABCDFGIHJ $.
      $( [8-Aug-2006] $) $( [4-Aug-2006] $)
  $}

  ${
    3eqtr3d.1 $e |- ( ph -> A = B ) $.
    3eqtr3d.2 $e |- ( ph -> A = C ) $.
    3eqtr3d.3 $e |- ( ph -> B = D ) $.
    $( A deduction from three chained equalities.  (The proof was shortened by
       Andrew Salmon, 25-May-2011.) $)
    3eqtr3d $p |- ( ph -> C = D ) $=
      ( eqtr3d ) ACDEABCDFGIHI $.
      $( [25-May-2011] $) $( [4-Aug-1995] $)

    $( A deduction from three chained equalities. $)
    3eqtr3dOLD $p |- ( ph -> C = D ) $=
      ( eqtrd eqtr3d ) ABDEGABCEFHIJ $.
      $( [4-Aug-1995] $)

    $( A deduction from three chained equalities. $)
    3eqtr3rd $p |- ( ph -> D = C ) $=
      ( eqtr3d ) ACEDHABCDFGII $.
      $( [15-Jan-2006] $) $( [14-Jan-2006] $)
  $}

  ${
    3eqtr4d.1 $e |- ( ph -> A = B ) $.
    3eqtr4d.2 $e |- ( ph -> C = A ) $.
    3eqtr4d.3 $e |- ( ph -> D = B ) $.
    $( A deduction from three chained equalities.  (The proof was shortened by
       Andrew Salmon, 25-May-2011.) $)
    3eqtr4d $p |- ( ph -> C = D ) $=
      ( eqtr4d ) ADBEGAECBHFII $.
      $( [25-May-2011] $) $( [4-Aug-1995] $)

    $( A deduction from three chained equalities. $)
    3eqtr4dOLD $p |- ( ph -> C = D ) $=
      ( eqtr4d eqtrd ) ADBEGABCEFHIJ $.
      $( [4-Aug-1995] $)

    $( A deduction from three chained equalities. $)
    3eqtr4rd $p |- ( ph -> D = C ) $=
      ( eqtr4d ) AEBDAECBHFIGI $.
      $( [21-Sep-1995] $)
  $}

  ${
    syl5eq.1 $e |- ( ph -> A = B ) $.
    syl5eq.2 $e |- C = A $.
    $( An equality transitivity deduction. $)
    syl5eq $p |- ( ph -> C = B ) $=
      ( wceq a1i eqtrd ) ADBCDBGAFHEI $.
      $( [5-Aug-1993] $)
  $}

  ${
    syl5req.1 $e |- ( ph -> A = B ) $.
    syl5req.2 $e |- C = A $.
    $( An equality transitivity deduction. $)
    syl5req $p |- ( ph -> B = C ) $=
      ( syl5eq eqcomd ) ADCABCDEFGH $.
      $( [29-Mar-1998] $)
  $}

  ${
    syl5eqr.1 $e |- ( ph -> A = B ) $.
    syl5eqr.2 $e |- A = C $.
    $( An equality transitivity deduction. $)
    syl5eqr $p |- ( ph -> C = B ) $=
      ( eqcomi syl5eq ) ABCDEBDFGH $.
      $( [5-Aug-1993] $)
  $}

  ${
    syl5reqr.1 $e |- ( ph -> A = B ) $.
    syl5reqr.2 $e |- A = C $.
    $( An equality transitivity deduction. $)
    syl5reqr $p |- ( ph -> B = C ) $=
      ( eqcomi syl5req ) ABCDEBDFGH $.
      $( [29-Mar-1998] $)
  $}

  ${
    syl6eq.1 $e |- ( ph -> A = B ) $.
    syl6eq.2 $e |- B = C $.
    $( An equality transitivity deduction. $)
    syl6eq $p |- ( ph -> A = C ) $=
      ( wceq a1i eqtrd ) ABCDECDGAFHI $.
      $( [5-Aug-1993] $)
  $}

  ${
    syl6req.1 $e |- ( ph -> A = B ) $.
    syl6req.2 $e |- B = C $.
    $( An equality transitivity deduction. $)
    syl6req $p |- ( ph -> C = A ) $=
      ( syl6eq eqcomd ) ABDABCDEFGH $.
      $( [29-Mar-1998] $)
  $}

  ${
    syl6eqr.1 $e |- ( ph -> A = B ) $.
    syl6eqr.2 $e |- C = B $.
    $( An equality transitivity deduction. $)
    syl6eqr $p |- ( ph -> A = C ) $=
      ( eqcomi syl6eq ) ABCDEDCFGH $.
      $( [5-Aug-1993] $)
  $}

  ${
    syl6reqr.1 $e |- ( ph -> A = B ) $.
    syl6reqr.2 $e |- C = B $.
    $( An equality transitivity deduction. $)
    syl6reqr $p |- ( ph -> C = A ) $=
      ( eqcomi syl6req ) ABCDEDCFGH $.
      $( [29-Mar-1998] $)
  $}

  ${
    sylan9eq.1 $e |- ( ph -> A = B ) $.
    sylan9eq.2 $e |- ( ps -> B = C ) $.
    $( An equality transitivity deduction.  (The proof was shortened by Andrew
       Salmon, 25-May-2011.) $)
    sylan9eq $p |- ( ( ph /\ ps ) -> A = C ) $=
      ( wceq eqtr syl2an ) CDHDEHCEHABCDEIFGJ $.
      $( [25-May-2011] $) $( [8-May-1994] $)

    $( An equality transitivity deduction. $)
    sylan9eqOLD $p |- ( ( ph /\ ps ) -> A = C ) $=
      ( wa wceq adantr adantl eqtrd ) ABHCDEACDIBFJBDEIAGKL $.
      $( [8-May-1994] $)
  $}

  ${
    sylan9req.1 $e |- ( ph -> B = A ) $.
    sylan9req.2 $e |- ( ps -> B = C ) $.
    $( An equality transitivity deduction. $)
    sylan9req $p |- ( ( ph /\ ps ) -> A = C ) $=
      ( eqcomd sylan9eq ) ABCDEADCFHGI $.
      $( [29-Jun-2007] $) $( [23-Jun-2007] $)
  $}

  ${
    sylan9eqr.1 $e |- ( ph -> A = B ) $.
    sylan9eqr.2 $e |- ( ps -> B = C ) $.
    $( An equality transitivity deduction. $)
    sylan9eqr $p |- ( ( ps /\ ph ) -> A = C ) $=
      ( wceq sylan9eq ancoms ) ABCEHABCDEFGIJ $.
      $( [8-May-1994] $)
  $}

  ${
    3eqtr3g.1 $e |- ( ph -> A = B ) $.
    3eqtr3g.2 $e |- A = C $.
    3eqtr3g.3 $e |- B = D $.
    $( A chained equality inference, useful for converting from definitions. $)
    3eqtr3g $p |- ( ph -> C = D ) $=
      ( syl5eqr syl6eq ) ADCEABCDFGIHJ $.
      $( [15-Nov-1994] $)
  $}

  ${
    3eqtr4g.1 $e |- ( ph -> A = B ) $.
    3eqtr4g.2 $e |- C = A $.
    3eqtr4g.3 $e |- D = B $.
    $( A chained equality inference, useful for converting to definitions. $)
    3eqtr4g $p |- ( ph -> C = D ) $=
      ( syl5eq syl6eqr ) ADCEABCDFGIHJ $.
      $( [5-Aug-1993] $)
  $}

  ${
    3eqtr4a.1 $e |- A = B $.
    3eqtr4a.2 $e |- ( ph -> C = A ) $.
    3eqtr4a.3 $e |- ( ph -> D = B ) $.
    $( A chained equality inference, useful for converting to definitions.
       (The proof was shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtr4a $p |- ( ph -> C = D ) $=
      ( syl6eq eqtr4d ) ADCEADBCGFIHJ $.
      $( [25-May-2011] $) $( [2-Feb-2007] $)

    $( A chained equality inference, useful for converting to definitions. $)
    3eqtr4aOLD $p |- ( ph -> C = D ) $=
      ( wceq a1i 3eqtr4d ) ABCDEBCIAFJGHK $.
      $( [2-Feb-2007] $) $( [2-Feb-2007] $)
  $}

  ${
    $v F $.
    $v G $.
    eq2tr.F $f class F $.
    eq2tr.G $f class G $.
    eq2tr.1 $e |- ( A = C -> D = F ) $.
    eq2tr.2 $e |- ( B = D -> C = G ) $.
    $( A compound transitive inference for class equality. $)
    eq2tri $p |- ( ( A = C /\ B = F ) <-> ( B = D /\ A = G ) ) $=
      ( wceq wa ancom eqeq2d pm5.32i 3bitr3i ) ACIZBDIZJPOJOBEIZJPAFIZJOPKOPQOD
      EBGLMPORPCFAHLMN $.
      $( [26-Jan-2004] $) $( [22-Jan-2004] $)
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Equality implies equivalence of membership. $)
    eleq1 $p |- ( A = B -> ( A e. C <-> B e. C ) ) $=
      ( vx wceq cv wcel wa wex eqeq2 anbi1d exbidv df-clel 3bitr4g ) ABEZDFZAEZ
      PCGZHZDIPBEZRHZDIACGBCGOSUADOQTRABPJKLDACMDBCMN $.
      $( [5-Aug-1993] $)

    $( Equality implies equivalence of membership. $)
    eleq2 $p |- ( A = B -> ( C e. A <-> C e. B ) ) $=
      ( vx wceq cv wcel wa wex wb wal dfcleq biimpi 19.21bi anbi2d exbidv
      df-clel 3bitr4g ) ABEZDFZCEZTAGZHZDIUATBGZHZDICAGCBGSUCUEDSUBUDUASUBUDJZD
      SUFDKDABLMNOPDCAQDCBQR $.
      $( [5-Aug-1993] $)
  $}

  $( Equality implies equivalence of membership. $)
  eleq12 $p |- ( ( A = B /\ C = D ) -> ( A e. C <-> B e. D ) ) $=
    ( wceq wcel eleq1 eleq2 sylan9bb ) ABEACFBCFCDEBDFABCGCDBHI $.
    $( [31-May-1999] $)

  ${
    eleq1i.1 $e |- A = B $.
    $( Inference from equality to equivalence of membership. $)
    eleq1i $p |- ( A e. C <-> B e. C ) $=
      ( wceq wcel wb eleq1 ax-mp ) ABEACFBCFGDABCHI $.
      $( [5-Aug-1993] $)

    $( Inference from equality to equivalence of membership. $)
    eleq2i $p |- ( C e. A <-> C e. B ) $=
      ( wceq wcel wb eleq2 ax-mp ) ABECAFCBFGDABCHI $.
      $( [5-Aug-1993] $)

    ${
      eleq12i.2 $e |- C = D $.
      $( Inference from equality to equivalence of membership. $)
      eleq12i $p |- ( A e. C <-> B e. D ) $=
        ( wcel eleq2i eleq1i bitri ) ACGADGBDGCDAFHABDEIJ $.
        $( [31-May-1994] $)
    $}
  $}

  ${
    eleq1d.1 $e |- ( ph -> A = B ) $.
    $( Deduction from equality to equivalence of membership. $)
    eleq1d $p |- ( ph -> ( A e. C <-> B e. C ) ) $=
      ( wceq wcel wb eleq1 syl ) ABCFBDGCDGHEBCDIJ $.
      $( [5-Aug-1993] $)

    $( Deduction from equality to equivalence of membership. $)
    eleq2d $p |- ( ph -> ( C e. A <-> C e. B ) ) $=
      ( wceq wcel wb eleq2 syl ) ABCFDBGDCGHEBCDIJ $.
      $( [27-Dec-1993] $)

    ${
      eleq12d.2 $e |- ( ph -> C = D ) $.
      $( Deduction from equality to equivalence of membership. $)
      eleq12d $p |- ( ph -> ( A e. C <-> B e. D ) ) $=
        ( wcel eleq2d eleq1d bitrd ) ABDHBEHCEHADEBGIABCEFJK $.
        $( [31-May-1994] $)
    $}
  $}

  $( A transitive-type law relating membership and equality. $)
  eleq1a $p |- ( A e. B -> ( C = A -> C e. B ) ) $=
    ( wceq wcel eleq1 biimprcd ) CADCBEABECABFG $.
    $( [9-Apr-1994] $)

  ${
    eqeltr.1 $e |- A = B $.
    eqeltr.2 $e |- B e. C $.
    $( Substitution of equal classes into membership relation. $)
    eqeltri $p |- A e. C $=
      ( wcel eleq1i mpbir ) ACFBCFEABCDGH $.
      $( [5-Aug-1993] $)
  $}

  ${
    eqeltrr.1 $e |- A = B $.
    eqeltrr.2 $e |- A e. C $.
    $( Substitution of equal classes into membership relation. $)
    eqeltrri $p |- B e. C $=
      ( eqcomi eqeltri ) BACABDFEG $.
      $( [5-Aug-1993] $)
  $}

  ${
    eleqtr.1 $e |- A e. B $.
    eleqtr.2 $e |- B = C $.
    $( Substitution of equal classes into membership relation. $)
    eleqtri $p |- A e. C $=
      ( wcel eleq2i mpbi ) ABFACFDBCAEGH $.
      $( [5-Aug-1993] $)
  $}

  ${
    eleqtrr.1 $e |- A e. B $.
    eleqtrr.2 $e |- C = B $.
    $( Substitution of equal classes into membership relation. $)
    eleqtrri $p |- A e. C $=
      ( eqcomi eleqtri ) ABCDCBEFG $.
      $( [5-Aug-1993] $)
  $}

  ${
    eqeltrd.1 $e |- ( ph -> A = B ) $.
    eqeltrd.2 $e |- ( ph -> B e. C ) $.
    $( Substitution of equal classes into membership relation, deduction form.
       (Contributed by Raph Levien, 10-Dec-2002.) $)
    eqeltrd $p |- ( ph -> A e. C ) $=
      ( wcel eleq1d mpbird ) ABDGCDGFABCDEHI $.
      $( [14-May-2003] $) $( [10-Dec-2002] $)
  $}

  ${
    eqeltrrd.1 $e |- ( ph -> A = B ) $.
    eqeltrrd.2 $e |- ( ph -> A e. C ) $.
    $( Deduction that substitutes equal classes into membership. $)
    eqeltrrd $p |- ( ph -> B e. C ) $=
      ( eqcomd eqeltrd ) ACBDABCEGFH $.
      $( [15-Dec-2004] $) $( [14-Dec-2004] $)
  $}

  ${
    eleqtrd.1 $e |- ( ph -> A e. B ) $.
    eleqtrd.2 $e |- ( ph -> B = C ) $.
    $( Deduction that substitutes equal classes into membership. $)
    eleqtrd $p |- ( ph -> A e. C ) $=
      ( wcel eleq2d mpbid ) ABCGBDGEACDBFHI $.
      $( [15-Dec-2004] $) $( [14-Dec-2004] $)
  $}

  ${
    eleqtrrd.1 $e |- ( ph -> A e. B ) $.
    eleqtrrd.2 $e |- ( ph -> C = B ) $.
    $( Deduction that substitutes equal classes into membership. $)
    eleqtrrd $p |- ( ph -> A e. C ) $=
      ( eqcomd eleqtrd ) ABCDEADCFGH $.
      $( [15-Dec-2004] $) $( [14-Dec-2004] $)
  $}

  ${
    syl5eqel.1 $e |- ( ph -> A e. B ) $.
    syl5eqel.2 $e |- C = A $.
    $( A membership and equality inference. $)
    syl5eqel $p |- ( ph -> C e. B ) $=
      ( wceq a1i eqeltrd ) ADBCDBGAFHEI $.
      $( [6-Jan-2006] $) $( [4-Jan-2006] $)
  $}

  ${
    syl5eqelr.1 $e |- ( ph -> A e. B ) $.
    syl5eqelr.2 $e |- A = C $.
    $( A membership and equality inference. $)
    syl5eqelr $p |- ( ph -> C e. B ) $=
      ( eqcomi syl5eqel ) ABCDEBDFGH $.
      $( [6-Jan-2006] $) $( [4-Jan-2006] $)
  $}

  ${
    syl5eleq.1 $e |- ( ph -> A = B ) $.
    syl5eleq.2 $e |- C e. A $.
    $( A membership and equality inference. $)
    syl5eleq $p |- ( ph -> C e. B ) $=
      ( wcel a1i eleqtrd ) ADBCDBGAFHEI $.
      $( [6-Jan-2006] $) $( [4-Jan-2006] $)
  $}

  ${
    syl5eleqr.1 $e |- ( ph -> B = A ) $.
    syl5eleqr.2 $e |- C e. A $.
    $( A membership and equality inference. $)
    syl5eleqr $p |- ( ph -> C e. B ) $=
      ( eqcomd syl5eleq ) ABCDACBEGFH $.
      $( [6-Jan-2006] $) $( [4-Jan-2006] $)
  $}

  ${
    syl6eqel.1 $e |- ( ph -> A = B ) $.
    syl6eqel.2 $e |- B e. C $.
    $( A membership and equality inference. $)
    syl6eqel $p |- ( ph -> A e. C ) $=
      ( wcel a1i eqeltrd ) ABCDECDGAFHI $.
      $( [6-Jan-2006] $) $( [4-Jan-2006] $)
  $}

  ${
    syl6eqelr.1 $e |- ( ph -> B = A ) $.
    syl6eqelr.2 $e |- B e. C $.
    $( A membership and equality inference. $)
    syl6eqelr $p |- ( ph -> A e. C ) $=
      ( eqcomd syl6eqel ) ABCDACBEGFH $.
      $( [6-Jan-2006] $) $( [4-Jan-2006] $)
  $}

  ${
    syl6eleq.1 $e |- ( ph -> A e. B ) $.
    syl6eleq.2 $e |- B = C $.
    $( A membership and equality inference. $)
    syl6eleq $p |- ( ph -> A e. C ) $=
      ( wceq a1i eleqtrd ) ABCDECDGAFHI $.
      $( [6-Jan-2006] $) $( [4-Jan-2006] $)
  $}

  ${
    syl6eleqr.1 $e |- ( ph -> A e. B ) $.
    syl6eleqr.2 $e |- C = B $.
    $( A membership and equality inference. $)
    syl6eleqr $p |- ( ph -> A e. C ) $=
      ( eqcomi syl6eleq ) ABCDEDCFGH $.
      $( [26-Apr-2005] $) $( [24-Apr-2005] $)
  $}

  ${
    eleq2s.1 $e |- ( A e. B -> ph ) $.
    eleq2s.2 $e |- C = B $.
    $( Substitution of equal classes into a membership antecedent.
       (Contributed by Jonathan Ben-Naim, 3-Jun-2011.) $)
    eleq2s $p |- ( A e. C -> ph ) $=
      ( wcel eleq2i sylbi ) BDGBCGADCBFHEI $.
      $( [12-Jun-2011] $) $( [3-Jun-2011] $)
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    cleqf.1 $e |- ( y e. A -> A. x y e. A ) $.
    cleqf.2 $e |- ( y e. B -> A. x y e. B ) $.
    $( Establish equality between classes, using bound-variable hypotheses
       instead of distinct variable conditions. $)
    cleqf $p |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $=
      ( wceq cv wcel wb wal dfcleq ax-17 hbbi eleq1 bibi12d cbval bitr4i ) CDGB
      HZCIZSDIZJZBKAHZCIZUCDIZJZAKBCDLUFUBABUFBMTUAAEFNUCSGUDTUEUAUCSCOUCSDOPQR
      $.
      $( [5-Aug-1993] $)
  $}

  $( A way of showing two classes are not equal. $)
  nelneq $p |- ( ( A e. C /\ -. B e. C ) -> -. A = B ) $=
    ( wcel wn wceq eleq1 biimpcd con3d imp ) ACDZBCDZEABFZEKMLMKLABCGHIJ $.
    $( [1-Apr-1997] $)

  $( A way of showing two classes are not equal. $)
  nelneq2 $p |- ( ( A e. B /\ -. A e. C ) -> -. B = C ) $=
    ( wcel wn wceq eleq2 biimpcd con3d imp ) ABDZACDZEBCFZEKMLMKLBCAGHIJ $.
    $( [12-Jan-2002] $)

  ${
    $d x y $.  $d y A $.
    $( Lemma for ~ eqsb3 .  (The proof was shortened by Andrew Salmon,
       14-Jun-2011.) $)
    eqsb3lem $p |- ( [ x / y ] y = A <-> x = A ) $=
      ( cv wceq ax-17 eqeq1 sbie ) BDZCEADZCEZBAKBFIJCGH $.
      $( [14-Jun-2011] $) $( [28-Apr-2010] $)
  $}

  ${
    $d x y $.  $d y A $.
    $( Lemma for ~ eqsb3 . $)
    eqsb3lemOLD $p |- ( [ x / y ] y = A <-> x = A ) $=
      ( cv wceq wsbc wb equsb2 eqeq1 sbimi ax-mp sbbi mpbi ax-17 sbf bitr3i )
      BDZCEZBADZFZSCEZBSFZUAUARGZBSFZUBTGSQEZBSFUDBAHUEUCBASQCIJKUARBALMUABAUAB
      NOP $.
      $( [19-May-2010] $) $( [28-Apr-2010] $)
  $}

  ${
    $d y A $.  $d w y $.  $d w A $.  $d x w $.
    $( Substitution applied to an atomic wff (class version of ~ equsb3 ).
       (Contributed by Rodolfo Medina, 28-Apr-2010.) $)
    eqsb3 $p |- ( [ x / y ] y = A <-> x = A ) $=
      ( vw cv wceq wsbc eqsb3lem sbbii ax-17 sbco2 3bitr3i ) BECFZBDEZGZDAEZGNC
      FZDPGMBPGPCFOQDADBCHIMBADMDJKADCHL $.
      $( [19-May-2010] $) $( [28-Apr-2010] $)
  $}

  ${
    $d y A $.  $d w y $.  $d w A $.  $d w x $.
    $( Substitution applied to an atomic wff (class version of ~ elsb3 ).
       (Contributed by Rodolfo Medina, 28-Apr-2010.)  (The proof was shortened
       by Andrew Salmon, 14-Jun-2011.) $)
    clelsb3 $p |- ( [ x / y ] y e. A <-> x e. A ) $=
      ( vw cv wcel wsbc ax-17 eleq1 sbie sbbii sbco2 bitr3i wb wceq equsb1
      sbimi ax-mp sbbi mpbi sbf 3bitri ) BEZCFZBAEZGZDEZCFZDUEGZUECFZDUEGZUJUFU
      HDUCGZBUEGUIULUDBAUHUDDBUDDHUGUCCIJKUHDABUHBHLMUHUJNZDUEGZUIUKNUGUEOZDUEG
      UNDAPUOUMDAUGUECIQRUHUJDASTUJDAUJDHUAUB $.
      $( [14-Jun-2011] $) $( [28-Apr-2010] $)
  $}

  ${
    $d y A $.  $d w y $.  $d w A $.  $d w x $.
    $( Substitution applied to an atomic wff (class version of ~ elsb3 ).
       (Contributed by Rodolfo Medina, 28-Apr-2010.) $)
    clelsb3OLD $p |- ( [ x / y ] y e. A <-> x e. A ) $=
      ( vw cv wcel wsbc wb wceq equsb2 eleq1 sbimi ax-mp sbbi mpbi ax-17 sbf
      bitr3i sbbii sbco2 3bitr3i ) BEZCFZBDEZGZDAEZGUDCFZDUFGZUCBUFGUFCFZUEUGDA
      UEUGBUDGZUGUGUCHZBUDGZUJUEHUDUBIZBUDGULBDJUMUKBDUDUBCKLMUGUCBDNOUGBDUGBPQ
      RSUCBADUCDPTUHUIDUFGZUIUIUGHZDUFGZUNUHHUFUDIZDUFGUPDAJUQUODAUFUDCKLMUIUGD
      ANOUIDAUIDPQRUA $.
      $( [19-May-2010] $) $( [28-Apr-2010] $)
  $}

  ${
    hbxfr.1 $e |- A = B $.
    hbxfr.2 $e |- ( y e. B -> A. x y e. B ) $.
    $( A utility lemma to transfer a bound-variable hypothesis builder into a
       definition. $)
    hbxfr $p |- ( y e. A -> A. x y e. A ) $=
      ( cv wcel wal eleq2i albii 3imtr4i ) BGZDHZNAIMCHZOAIFCDMEJZONAPKL $.
      $( [22-Aug-2007] $) $( [21-Aug-2007] $)
  $}

  ${
    $d w y A $.  $d w x z $.
    hblem.1 $e |- ( y e. A -> A. x y e. A ) $.
    $( Lemma for ~ hbeq and ~ hbel .  (Unnecessary distinct variable
       restrictions were removed by Andrew Salmon, 11-Jul-2011.) $)
    hblem $p |- ( z e. A -> A. x z e. A ) $=
      ( cv wcel wsbc wal hbsb clelsb3 albii 3imtr3i ) BFDGZBCFZHZPAIODGZQAINBCA
      EJCBDKZPQARLM $.
      $( [11-Jul-2011] $) $( [5-Aug-1993] $)
  $}

  ${
    $d y A $.  $d x y z $.
    hblemOLD.1 $e |- ( y e. A -> A. x y e. A ) $.
    $( Lemma for ~ hbeq and ~ hbel . $)
    hblemOLD $p |- ( z e. A -> A. x z e. A ) $=
      ( cv wcel wal wi wceq eleq1 albidv imbi12d chvarv ) BFZDGZPAHZICFZDGZSAHZ
      IBCORJZPSQTORDKZUAPSAUBLMEN $.
      $( [5-Aug-1993] $)
  $}

  ${
    $d y A w $.  $d z B w $.  $d w x $.
    hbeq.1 $e |- ( y e. A -> A. x y e. A ) $.
    hbeq.2 $e |- ( z e. B -> A. x z e. B ) $.
    $( If ` x ` is effectively bound in ` A ` and ` B ` , it is effectively
       bound in ` A = B ` .  (Unnecessary distinct variable restrictions were
       removed by Andrew Salmon, 11-Jul-2011.) $)
    hbeq $p |- ( A = B -> A. x A = B ) $=
      ( vw cv wcel wb wal wceq hblem hbbi hbal dfcleq albii 3imtr4i ) HIZDJZTEJ
      ZKZHLZUDALDEMZUEALUCAHUAUBAABHDFNACHEGNOPHDEQZUEUDAUFRS $.
      $( [11-Jul-2011] $) $( [5-Aug-1993] $)
  $}

  ${
    $d y A w $.  $d z B w $.  $d w x v $.
    hbel.1 $e |- ( y e. A -> A. x y e. A ) $.
    hbel.2 $e |- ( z e. B -> A. x z e. B ) $.
    $( If ` x ` is effectively bound in ` A ` and ` B ` , it is effectively
       bound in ` A e. B ` .  (Unnecessary distinct variable restrictions were
       removed by Andrew Salmon, 11-Jul-2011.) $)
    hbel $p |- ( A e. B -> A. x A e. B ) $=
      ( vw vv cv wceq wcel wa wex wal ax-17 hbeq hblem hban hbex df-clel albii
      3imtr4i ) HJZDKZUDELZMZHNZUHAODELZUIAOUGAHUEUFAAIBUDDIJUDLAPFQACHEGRSTHDE
      UAZUIUHAUJUBUC $.
      $( [11-Jul-2011] $) $( [5-Aug-1993] $)
  $}

  ${
    $d x y z $.  $d y z A $.
    hbeleq.1 $e |- ( y e. A -> A. x y e. A ) $.
    $( If ` x ` is effectively bound in ` y e. A ` , then it is effectively
       bound in ` y = A ` .  (The proof was shortened by Andrew Salmon,
       12-Aug-2011.) $)
    hbeleq $p |- ( y = A -> A. x y = A ) $=
      ( vz cv wcel ax-17 hbeq ) AEBBFZCEFJGAHDI $.
      $( [12-Aug-2011] $) $( [21-Feb-2004] $)

    $( If ` x ` is effectively bound in ` y e. A ` , then it is effectively
       bound in ` y = A ` . $)
    hbeleqOLD $p |- ( y = A -> A. x y = A ) $=
      ( vz cv wcel ax-17 hbel hbeq ) AEEBFZCEFZKGAHABBLCKLGAHDIJ $.
      $( [25-Feb-2004] $) $( [21-Feb-2004] $)
  $}

  ${
    $d x A y $.  $d ph y $.
    $( Equality of a class variable and a class abstraction (also called a
       class builder).  Theorem 5.1 of [Quine] p. 34.  This theorem shows the
       relationship between expressions with class abstractions and expressions
       with class variables.  Note that ~ eq2ab and its relatives are among
       those useful for converting theorems with class variables to equivalent
       theorems with wff variables, by first substituting a class abstraction
       for each class variable.

       Class variables can always be eliminated from a theorem to result in an
       equivalent theorem with wff variables, and vice-versa.  The idea is
       roughly as follows.  To convert a theorem with a wff variable ` ph `
       (that has a free variable ` x ` ) to a theorem with a class variable
       ` A ` , we substitute ` x e. A ` for ` ph ` throughout and simplify,
       where ` A ` is a new class variable not already in the wff.  An example
       is the conversion of ~ zfauscl to ~ inex1 (look at the instance of
       ~ zfauscl that occurs in the proof of ~ inex1 ).  Conversely, to convert
       a theorem with a class variable ` A ` to one with ` ph ` , we substitute
       ` { x | ph } ` for ` A ` throughout and simplify, where ` x ` and ` ph `
       are new set and wff variables not already in the wff.  An example is
       ~ cp , which derives a formula containing wff variables from
       substitution instances of the class variables in its equivalent
       formulation ~ cplem2 . $)
    abeq2 $p |- ( A = { x | ph } <-> A. x ( x e. A <-> ph ) ) $=
      ( vy cab wceq cv wcel wb wal ax-17 hbab1 cleqf abid bibi2i albii bitri )
      CABEZFBGZCHZSRHZIZBJTAIZBJBDCRDGCHBKABDLMUBUCBUAATABNOPQ $.
      $( [5-Aug-1993] $)
  $}

  ${
    $d x A y $.  $d ph y $.
    $( Equality of a class variable and a class abstraction. $)
    abeq1 $p |- ( { x | ph } = A <-> A. x ( ph <-> x e. A ) ) $=
      ( cab wceq cv wcel wb wal abeq2 eqcom bicom albii 3bitr4i ) CABDZEBFCGZAH
      ZBIOCEAPHZBIABCJOCKRQBAPLMN $.
      $( [20-Aug-1993] $)
  $}

  ${
    abeqi.1 $e |- A = { x | ph } $.
    $( Equality of a class variable and a class abstraction (inference
       rule). $)
    abeq2i $p |- ( x e. A <-> ph ) $=
      ( cv wcel cab eleq2i abid bitri ) BEZCFKABGZFACLKDHABIJ $.
      $( [3-Apr-1996] $)
  $}

  ${
    abeqri.1 $e |- { x | ph } = A $.
    $( Equality of a class variable and a class abstraction (inference
       rule). $)
    abeq1i $p |- ( ph <-> x e. A ) $=
      ( cv cab wcel abid eleq2i bitr3i ) ABEZABFZGKCGABHLCKDIJ $.
      $( [31-Jul-1994] $)
  $}

  ${
    abeqd.1 $e |- ( ph -> A = { x | ps } ) $.
    $( Equality of a class variable and a class abstraction (deduction). $)
    abeq2d $p |- ( ph -> ( x e. A <-> ps ) ) $=
      ( cv wcel cab eleq2d abid syl6bb ) ACFZDGLBCHZGBADMLEIBCJK $.
      $( [16-Nov-1995] $)
  $}

  ${
    $d ph y $.  $d ps y $.  $d x y $.
    $( Equality of two class abstractions means their wff's are equivalent. $)
    eq2ab $p |- ( { x | ph } = { x | ps } <-> A. x ( ph <-> ps ) ) $=
      ( vy cab wceq cv wcel wb wal hbab1 cleqf abid bibi12i albii bitri ) ACEZB
      CEZFCGZQHZSRHZIZCJABIZCJCDQRACDKBCDKLUBUCCTAUABACMBCMNOP $.
      $( [5-Aug-1993] $)
  $}

  ${
    $d x A $.
    abbiri.1 $e |- ( x e. A <-> ph ) $.
    $( Equality of a class variable and a class abstraction (inference
       rule). $)
    abbi2i $p |- A = { x | ph } $=
      ( cab wceq cv wcel wb abeq2 mpgbir ) CABEFBGCHAIBABCJDK $.
      $( [5-Aug-1993] $)
  $}

  ${
    abbii.1 $e |- ( ph <-> ps ) $.
    $( Equivalent wff's yield equal class abstractions (inference rule). $)
    abbii $p |- { x | ph } = { x | ps } $=
      ( cab wceq wb eq2ab mpgbir ) ACEBCEFABGCABCHDI $.
      $( [5-Aug-1993] $)
  $}

  ${
    $d x y $.  $d ph y $.  $d ps y $.  $d ch y $.  $( ` y ` is a dummy var. $)
    abbid.1 $e |- ( ph -> A. x ph ) $.
    abbid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal class abstractions (deduction rule). $)
    abbid $p |- ( ph -> { x | ps } = { x | ch } ) $=
      ( wb wal cab wceq 19.21ai eq2ab sylibr ) ABCGZDHBDICDIJANDEFKBCDLM $.
      $( [5-Aug-1993] $)
  $}

  ${
    $d x ph $.
    abbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal class abstractions (deduction rule). $)
    abbidv $p |- ( ph -> { x | ps } = { x | ch } ) $=
      ( ax-17 abbid ) ABCDADFEG $.
      $( [10-Aug-1993] $)
  $}

  ${
    $d x y A $.  $d ph x y $.  $d ps y $.  $( ` y ` is a dummy var. $)
    abbirdv.1 $e |- ( ph -> ( x e. A <-> ps ) ) $.
    $( Deduction from a wff to a class abstraction. $)
    abbi2dv $p |- ( ph -> A = { x | ps } ) $=
      ( cv wcel wb wal cab wceq 19.21aiv abeq2 sylibr ) ACFDGBHZCIDBCJKAOCELBCD
      MN $.
      $( [9-Jul-1994] $)
  $}

  ${
    $d x y A $.  $d ph x y $.  $d ps y $.  $( ` y ` is a dummy var. $)
    abbildv.1 $e |- ( ph -> ( ps <-> x e. A ) ) $.
    $( Deduction from a wff to a class abstraction. $)
    abbi1dv $p |- ( ph -> { x | ps } = A ) $=
      ( cv wcel wb wal cab wceq 19.21aiv abeq1 sylibr ) ABCFDGHZCIBCJDKAOCELBCD
      MN $.
      $( [9-Jul-1994] $)
  $}

  ${
    $d x A $.
    $( A simplification of class abstraction.  Theorem 5.2 of [Quine] p. 35. $)
    abid2 $p |- { x | x e. A } = A $=
      ( cv wcel cab biid abbi2i eqcomi ) BACBDZAEIABIFGH $.
      $( [26-Dec-1993] $)
  $}

  ${
    $d x A y $.  $d ph y $.
    $( Membership of a class variable in a class abstraction. $)
    clelab $p |- ( A e. { x | ph } <-> E. x ( x = A /\ ph ) ) $=
      ( vy cv wceq cab wcel wa wex wsbc df-clab anbi2i exbii df-clel ax-17
      hbs1 hban eqeq1 sbequ12 anbi12d cbvex 3bitr4i ) DEZCFZUDABGZHZIZDJUEABUDK
      ZIZDJCUFHBEZCFZAIZBJUHUJDUGUIUEADBLMNDCUFOUMUJBDUMDPUEUIBUEBPABDQRUKUDFUL
      UEAUIUKUDCSABDTUAUBUC $.
      $( [23-Dec-1993] $)
  $}

  ${
    $d y A $.  $d y ph $.  $d x y $.
    $( Membership of a class abstraction in another class. $)
    clabel $p |- ( { x | ph } e. A <->
                 E. y ( y e. A /\ A. x ( x e. y <-> ph ) ) ) $=
      ( cab wcel cv wceq wa wex wb wal df-clel abeq2 anbi1i ancom bitri exbii
      ) ABEZDFCGZSHZTDFZIZCJUBBGTFAKBLZIZCJCSDMUCUECUCUDUBIUEUAUDUBABTNOUDUBPQR
      Q $.
      $( [18-Jan-2006] $) $( [17-Jan-2006] $)
  $}

  ${
    $d z A $.  $d z x $.  $d z y $.
    $( The right-hand side of the second equality is a way of representing
       proper substitution of ` y ` for ` x ` into a class variable. $)
    sbab $p |- ( x = y -> A = { z | [ y / x ] z e. A } ) $=
      ( cv wceq wcel wsbc sbequ12 abbi2dv ) AEBEZFCEDGZAKHCDLABIJ $.
      $( [14-Sep-2003] $)
  $}

  ${
    $d v A w $.  $d x z v u $.  $d y z v u $.  $d v ph $.
    sbabel.1 $e |- ( w e. A -> A. x w e. A ) $.
    $( Theorem to move a substitution in and out of a class abstraction.
       (Unnecessary distinct variable restrictions were removed by Andrew
       Salmon, 11-Jul-2011.) $)
    sbabel $p |- ( [ y / x ] { z | ph } e. A <-> { z | [ y / x ] ph } e. A ) $=
      ( vv cv cab wceq wcel wa wex wsbc sbex sban wb wal sbal ax-17 sbf sbrbis
      albii bitri abeq2 sbbii 3bitr4i hblem anbi12i exbii df-clel ) HIZADJZKZUM
      FLZMZHNZBCIZOZUMABUSOZDJZKZUPMZHNZUNFLZBUSOVBFLUTUQBUSOZHNVEUQHBCPVGVDHVG
      UOBUSOZUPBUSOZMVDUOUPBCQVHVCVIUPDIUMLZARZDSZBUSOZVJVARZDSZVHVCVMVKBUSOZDS
      VOVKDBCTVPVNDVJVJABCVJBCVJBUAUBUCUDUEUOVLBCADUMUFUGVADUMUFUHUPBCBEHFGUIUB
      UJUEUKUEVFURBCHUNFULUGHVBFULUH $.
      $( [11-Jul-2011] $) $( [27-Sep-2003] $)
  $}

