$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
              Generic modules and vector spaces (New Structure builder)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c Hom $. $( The class of linear mappings. $)

  $( Extend class notation to include linear mappings. $)
  clinm $a class Hom $.

  ${
    $d m n f u v x $.
    $( Definition of a linear mapping. $)
    df-linm $a |- Hom = ( m e. LMod , n e. LMod |->
      { f e. ( ( vbase ` n ) ^m ( vbase ` m ) ) |
        ( A. u e. ( vbase ` m ) A. v e. ( vbase ` m )
         ( f ` ( u ( vadd ` m ) v ) ) = ( ( f ` u ) ( vadd ` n ) ( f ` v ) )
         /\ A. x e. ( Base ` m ) A. u e. ( vbase ` m )
            ( f ` ( x ( vsca ` m ) u ) )
               = ( x ( vsca ` n ) ( f ` u ) ) ) } ) $.
  $}

  $( The definition df-mnd2 is not sound, since it redefines ` Mnd `
     inconsistently with df-mnd.  I commented out the definition.
     - NM 18-May-2014 $)
$(
  @{
    @d f g p a b c e @.
    @( Definition of a monoid. @)
    df-mnd2 @a |- Mnd = { f | E. g E. p ( g = ( Base ` f )
       /\ p = ( +g ` f ) /\
       ( A. a e. g A. b e. g A. c e. g ( ( a p b ) e. g
            /\ ( ( a p b ) p c ) = ( a p ( b p c ) ) )
            /\ E. e e. g A. a e. g ( e p a ) = a ) ) } @.
  @}
$)

  $( Declare the symbol for the monoid exponentiation. $)
  $c ^md $.

  $( Extend class notation with monoid exponentiation. $)
  clsg $a class ^md $.

  ${
    $d g f x y z $.
    $( Define the exponentiation of an element of a monoid.  Experimental.  I
       define exponentiation on a monoid (and not on a semi-group or a magma )
       because I need an identity element for the basis hypothesis and
       associativity for interesting properties such as the composite of two
       exponentiated elements. ` ZZ ` is used in ~ df-gx here I used ` NN0 `
       because the inverse is not defined in a monoid. $)
    df-expsg $a |- ^md = { <. g , f >. | ( g e. Mnd /\
     f = { <. <. x , y >. , z >. | ( ( x e. ran g /\ y e. NN0 ) /\
       z = if ( y = 0 , ( Id ` g ) ,
         ( ( g seq1 ( NN x. { x } ) ) ` y ) ) ) } ) } $.
  $}

  $c Action $. $( The clas of actions. $)

  $( Extend class notation to include actions. $)
  cact $a class Action $.

  ${
    $d f k v s r w $.
    $( Definition of an action law.  The action is the function ( k ^m ( v ^m
       v ).  Definitions equivalent through currying. $)
    df-act $a |- Action = { f | E. k E. v E. s ( ( k = ( Base ` f ) /\
     v = ( vbase ` f )
     /\ s = ( vsca ` f ) )
     /\ A. r e. k A. w e. v ( r s w ) e. v ) } $.
  $}

  $c GrpWOp $. $( The class of groups with operators. $)

  $( Extend class notation to include groups with operators. $)
  cgwo $a class GrpWOp $.

  $( The definition df-grpwop is not sound, since it has a free variable s.
     I commented out the definition. - NM 18-May-2014 $)
 $(
  @{
    @d a f k r s v w x @.
    @( Definition of a group with operators. @)
    df-grpwop @a |- GrpWOp = { f e. Action | ( E. k E. v E. a
      ( k = ( Base ` f ) /\ v = ( vbase ` f ) /\ a = ( vadd ` f ) )
        /\ { <. ( Base ` ndx ) , v >. , <. ( +g ` ndx ) , a >. } e. Grp
        /\ A. r e. k A. x e. v A. w e. v
              ( r s ( w a x ) ) = ( ( r s w ) a ( r s x ) ) ) } @.
  @}
 $)

