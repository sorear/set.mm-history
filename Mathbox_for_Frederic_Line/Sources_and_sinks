$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
              Sources and sinks
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c Source $.

  $( Extend class notation with the class of all sources. $)
  csrce $a class Source $.

  ${
    $d c i s x y $.
    $( A source is a family ` s ` of morphims indexed by a set ` i ` which all
       have the same domain ` d ` .  Joy of Cats, def. 10.1, p. 169.
       Experimental. $)
    df-source $a |- Source = ( c e. Cat , i e. _V |-> { s | ( s : i -->
      dom ( dom_ ` c ) /\ A. x e. i A. y e. i ( ( dom_ ` c ) ` ( s ` x )
      ) = ( ( dom_ ` c ) ` ( s ` y ) ) ) } ) $.
  $}

  $c Sink $.

  $( Extend class notation with the class of all sinks. $)
  csnk $a class Sink $.

  ${
    $d c i f x y $.
    $( A sink is a family of morphims indexed by a set ` x ` which all have the
       same codomain.  Joy of Cats, def. 10.62, p. 184.  Experimental. $)
    df-sink $a |- Sink = ( c e. Cat , i e. _V |-> { f | ( f : i --> dom
      ( dom_ ` c ) /\ A. x e. i A. y e. i ( ( cod_ ` c ) ` ( f ` x ) ) =
      ( ( cod_ ` c ) ` ( f ` y ) ) ) } ) $.
  $}

  $c Natural $.

  $( Extend class notation with the class of all natural sources. $)
  cntrl $a class Natural $.

  ${
    $d i c d s m $.
    $( Let ` d e. ( Func `` <. i , c >. ) ` be a diagram, a source indexed by
       the objects of ` i ` is said to be natural for the diagram provided that
       each morphism ` m ` of ` i ` and the morphisms of the source connected
       to the domain and codomain of ` m ` commute.  Let recall that a diagram
       is simply a functor ` ( Func `` <. i , c >. ) ` except one uses it as an
       indexed family of objects or morphisms of ` c ` .  Joy of Cats, def
       11.3, (1) p. 193.  Experimental. $)
    df-natur $a |- Natural = ( i e. Cat , c e. Cat |-> ( d e. ( Func `
      <. i , c >. ) |-> { s e. ( Source ` <. c , dom ( id_ ` i ) >. ) |
      A. m e. dom ( dom_ ` i ) ( ( s ` ( ( dom_ ` i ) ` m ) ) ( o_ ` c ) (
      d ` m ) ) = ( s ` ( ( cod_ ` i ) ` m ) ) } ) ) $.
  $}

