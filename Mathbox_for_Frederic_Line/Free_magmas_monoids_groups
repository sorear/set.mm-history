$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
              Free magmas, monoids, groups
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c Str $.
  $c Strx $.
  $c len $.
  $c conc $.
  $c str $.

  $( Extend class notation with the class of all strings. $)
  cstr $a class Str $.

  $( Extend class notation with the class of all strings of a given size . $)
  cstrx $a class Strx $.

  $( Extend class notation to include the length function. $)
  clen $a class len $.

  $( Extend class notation to include the concatenation function. $)
  cconc $a class conc $.

  $( Extend class notation to include the str function. $)
  cstr2 $a class str $.


  ${
    $( ` ( str `` x ) ` is a recursive function whose value is the set of all
       the strings of size n over the alphabet ` x ` . $)
    df-str $a |- str = { <. x , y >. | y = |^| { f | ( f Fn NN /\
      ( f ` 0 ) = x /\
      A. n e. NN ( f ` ( n + 1 ) ) = ( x X. ( f ` n ) ) ) } } $.
  $}

  ${
    $( Strings of size ` x ` over an alphabet ` y ` .  A string is represented
       using ordered pairs.  For instance ` <. <. 1 , 2 >. , 3 >. ` is a string
       of size 3 over the alphabet ` { 1 , 2 , 3 } ` . $)
    df-strx $a |- Strx = { <. <. x , y >. , z >. | ( x e. NN /\
      z = U_ p e. ( 1 (,) ( x - 1 ) ) ( ( ( str ` y ) ` p )
            X. ( ( str ` y ) ` ( n - p ) ) ) ) } $.
  $}

  ${
    $( Strings of any size over an alphabet ` y ` . see fnopabg $)
    df-str2 $a |- Str = { <. y , z >. |
       z = U_ x e. NN ( Strx ` <. x , y >. ) } $.
  $}

  ${
    $( Concatenation of strings. $)
    df-conc $a |- conc = { <. <. p , q >. , r >. | r = <. p , q >. } $.
  $}

