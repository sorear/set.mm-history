$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
              Linear temporal logic
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c [.] $. $( A box. $)
  $c <> $. $( A diamond. $)
  $c () $. $( A circle. $)
  $c until $. $( Until. $)


  $( An always true proposition is well formed. $)
  wbox $a wff [.] ph $.

  $( An eventually true proposition is well formed. $)
  wdia $a wff <> ph $.

  $( A proposition true in the next step is well formed. $)
  wcirc $a wff () ph $.

  $( The proposition " ` ph ` is true until ` ps ` is true " is well formed. $)
  wunt $a wff ( ph until ps ) $.

  $( If ` ( ph -> ps ) ` and ` ph ` always hold then ` ps ` always holds.

     Propositional Linear temporal logic (LTL) is a kind of modal logic.  It is
     composed of the axioms of classical logic plus the axioms ~ ax-ltl1 ,
     ~ ax-ltl2 , ~ ax-ltl3 , ax-ltl4 , ~ ax-lmp , and ~ ax-nmp .  In classical
     logic, propositions don't depend on the time.  In LTL the "world"
     evolves.  We will imagine the world as a sequence of states with a first
     state and future states.  Instead of state I will also use the term "step"
     to emphasize that LTL is used to formalize the evolution of process in a
     computer.  A proposition that is true in one state of the "world" may be
     false in the next one.  The proposition ` [.] ph ` means ` ph ` is true in
     every state of the world, in the first state as well as in the future
     states.  It is read " ` ph ` is always true " or " ` ph ` always holds ".
     The proposition ` () ph ` means ` ph ` is true in the next state of the
     world.  The proposition ` <> ph ` means that ` ph ` is true in one state
     of the world at least but we don't know exactly which one.  It can be the
     first state, it can be a future state.  It is read " ` ph ` is eventually
     true " or " ` ph ` eventually holds".  When no operator is used in front
     of a proposition, it means that ` ph ` is unconditionnaly true or that it
     is true in the current state ( depending on the context). ` ph until ps `
     means ` ph ` is true in every state of the world until ` ps ` is true. $)
  ax-ltl1 $a |- ( [.] ( ph -> ps ) -> ( [.] ph -> [.] ps ) ) $.

  $( ` ph ` doesn't hold in the next step iff in the next step ` -. ph `
     holds. $)
  ax-ltl2 $a |- ( -. () ph <-> () -. ph ) $.

  $( If, in the next step, ` ph -> ps ` and ` ph ` hold then, in the next step,
     ` ps ` holds. $)
  ax-ltl3 $a |- ( () ( ph -> ps ) -> ( () ph -> () ps ) ) $.

  $( Suppose that it is always true that if ` ph ` is true in the current step
     then ` ph ` is true in the next step.  Suppose that ` ph ` is true in the
     first step.  Then ` ph ` is always true. $)
  ax-ltl4 $a |- ( ( [.] ( ph -> () ph ) /\ ph ) -> [.] ph ) $.

  ${
    ax-lmp.1 $e |- ph $.
    $( If ` ph ` is a theorem then it always holds. $)
    ax-lmp $a |- [.] ph $.
  $}

  ${
    ax-nmp.1 $e |- ph $.
    $( If ` ph ` is a theorem then it holds in the next step. $)
    ax-nmp $a |- () ph $.
  $}

  $( ` ph ` eventually holds iff it is not true that ` -. ph ` always holds. $)
  df-dia $a |- ( <> ph <-> -. [.] -. ph ) $.

  ${
    impbox.1 $e |- ( ph -> ps ) $.
    $( If ` ph -> ps ` is unconditionally true and if ` ph ` is always true
       then ` ps ` is always true.  (Contributed by FL, 22-Feb-2011.) $)
    impbox $p |- ( [.] ph -> [.] ps ) $=
      ( wi wbox ax-lmp ax-ltl1 ax-mp ) ABDZEAEBEDICFABGH $.
      $( [22-Feb-2011] $)
  $}

  ${
    bibox.1 $e |- ( ph <-> ps ) $.
    $( If ` ph <-> ps ` is unconditionally true then ` ph ` is always true is
       equivalent to ` ps ` is always true.  (Contributed by FL,
       22-Feb-2011.) $)
    bibox $p |- ( [.] ph <-> [.] ps ) $=
      ( wbox biimpi impbox biimpri impbii ) ADBDABABCEFBAABCGFH $.
      $( [22-Feb-2011] $)
  $}

  ${
    impxt.1 $e |- ( ph -> ps ) $.
    $( If ` ph -> ps ` holds unconditionally and if ` ph ` holds in the next
       state then ` ps ` holds in the next state.  (Contributed by FL,
       20-Mar-2011.) $)
    impxt $p |- ( () ph -> () ps ) $=
      ( wi wcirc ax-nmp ax-ltl3 ax-mp ) ABDZEAEBEDICFABGH $.
      $( [20-Mar-2011] $)
  $}

  ${
    binxt.1 $e |- ( ph <-> ps ) $.
    $( If ` ph <-> ps ` holds unconditionally then ` ph ` holds in the next
       state of the world iff ` ps ` holds in the next state.  (Contributed by
       FL, 20-Mar-2011.) $)
    binxt $p |- ( () ph <-> () ps ) $=
      ( wcirc biimpi impxt biimpri impbii ) ADBDABABCEFBAABCGFH $.
      $( [20-Mar-2011] $)
  $}
  $( ` ( ph \/ ps ) ` holds in the next step iff ` ph ` holds in the next step
     or ` ps ` holds in the next step.  (Contributed by FL, 20-Mar-2011.)  (The
     proof was shortened by Andrew Salmon, 9-Jul-2011.) $)
  nxtor $p |- ( () ( ph \/ ps ) <-> ( () ph \/ () ps ) ) $=
    ( wo wcirc wn ax-ltl3 df-or binxt ax-ltl2 imbi1i 3imtr4i orrd orc impxt olc
    wi jaoi impbii ) ABCZDZADZBDZCTUAUBAEZBPZDUCDZUBPTUAEZUBPUCBFSUDABGHUFUEUBA
    IJKLUATUBASABMNBSBAONQR $.
    $( [9-Jul-2011] $) $( [20-Mar-2011] $)

  $( ` ( ph /\ ps ) ` holds in the next step iff ` ph ` holds in the next step
     and ` ps ` holds in the next step.  (Contributed by FL, 20-Mar-2011.)
     (The proof was shortened by Andrew Salmon, 9-Jul-2011.) $)
  nxtand $p |- ( () ( ph /\ ps ) <-> ( () ph /\ () ps ) ) $=
    ( wa wcirc simpl impxt simpr jca wi pm3.2 ax-ltl3 syl imp impbii ) ABCZDZAD
    ZBDZCPQROAABEFOBABGFHQRPQBOIZDRPIASABJFBOKLMN $.
    $( [9-Jul-2011] $) $( [20-Mar-2011] $)

  $( ` ph ` holds now and will always hold in the future iff it is not true
     that ` -. ph ` holds now or sometimes in the future.  (Contributed by FL,
     22-Feb-2011.)  (The proof was shortened by Andrew Salmon, 9-Jul-2011.) $)
  boxeq $p |- ( [.] ph <-> -. <> -. ph ) $=
    ( wn wdia wbox df-dia notnot bicomi bibox notbii bitri con2bii ) ABZCZADZML
    BZDZBNBLEPNOAAOAFGHIJK $.
    $( [9-Jul-2011] $) $( [22-Feb-2011] $)

  ${
    bidia.1 $e |- ( ph <-> ps ) $.
    $( If ` ph <-> ps ` holds then ` ph ` eventually holds iff ` ps `
       eventually holds.  (Contributed by FL, 20-Mar-2011.) $)
    bidia $p |- ( <> ph <-> <> ps ) $=
      ( wn wbox wdia notbii bibox df-dia 3bitr4i ) ADZEZDBDZEZDAFBFLNKMABCGHGAI
      BIJ $.
      $( [20-Mar-2011] $)
  $}

  $( It's false that ` ph ` eventually holds iff ` -. ph ` always holds.
     (Contributed by FL, 20-Mar-2011.) $)
  notev $p |- ( -. <> ph <-> [.] -. ph ) $=
    ( wn wbox wdia df-dia bicomi con1bii ) ABCZADZIHBAEFG $.
    $( [20-Mar-2011] $)

  $( It's false that ` ph ` always holds iff ` -. ph ` eventually holds.
     (Contributed by FL, 20-Mar-2011.) $)
  notal $p |- ( -. [.] ph <-> <> -. ph ) $=
    ( wn wdia wbox boxeq bicomi con1bii ) ABCZADZIHBAEFG $.
    $( [20-Mar-2011] $)

  $( ` ph ` holds until ` ps ` iff ` ps ` holds in the current step or ` ph `
     holds in the current step and in the next step ` ph ` holds until
     ` ps ` . $)
  ax-ltl5 $a |- ( ( ph until ps ) <->
   ( ps \/ ( ph /\ () ( ph until ps ) ) ) ) $.

  $( If ` ph ` holds until ` ps ` then eventually ` ps ` holds. $)
  ax-ltl6 $a |- ( ( ph until ps ) -> <> ps ) $.
  $( If ` ps ` doesn't hold in the first step and ` ph ` holds until ` ps `
     then ` ph ` holds.  (Contributed by FL, 20-Mar-2011.)  (The proof was
     shortened by Andrew Salmon, 9-Jul-2011.) $)
  nopsthph $p |- ( ( -. ps /\ ( ph until ps ) ) -> ph ) $=
    ( wunt wn wcirc wa wo wi ax-ltl5 simpl orim2i ord sylbi impcom ) ABCZBDZAOB
    AOEZFZGZPAHABISBARABAQJKLMN $.
    $( [9-Jul-2011] $) $( [20-Mar-2011] $)

  $( If ` ph ` doesn't hold in the current step and ` ph ` holds until ` ps `
     then ` ps ` holds in the current step.  (Contributed by FL,
     20-Mar-2011.) $)
  phthps $p |- ( ( -. ph /\ ( ph until ps ) ) -> ps ) $=
    ( wunt wn nopsthph expcom con1d impcom ) ABCZADBIBABDIAABEFGH $.
    $( [20-Mar-2011] $)

  $( Eventually ` ph ` expressed with the ` until ` operator.  (Contributed by
     FL, 20-Mar-2011.) $)
  evpexun $p |- ( <> ph <-> ( T. until ph ) ) $=
    ( wdia wtru wunt wn wbox wcirc wa wo orc ax-ltl5 sylibr con3i notev 3imtr4i
    impbox con4i wi bibox sylbi trcrm biimpri olcd ax-lmp df-dia con34b ax-ltl2
    imbi2i ax-ltl4 ex con1d com12 mpi syl ax-ltl6 impbii ) ABZCADZUQURBZURUSUQU
    REZFZAEZFUSEUQEUTVBAURAACURGZHZIZURAVDJCAKZLMPURNANOQUSVCURRZFZURVGVCVEURVC
    VDAVDVCVCUAUBUCVFLUDUSVAEZVHURRURUEVHVIURVHURVAVHUTVCEZRZFZUTVARZVGVKVCURUF
    SVLUTUTGZRZFZVMVKVOVJVNUTURUGUHSVPUTVAUTUIUJTTUKULTUMUNCAUOUP $.
    $( [20-Mar-2011] $)

  $( ` ph ` always holds iff ` ph ` holds in the first step and always holds in
     the next step.  (Contributed by FL, 20-Mar-2011.) $)
  albineal $p |- ( [.] ph <-> ( ph /\ () [.] ph ) ) $=
    ( wbox wn wdia wtru wunt wcirc wa boxeq evpexun ax-ltl5 bitri notbii notnot
    wo ioran bicomi trcrm ax-ltl2 3bitri bitr2i binxt anbi12i ) ABZACZDZCZUEEEU
    EFZGZHZOZCZAUDGZHZAIZUFUKUFUHUKUEJZEUEKLMULUECZUJCZHUNUEUJPUQAURUMAUQANQURU
    ICUHCZGUMUJUIUIRMUHSUSUDUDUGUSUOUFUHUPMUAUBTUCLT $.
    $( [20-Mar-2011] $)

  $( If ` ph ` always holds, it holds in the first step.  (Contributed by FL,
     20-Mar-2011.) $)
  alneal1 $p |- ( [.] ph -> ph ) $=
    ( wbox wcirc albineal simplbi ) ABZAFCADE $.
    $( [20-Mar-2011] $)

  $( If ` ph ` always holds, it always holds in the next step.  (Contributed by
     FL, 20-Mar-2011.) $)
  alneal2 $p |- ( [.] ph -> () [.] ph ) $=
    ( wbox wcirc albineal simprbi ) ABZAFCADE $.
    $( [20-Mar-2011] $)

  $( If ` ph ` always holds, it holds in the next step.  (Contributed by FL,
     20-Mar-2011.) $)
  alne $p |- ( [.] ph -> () ph ) $=
    ( wbox wcirc alneal2 alneal1 impxt syl ) ABZHCACADHAAEFG $.
    $( [20-Mar-2011] $)

  $( It is always true that ` ph ` always holds iff ` ph ` always holds.
     (Contributed by FL, 20-Mar-2011.) $)
  alalifal $p |- ( [.] [.] ph <-> [.] ph ) $=
    ( wbox alneal1 wcirc wi alneal2 a1i impbox ax-ltl4 mpancom impbii ) ABZBZLL
    CLLDEZBLMANNAAFGHLIJK $.
    $( [20-Mar-2011] $)

  $( It is eventually true that ` ph ` eventually holds iff ` ph ` eventually
     holds.  (Contributed by FL, 20-Mar-2011.)  (The proof was shortened by
     Andrew Salmon, 9-Jul-2011.) $)
  evevifev $p |- ( <> <> ph <-> <> ph ) $=
    ( wdia wn wbox notev bibox alalifal bitri notbii df-dia 3bitr4i ) ABZCZDZCA
    CZDZCLBLNPNPDPMPAEFOGHILJAJK $.
    $( [9-Jul-2011] $) $( [20-Mar-2011] $)

  $( If ` ph ` is always true then it is always true that ` ph ` holds in the
     next step.  (Contributed by FL, 20-Mar-2011.) $)
  althalne $p |- ( [.] ph -> [.] () ph ) $=
    ( wbox wcirc alalifal alne impbox sylbir ) ABZHBACZBADHIAEFG $.
    $( [20-Mar-2011] $)

  $( ` T. ` is true in every step.  (Contributed by FL, 20-Mar-2011.) $)
  trtrst $p |- [.] T. $=
    ( wph wtru wbox wn wo exmid ax-lmp altdftru bibox mpbir ) BCAADEZCKAFGBKAHI
    J $.
    $( [20-Mar-2011] $)

  $( It's true that ` ph ` is true until true is true.  (Contributed by FL,
     27-Feb-2011.) $)
  unttr $p |- ( ph until T. ) $=
    ( wtru wunt wcirc wa wo wbox trtrst alneal1 ax-mp orci ax-ltl5 mpbir ) ABCZ
    BANDEZFBOBGBHBIJKABLM $.
    $( [20-Mar-2011] $) $( [27-Feb-2011] $)

