$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
              Matrices
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c +m $.
  $c xm $.
  $c .m $.

  $( Addition of matrices. $)
  cmmat $a class +m $.

  $( Scalar multiplication of matrices. $)
  csmat $a class .m $.

  $( Multiplication of matrices. $)
  cxmat $a class xm $.

  ${
    $d g h m n o j k x y $.
    $( Matrix addition.  Meaningful if ` g ` is a ` Magma ` (a binary internal
       operation) at least.  Experimental. $)
    df-amat $a |- +m = { <. g , h >. | h = { <. <. m , n >. , o >. | E. j e. NN
       E. k e. NN ( m : ( ( 1 ... j ) X. ( 1 ... k ) ) --> dom dom g /\
        n : ( ( 1 ... j ) X. ( 1 ... k ) ) --> dom dom g /\
        o = ( x e. ( 1 ... j ) , y e. ( 1 ... k )
              |-> ( ( m ` <. x , y >. ) g ( n ` <. x , y >. ) ) ) ) } } $.
  $}

  ${
    $d g h m a o j k x y $.
    $( Matrix left scalar multiplication.  Meaningful if ` g ` is a binary
       external operation.  Experimental. $)
    df-smat $a |- .m = { <. g , h >. | h = { <. <. m , a >. , o >. | E. j e. NN
       E. k e. NN ( m : ( ( 1 ... j ) X. ( 1 ... k ) ) --> ran dom g /\
         a e. dom dom g /\ o = ( x e. ( 1 ... j ) , y e. ( 1 ... k )
           |-> ( a g ( m ` <. x , y >. ) ) ) ) } } $.
  $}

  ${
    $d g h f m n o j k l x y z $.
    $( Matrix multiplication.  Meaningful if ` <. g , h >. ` is a ring at
       least. ` prod3_ ` here should be ` sum_ ` (to be traditional).  But in
       set.mm ` sum_ ` is ` CC ` oriented and has a limit definition embedded
       and thus doesn't fit the needs of this generic definition.
       Experimental. $)
    df-mmat $a |- xm = { <. <. g , h >. , f >. |
      f = { <. <. m , n >. , o >. | E. j e. NN E. k e. NN E. l e. NN (
          m : ( ( 1 ... j ) X. ( 1 ... k ) ) --> dom dom g /\
          n : ( ( 1 ... k ) X. ( 1 ... l ) ) --> dom dom g /\
          o = ( x e. ( 1 ... j ) , y e. ( 1 ... l )
            |-> prod3_ z e. ( 1 ... k ) g
            ( ( m ` <. x , z >. ) h ( n ` <. z , y >. ) ) ) ) } } $.
  $}

