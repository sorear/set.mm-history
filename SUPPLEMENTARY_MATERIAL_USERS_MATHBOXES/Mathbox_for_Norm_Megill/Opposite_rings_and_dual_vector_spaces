$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
     Opposite rings and dual vector spaces
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c LDual $.

  $( Extend class notation with left dualvector space. $)
  cld $a class LDual $.

  ${
    $d v k f g $.
    $( Define the (left) dual of a left vector space (or module) in which the
       vectors are functionals.  In many texts, this is defined as a right
       vector space, but by reversing the multiplication we achieve a left
       vector space, as is done in definition of dual vector space in
       [Holland95] p. 218.  This allows us to reuse our existing collection of
       left vector space theorems.  The restriction on ` oF ( +g `` v ) `
       allows it to be a set; see ~ ofmres .  Note the operation reversal in
       the scalar product to allow us to use the original scalar ring instead
       of the ` oppR ` ring, for convenience. $)
    df-ldual $a |- LDual = ( v e. _V |->
      ( { <. ( Base ` ndx ) , ( LFnl ` v ) >. ,
          <. ( +g ` ndx ) , ( oF ( +g ` ( Scalar ` v ) )
                 |` ( ( LFnl ` v ) X. ( LFnl ` v ) ) ) >. ,
          <. ( Scalar ` ndx ) , ( oppR ` ( Scalar ` v ) ) >. } u. {
          <. ( vsca ` ndx ) , ( k e. ( Base ` ( Scalar ` v ) ) ,
             f e. ( LFnl ` v ) |-> ( f oF ( .r ` ( Scalar ` v ) )
               ( ( Base ` v ) X. { k } ) ) ) >. } ) ) $.
  $}

  ${
    $d w F $.  $d w O $.  $d w P $.  $d w S $.  $d f k w W $.
    ldualset.v $e |- V = ( Base ` W ) $.
    ldualset.a $e |- A = ( +g ` R ) $.
    ldualset.p $e |- P = ( oF A |` ( F X. F ) ) $.
    ldualset.f $e |- F = ( LFnl ` W ) $.
    ldualset.d $e |- D = ( LDual ` W ) $.
    ldualset.r $e |- R = ( Scalar ` W ) $.
    ldualset.k $e |- K = ( Base ` R ) $.
    ldualset.t $e |- T = ( .r ` R ) $.
    ldualset.o $e |- O = ( oppR ` R ) $.
    ldualset.s $e |- S = ( k e. K , f e. F |-> ( f oF T ( V X. { k } ) ) ) $.
    ldualset.w $e |- ( ph -> W e. X ) $.
    $( Define the (left) dual of a left vector space (or module) in which the
       vectors are functionals.  In many texts, this is defined as a right
       vector space, but by reversing the multiplication we achieve a left
       vector space, as is done in definition of dual vector space in
       [Holland95] p. 218.  This allows us to reuse our existing collection of
       left vector space theorems.  Note the operation reversal in the scalar
       product to allow us to use the original scalar ring instead of the
       ` oppR ` ring, for convenience. $)
    ldualset $p |- ( ph -> D = ( { <. ( Base ` ndx ) , F >. ,
         <. ( +g ` ndx ) , P >. , <. ( Scalar ` ndx ) , O >. }
       u. { <. ( vsca ` ndx ) , S >. } ) ) $=
      ( vw wcel cvv cnx cbs cfv cop cplusg csca ctp cvsca csn cun wceq elex cld
      cv clfn cof cxp cres coppr cmulr co cmpt2 fveq2 syl6eqr opeq2d fveq2d syl
      xpeq12d reseq12d tpeq123d eqidd xpeq1d oveq123d mpt2eq123dv sneqd uneq12d
      ofeq df-ldual tpex snex unex fvmpt syl5eq 3syl ) ANOUHNUIUHZCUJUKULZJUMZU
      JUNULZDUMZUJUOULZLUMZUPZUJUQULZFUMZURZUSZUTUFNOVAWNCNVBULXETUGNWOUGVCZVDU
      LZUMZWQXFUOULZUNULZVEZXGXGVFZVGZUMZWSXIVHULZUMZUPZXBIHXIUKULZXGHVCZXFUKUL
      ZIVCURZVFZXIVIULZVEZVJZVKZUMZURZUSXEUIVBXFNUTZXQXAYHXDYIXHWPXNWRXPWTYIXGJ
      WOYIXGNVDULJXFNVDVLSVMZVNYIXMDWQYIXMBVEZJJVFZVGDYIXKYKXLYLYIXJBUTXKYKUTYI
      XJEUNULBYIXIEUNYIXINUOULEXFNUOVLUAVMZVOQVMXJBWFVPYIXGJXGJYJYJVQVRRVMVNYIX
      OLWSYIXOEVHULLYIXIEVHYMVOUDVMVNVSYIYGXCYIYFFXBYIYFIHKJXSMYAVFZGVEZVJZVKFY
      IIHXRXGYEKJYPYIXREUKULKYIXIEUKYMVOUBVMYJYIXSXSYBYNYDYOYIYCGUTYDYOUTYIYCEV
      IULGYIXIEVIYMVOUCVMYCGWFVPYIXSVTYIXTMYAYIXTNUKULMXFNUKVLPVMWAWBWCUEVMVNWD
      WEUGHIWGXAXDWPWRWTWHXCWIWJWKWLWM $.
      $( [18-Oct-1014] $)
  $}

  ${
    $d f k W $.
    ldualvbase.f $e |- F = ( LFnl ` W ) $.
    ldualvbase.d $e |- D = ( LDual ` W ) $.
    ldualvbase.v $e |- V = ( Base ` D ) $.
    ldualvbase.w $e |- ( ph -> W e. X ) $.
    $( The vectors of a dual space are functionals of the original space. $)
    ldualvbase $p |- ( ph -> V = F ) $=
      ( vk vf cbs cfv cnx cop cplusg csca eqid cvv cof cxp cres coppr ctp cvsca
      cv csn cmulr co cmpt2 cun ldualset fveq2d wcel wceq clfn eqeltri lmodbase
      fvex ax-mp 3eqtr4g ) ABMNOMNCPOQNERNZQNZUACCUBUCZPORNVCUDNZPUEOUFNKLVCMNZ
      CLUGEMNZKUGUHUBVCUINZUAUJUKZPUHULZMNZDCABVKMAVDBVEVCVJVILKCVGVFVHEFVHSVDS
      VESGHVCSVGSVISVFSVJSJUMUNICTUOCVLUPCEUQNTGEUQUTURCVEVJVFVKTVKSUSVAVB $.
      $( [18-Oct-1014] $)
  $}

  ${
    $d f k W $.
    ldualvadd.f $e |- F = ( LFnl ` W ) $.
    ldualvadd.r $e |- R = ( Scalar ` W ) $.
    ldualvadd.a $e |- A = ( +g ` R ) $.
    ldualvadd.d $e |- D = ( LDual ` W ) $.
    ldualvadd.p $e |- P = ( +g ` D ) $.
    ldualvadd.w $e |- ( ph -> W e. X ) $.
    ${
      ldualfvadd.q $e |- Q = ( oF A |` ( F X. F ) ) $.
      $( Vector addition in the dual of a vector space. $)
      ldualfvadd $p |- ( ph -> P = Q ) $=
        ( cplusg cfv eqid cvv vk vf cnx cbs cop csca coppr ctp cvsca cv csn cxp
        cmulr cof co cmpt2 cun ldualset fveq2d wcel wceq cres clfn fvex eqeltri
        id ofmresex ax-mp lmodplusg 3eqtr4g ) ACQRUCUDRGUEUCQREUEUCUFRFUGRZUEUH
        UCUIRUAUBFUDRZGUBUJHUDRZUAUJUKULFUMRZUNUOUPZUEUKUQZQRZDEACVPQABCEFVOVNU
        BUAGVLVKVMHIVMSLPJMKVLSVNSVKSVOSOURUSNETUTEVQVAEBUNGGULVBZTPGTUTZVRTUTG
        HVCRTJHVCVDVEVSGGBTTVSVFZVTVGVHVEGEVOVKVPTVPSVIVHVJ $.
        $( [21-Oct-1014] $)
    $}

    ldualvadd.g $e |- ( ph -> G e. F ) $.
    ldualvadd.h $e |- ( ph -> H e. F ) $.
    $( Vector addition in the dual of a vector space. $)
    ldualvadd $p |- ( ph -> ( G P H ) = ( G oF A H ) ) $=
      ( co cof cxp cres eqid ldualfvadd oveqd ofmresval eqtrd ) AGHDSGHBTZFFUAU
      BZSGHUHSADUIGHABCDUIEFIJKLMNOPUIUCUDUEAFFBGHQRUFUG $.
      $( [21-Oct-1014] $)
  $}

  ${
    ldualvaddcl.f $e |- F = ( LFnl ` W ) $.
    ldualvaddcl.d $e |- D = ( LDual ` W ) $.
    ldualvaddcl.p $e |- P = ( +g ` D ) $.
    ldualvaddcl.w $e |- ( ph -> W e. LMod ) $.
    ldualvaddcl.g $e |- ( ph -> G e. F ) $.
    ldualvaddcl.h $e |- ( ph -> H e. F ) $.
    $( The scalar product operation value is a functional. $)
    ldualvaddcl $p |- ( ph -> ( G P H ) e. F ) $=
      ( co csca cfv cplusg cof clmod eqid ldualvadd eqid1 lfladdcl eqeltrd ) AE
      FCNEFGOPZQPZRNDAUFBCUEDEFGSHUETZUFTIJKLMUAAUFUEDEFGUGUFUBHKLMUCUD $.
      $( [21-Oct-1014] $)
  $}

  ${
    $d f k W $.
    ldualsca.f $e |- F = ( Scalar ` W ) $.
    ldualsca.o $e |- O = ( oppR ` F ) $.
    ldualsca.d $e |- D = ( LDual ` W ) $.
    ldualsca.r $e |- R = ( Scalar ` D ) $.
    ldualsca.w $e |- ( ph -> W e. X ) $.
    $( The ring of scalars of the dual of a vector space. $)
    ldualsca $p |- ( ph -> R = O ) $=
      ( vk vf csca cfv cnx cbs cop eqid clfn cplusg cof cxp cres cvsca cv cmulr
      ctp csn co cmpt2 cun ldualset fveq2d wcel wceq coppr fvex eqeltri lmodsca
      cvv ax-mp 3eqtr4g ) ABOPQRPFUAPZSQUBPDUBPZUCVEVEUDUEZSQOPESUIQUFPMNDRPZVE
      NUGFRPZMUGUJUDDUHPZUCUKULZSUJUMZOPZCEABVLOAVFBVGDVKVJNMVEVHEVIFGVITVFTVGT
      VETJHVHTVJTIVKTLUNUOKEVBUPEVMUQEDURPVBIDURUSUTVEVGVKEVLVBVLTVAVCVD $.
      $( [18-Oct-1014] $)
  $}

  ${
    ldualsbase.f $e |- F = ( Scalar ` W ) $.
    ldualsbase.l $e |- L = ( Base ` F ) $.
    ldualsbase.d $e |- D = ( LDual ` W ) $.
    ldualsbase.r $e |- R = ( Scalar ` D ) $.
    ldualsbase.k $e |- K = ( Base ` R ) $.
    ldualsbase.w $e |- ( ph -> W e. V ) $.
    $( Base set of scalar ring for the dual of a vector space. $)
    ldualsbase $p |- ( ph -> K = L ) $=
      ( coppr cfv cbs eqid ldualsca fveq2d syl5eq opprbas syl6eqr ) AEDOPZQPZFA
      ECQPUEMACUDQABCDUDHGIUDRZKLNSTUAFDUDUFJUBUC $.
      $( [24-Oct-1014] $)
  $}

  ${
    ldualsadd.f $e |- F = ( Scalar ` W ) $.
    ldualsadd.q $e |- Q = ( +g ` F ) $.
    ldualsadd.d $e |- D = ( LDual ` W ) $.
    ldualsadd.r $e |- R = ( Scalar ` D ) $.
    ldualsadd.p $e |- P = ( +g ` R ) $.
    ldualsadd.w $e |- ( ph -> W e. V ) $.
    $( Scalar addition for the dual of a vector space. $)
    ldualsadd $p |- ( ph -> P = Q ) $=
      ( coppr cfv cplusg eqid ldualsca fveq2d syl5eq oppradd syl6eqr ) ACFOPZQP
      ZDACEQPUEMAEUDQABEFUDHGIUDRZKLNSTUADFUDUFJUBUC $.
      $( [24-Oct-1014] $)
  $}

  ${
    ldualsmul.f $e |- F = ( Scalar ` W ) $.
    ldualsmul.k $e |- K = ( Base ` F ) $.
    ldualsmul.t $e |- T = ( .r ` F ) $.
    ldualsmul.o $e |- O = ( oppR ` F ) $.
    ldualsmul.d $e |- D = ( LDual ` W ) $.
    ldualsmul.r $e |- R = ( Scalar ` D ) $.
    ldualsmul.m $e |- M = ( .r ` R ) $.
    ldualsmul.w $e |- ( ph -> W e. V ) $.
    ldualsmul.x $e |- ( ph -> X e. K ) $.
    ldualsmul.y $e |- ( ph -> Y e. K ) $.
    $( Scalar multiplication for the dual of a vector space. $)
    ldualsmul $p |- ( ph -> ( X M Y ) = ( Y T X ) ) $=
      ( co cmulr cfv ldualsca fveq2d syl5eq oveqd wcel wceq eqid opprmul eqtr4d
      syl2anc ) AKLGUCKLHUDUEZUCZLKDUCZAGUPKLAGCUDUEUPSACHUDABCEHJIMPQRTUFUGUHU
      IAKFUJLFUJURUQUKUAUBFEDUPHKLNOPUPULUMUOUN $.
      $( [19-Oct-1014] $)
  $}

  ${
    $d f k F $.  $d f k K $.  $d f k W $.
    ldualfvs.f $e |- F = ( LFnl ` W ) $.
    ldualfvs.v $e |- V = ( Base ` W ) $.
    ldualfvs.r $e |- R = ( Scalar ` W ) $.
    ldualfvs.k $e |- K = ( Base ` R ) $.
    ldualfvs.t $e |- T = ( .r ` R ) $.
    ldualfvs.d $e |- D = ( LDual ` W ) $.
    ldualfvs.s $e |- S = ( vsca ` D ) $.
    ldualfvs.w $e |- ( ph -> W e. Y ) $.
    ${
      ldualfvs.m $e |- M
           = ( k e. K , f e. F |-> ( f oF T ( V X. { k } ) ) ) $.
      $( Scalar product operation for the dual of a vector space. $)
      ldualfvs $p |- ( ph -> S = M ) $=
        ( cvsca cfv cnx cbs cop cplusg cof cxp cres csca coppr ctp cv csn cmpt2
        co cun eqid ldualset fveq2d wcel wceq fvex eqeltri clfn mpt2ex lmodvsca
        cvv ax-mp eqtri 3eqtr4g ) ABUCUDUEUFUDHUGUEUHUDCUHUDZUIHHUJUKZUGUEULUDC
        UMUDZUGUNUEUCUDGFIHFUOKGUOUPUJEUIURZUQZUGUPUSZUCUDZDJABVSUCAVNBVOCVREFG
        HIVPKLMOVNUTVOUTNSPQRVPUTVRUTUAVAVBTJVRVTUBVRVJVCVRVTVDGFIHVQICUFUDVJQC
        UFVEVFHLVGUDVJNLVGVEVFVHHVOVRVPVSVJVSUTVIVKVLVM $.
        $( [18-Oct-1014] $)
    $}

    $d f G $.  $d f k T $.  $d f k V $.  $d f k X $.
    ldualvs.x $e |- ( ph -> X e. K ) $.
    ldualvs.g $e |- ( ph -> G e. F ) $.
    $( Scalar product operation value (which is a functional) for the dual of a
       vector space. $)
    ldualvs $p |- ( ph -> ( X S G ) = ( G oF T ( V X. { X } ) ) ) $=
      ( vk vf co cv csn cxp cof cmpt2 eqid ldualfvs oveqd wcel wceq sneq xpeq2d
      oveq2d oveq1 ovex ovmpt2 syl2anc eqtrd ) AKGDUEKGUCUDHFUDUFZIUCUFZUGZUHZE
      UIZUEZUJZUEZGIKUGZUHZVHUEZADVJKGABCDEUDUCFHVJIJLMNOPQRSTVJUKZULUMAKHUNGFU
      NVKVNUOUAUBUCUDKGHFVIVNVJVDVMVHUEVEKUOZVGVMVDVHVPVFVLIVEKUPUQURVDGVMVHUSV
      OGVMVHUTVAVBVC $.
      $( [18-Oct-1014] $)

    ldualvs.a $e |- ( ph -> A e. V ) $.
    $( Value of scalar product operation value for the dual of a vector
       space. $)
    ldualvsval $p |- ( ph -> ( ( X S G ) ` A ) = ( ( G ` A ) T X ) ) $=
      ( co cfv csn cxp cof ldualvs fveq1d wcel wceq cvv cbs fvex eqeltri a1i wf
      wfn lflf syl2anc ffn syl wa eqidd ofc2 mpdan eqtrd ) ABLHEUEZUFBHJLUGUHFU
      IUEZUFZBHUFZLFUEZABVJVKACDEFGHIJKLMNOPQRSTUAUBUCUJUKABJULZVLVNUMUDAJLVMFH
      UNIBJUNULAJKUOUFUNOKUOUPUQURUBAJIHUSZHJUTAKMULHGULVPUAUCDGHIJKMPQONVAVBJI
      HVCVDAVOVEVMVFVGVHVI $.
      $( [18-Oct-1014] $)
  $}

  ${
    ldualvscl.f $e |- F = ( LFnl ` W ) $.
    ldualvscl.r $e |- R = ( Scalar ` W ) $.
    ldualvscl.k $e |- K = ( Base ` R ) $.
    ldualvscl.d $e |- D = ( LDual ` W ) $.
    ldualvscl.s $e |- S = ( vsca ` D ) $.
    ldualvscl.w $e |- ( ph -> W e. LMod ) $.
    ldualvscl.x $e |- ( ph -> X e. K ) $.
    ldualvscl.g $e |- ( ph -> G e. F ) $.
    $( The scalar product operation value is a functional. $)
    ldualvscl $p |- ( ph -> ( X S G ) e. F ) $=
      ( co cfv eqid cbs csn cxp cmulr cof clmod ldualvs lflvscl eqeltrd ) AIFDR
      FHUASZIUBUCCUDSZUEREABCDUKEFGUJHIUFJUJTZKLUKTZMNOPQUGACIUKEFGUJHULKLUMJOQ
      PUHUI $.
      $( [18-Oct-1014] $)
  $}

  ${
    ldualvsass.f $e |- F = ( LFnl ` W ) $.
    ldualvsass.r $e |- R = ( Scalar ` W ) $.
    ldualvsass.k $e |- K = ( Base ` R ) $.
    ldualvsass.t $e |- T = ( .r ` R ) $.
    ldualvsass.d $e |- D = ( LDual ` W ) $.
    ldualvsass.s $e |- S = ( vsca ` D ) $.
    ldualvsass.w $e |- ( ph -> W e. LMod ) $.
    ldualvsass.x $e |- ( ph -> X e. K ) $.
    ldualvsass.y $e |- ( ph -> Y e. K ) $.
    ldualvsass.g $e |- ( ph -> G e. F ) $.
    $( Associative law for scalar product operation. $)
    ldualvsass $p |- ( ph -> ( ( Y T X ) S G ) = ( X S ( Y S G ) ) ) $=
      ( co cbs cfv csn cxp cof clmod eqid crg lmodrng syl rngcl syl3anc ldualvs
      wcel eqidd eqtrd lflvsass lflvscl eqcomd oveq2d ) AKJEUBZGDUBZJGIUCUDZKUE
      UFEUGZUBZDUBZJKGDUBZDUBZAVDVGVEJUEUFVFUBZVHAVDGVEVCUEUFVFUBZVKAVDVLVLABCD
      EFGHVEIVCUHLVEUIZMNOPQRACUJUPZKHUPJHUPVCHUPAIUHUPVNRCIMUKULTSHCEKJNOUMUNU
      AUOAVLUQURACEFGHVEIKJVMMNOLRTSUAUSURAVHVKABCDEFVGHVEIJUHLVMMNOPQRSACKEFGH
      VEIVMMNOLRUATUTUOVAURAVJVHAVIVGJDABCDEFGHVEIKUHLVMMNOPQRTUAUOVBVAUR $.
      $( [20-Oct-1014] $)
  $}

  ${
    ldualvsass2.f $e |- F = ( LFnl ` W ) $.
    ldualvsass2.r $e |- R = ( Scalar ` W ) $.
    ldualvsass2.k $e |- K = ( Base ` R ) $.
    ldualvsass2.d $e |- D = ( LDual ` W ) $.
    ldualvsass2.q $e |- Q = ( Scalar ` D ) $.
    ldualvsass2.t $e |- T = ( .r ` Q ) $.
    ldualvsass2.s $e |- S = ( vsca ` D ) $.
    ldualvsass2.w $e |- ( ph -> W e. LMod ) $.
    ldualvsass2.x $e |- ( ph -> X e. K ) $.
    ldualvsass2.y $e |- ( ph -> Y e. K ) $.
    ldualvsass2.g $e |- ( ph -> G e. F ) $.
    $( Associative law for scalar product operation, using operations from the
       dual space. $)
    ldualvsass2 $p |- ( ph -> ( ( X T Y ) S G ) = ( X S ( Y S G ) ) ) $=
      ( co cmulr cfv coppr clmod eqid ldualsmul oveq1d ldualvsass eqtrd ) AKLFU
      DZHEUDLKDUEUFZUDZHEUDKLHEUDEUDAUNUPHEABCUODIFDUGUFZUHJKLNOUOUIZUQUIPQRTUA
      UBUJUKABDEUOGHIJKLMNOURPSTUAUBUCULUM $.
      $( [20-Oct-1014] $)
  $}

  ${
    ldualvsdi1.f $e |- F = ( LFnl ` W ) $.
    ldualvsdi1.r $e |- R = ( Scalar ` W ) $.
    ldualvsdi1.k $e |- K = ( Base ` R ) $.
    ldualvsdi1.d $e |- D = ( LDual ` W ) $.
    ldualvsdi1.p $e |- P = ( +g ` D ) $.
    ldualvsdi1.s $e |- S = ( vsca ` D ) $.
    ldualvsdi1.w $e |- ( ph -> W e. LMod ) $.
    ldualvsdi1.x $e |- ( ph -> X e. K ) $.
    ldualvsdi1.g $e |- ( ph -> G e. F ) $.
    ldualvsdi1.h $e |- ( ph -> H e. F ) $.
    $( Distributive law for scalar product operation, using operations from the
       dual space. $)
    ldualvsdi1 $p |- ( ph
        -> ( X S ( G P H ) ) = ( ( X S G ) P ( X S H ) ) ) $=
      ( cplusg cfv cof cbs csn cxp cmulr clmod eqid ldualvs ldualvscl ldualvadd
      co oveq12d ldualvaddcl oveq1d eqid1 lflvsdi1 3eqtrd 3eqtr4rd ) AKGEUNZKHE
      UNZDUBUCZUDZUNGJUEUCZKUFUGZDUHUCZUDZUNZHVGVIUNZVEUNZVBVCCUNKGHCUNZEUNZAVB
      VJVCVKVEABDEVHFGIVFJKUILVFUJZMNVHUJZOQRSTUKABDEVHFHIVFJKUILVOMNVPOQRSUAUK
      UOAVDBCDFVBVCJUILMVDUJZOPRABDEFGIJKLMNOQRSTULABDEFHIJKLMNOQRSUAULUMAVNVMV
      GVIUNGHVEUNZVGVIUNVLABDEVHFVMIVFJKUILVOMNVPOQRSABCFGHJLOPRTUAUPUKAVMVRVGV
      IAVDBCDFGHJUILMVQOPRTUAUMUQAVDDVHFGHIVFJKVOMNVDURVPLRSTUAUSUTVA $.
      $( [21-Oct-1014] $)
  $}

  ${
    ldualvsdi2.f $e |- F = ( LFnl ` W ) $.
    ldualvsdi2.r $e |- R = ( Scalar ` W ) $.
    ldualvsdi2.a $e |- A = ( +g ` R ) $.
    ldualvsdi2.k $e |- K = ( Base ` R ) $.
    ldualvsdi2.d $e |- D = ( LDual ` W ) $.
    ldualvsdi2.p $e |- P = ( +g ` D ) $.
    ldualvsdi2.s $e |- S = ( vsca ` D ) $.
    ldualvsdi2.w $e |- ( ph -> W e. LMod ) $.
    ldualvsdi2.x $e |- ( ph -> X e. K ) $.
    ldualvsdi2.y $e |- ( ph -> Y e. K ) $.
    ldualvsdi2.g $e |- ( ph -> G e. F ) $.
    $( Reverse distributive law for scalar product operation, using operations
       from the dual space. $)
    ldualvsdi2 $p |- ( ph
        -> ( ( X A Y ) S G ) = ( ( X S G ) P ( Y S G ) ) ) $=
      ( cbs cfv csn cxp cmulr clmod eqid wcel lmodacl syl3anc ldualvs lflvsdi2a
      co cof ldualvscl ldualvadd oveq12d eqtr2d 3eqtrd ) AKLBUPZHFUPHJUDUEZVCUF
      UGEUHUEZUQZUPHVDKUFUGVFUPZHVDLUFUGVFUPZBUQZUPZKHFUPZLHFUPZDUPZACEFVEGHIVD
      JVCUIMVDUJZNPVEUJZQSTAJUIUKKIUKLIUKVCIUKTUAUBBEIJKLNPOULUMUCUNABEVEGHIVDJ
      KLVNNPOVOMTUAUBUCUOAVMVKVLVIUPVJABCDEGVKVLJUIMNOQRTACEFGHIJKMNPQSTUAUCURA
      CEFGHIJLMNPQSTUBUCURUSAVKVGVLVHVIACEFVEGHIVDJKUIMVNNPVOQSTUAUCUNACEFVEGHI
      VDJLUIMVNNPVOQSTUBUCUNUTVAVB $.
      $( [21-Oct-1014] $)
  $}

  ${
    $d x y z D $.  $d x y z F $.  $d x y z K $.  $d x y z R $.  $d x y z S $.
    $d x y V $.  $d y W $.  $d x y z ph $.
    ldualgrp.d $e |- D = ( LDual ` W ) $.
    ldualgrp.w $e |- ( ph -> W e. LMod ) $.
    ${
      ldualgrp.v $e |- V = ( Base ` W ) $.
      ldualgrp.p $e |- P = oF ( +g ` W ) $.
      ldualgrp.f $e |- F = ( LFnl ` W ) $.
      ldualgrp.r $e |- R = ( Scalar ` W ) $.
      ldualgrp.k $e |- K = ( Base ` R ) $.
      ldualgrp.t $e |- T = ( .r ` R ) $.
      ldualgrp.o $e |- O = ( oppR ` R ) $.
      ldualgrp.s $e |- S = ( vsca ` D ) $.
      $( Lemma for ~ ldualgrp . $)
      ldualgrplem $p |- ( ph -> D e. Grp ) $=
        ( vx vy vz cplusg cfv cv cminusg c0g csn cxp cbs clmod eqid1 ldualvbase
        cmpt eqidd cvv wcel cld fvex eqeltri a1i w3a 3ad2ant1 simp2 ldualvaddcl
        eqcomd simp3 wa cof adantr simpr2 simpr3 ldualvadd oveq2d simpr1 oveq1d
        co eqid lfladdass 3eqtrd 3eqtr4rd lfl0f simpr lfladd0l lflnegcl lflnegl
        syl eqtrd isgrpd ) AUBUCUDGBUEUFZBUCJUCUGZUBUGZUFDUHUFZUFUPZJDUIUFZUJUK
        ZABULUFZGABGWSKUMPLWSUNMUOVHAWLUQBURUSABKUTUFURLKUTVAVBVCAWNGUSZWMGUSZV
        DBWLGWNWMKPLWLUNAWTKUMUSZXAMVEAWTXAVFAWTXAVIVGAWTXAUDUGZGUSZVDZVJZWNWMX
        CWLVSZDUEUFZVKZVSWNWMXCXIVSZXIVSZWNXGWLVSWNWMWLVSZXCWLVSZXFXGXJWNXIXFXH
        BWLDGWMXCKUMPQXHVTZLWLVTZAXBXEMVLZAWTXAXDVMZAWTXAXDVNZVOVPXFXHBWLDGWNXG
        KUMPQXNLXOXPAWTXAXDVQZXFBWLGWMXCKPLXOXPXQXRVGVOXFXMXLXCXIVSWNWMXIVSZXCX
        IVSXKXFXHBWLDGXLXCKUMPQXNLXOXPXFBWLGWNWMKPLXOXPXSXQVGXRVOXFXLXTXCXIXFXH
        BWLDGWNWMKUMPQXNLXOXPXSXQVOVRXFXHDGWNWMXCKQXNPXPXSXQXRWAWBWCAXBWRGUSZMD
        GWQJKQWQVTZNPWDWIZAWTVJZWRWNWLVSWRWNXIVSWNYDXHBWLDGWRWNKUMPQXNLXOAXBWTM
        VLZAYAWTYCVLAWTWEZVOYDXHDGWNWQJKNQXNYBPYEYFWFWJYDUCDGWNWOWPJKNQWOVTZWPV
        TZPYEYFWGZYDWPWNWLVSWPWNXIVSWRYDXHBWLDGWPWNKUMPQXNLXOYEYIYFVOYDUCXHDGWN
        WOWPWQJKNQYGYHPYEYFXNYBWHWJWK $.
        $( [22-Oct-1014] $)
    $}

    $( The dual of a vector space is a group. $)
    ldualgrp $p |- ( ph -> D e. Grp ) $=
      ( cplusg cfv cof csca cvsca cmulr clfn cbs coppr eqid ldualgrplem ) ABCFG
      HZCIGZBJGZRKGZCLGZRMGZRNGZCMGZCDEUDOQOUAOROUBOTOUCOSOP $.
      $( [21-Oct-1014] $)
  $}

  ${
    ldualv0.v $e |- V = ( Base ` W ) $.
    ldualv0.r $e |- R = ( Scalar ` W ) $.
    ldualv0.z $e |- Z = ( 0g ` R ) $.
    ldualv0.d $e |- D = ( LDual ` W ) $.
    ldualv0.o $e |- O = ( 0g ` D ) $.
    ldualv0.w $e |- ( ph -> W e. LMod ) $.
    $( The zero vector of the dual of a vector space. $)
    ldualv0 $p |- ( ph -> O = ( V X. { Z } ) ) $=
      ( cplusg cfv co wceq clmod eqid wcel csn cxp cof clfn lfl0f syl ldualvadd
      lfladd0l eqtrd cgrp cbs ldualgrp ldualvbase eleqtrrd grpid syl2anc mpbid
      wb ) AEGUAUBZUSBNOZPZUSQZDUSQZAVAUSUSCNOZUCPUSAVDBUTCFUDOZUSUSFRVESZIVDSZ
      KUTSZMAFRTUSVETMCVEGEFIJHVFUEUFZVIUGAVDCVEUSGEFHIVGJVFMVIUHUIABUJTUSBUKOZ
      TVBVCURABFKMULAUSVEVJVIABVEVJFRVFKVJSZMUMUNVJUTBDUSVKVHLUOUPUQ $.
      $( [24-Oct-1014] $)
  $}

  ${
    $d x y z D $.  $d x y z F $.  $d x y z K $.  $d x y z R $.  $d x y z S $.
    $d x y z ph $.
    lduallmod.d $e |- D = ( LDual ` W ) $.
    lduallmod.w $e |- ( ph -> W e. LMod ) $.
    ${
      lduallmod.v $e |- V = ( Base ` W ) $.
      lduallmod.p $e |- P = oF ( +g ` W ) $.
      lduallmod.f $e |- F = ( LFnl ` W ) $.
      lduallmod.r $e |- R = ( Scalar ` W ) $.
      lduallmod.k $e |- K = ( Base ` R ) $.
      lduallmod.t $e |- T = ( .r ` R ) $.
      lduallmod.o $e |- O = ( oppR ` R ) $.
      lduallmod.s $e |- S = ( vsca ` D ) $.
      $( Lemma for ~ lduallmod . $)
      lduallmodlem $p |- ( ph -> D e. LMod ) $=
        ( vx vy vz cplusg cfv csca cmulr cur clmod eqid ldualvbase eqcomd eqidd
        cbs ldualsca cvsca wceq a1i opprbas oppradd fveq2d crg wcel lmodrng syl
        oppr1 opprrng ldualgrp w3a 3ad2ant1 simp2 simp3 ldualvscl adantr simpr1
        cv wa simpr2 simpr3 ldualvsdi1 ldualvsdi2 ldualvsass2 csn cxp cof simpr
        co rngidcl ldualvs lfl1sc eqtrd islmodd ) AUBUCUDBUEUFZHDUEUFZEBUGUFZUH
        UFZDUIUFZIGBABUOUFZGABGWSKUJPLWSUKMULUMAWNUNAWPIABWPDIKUJQTLWPUKZMUPZUM
        EBUQUFURAUAUSHIUOUFURAHDITRUTUSWOIUEUFURAWODITWOUKZVAUSAWPIUHXAVBADVCVD
        ZWRIUIUFURAKUJVDZXCMDKQVEVFZDWRIVCTWRUKZVGVFAXCIVCVDXEDITVHVFABKLMVIAUB
        VQZHVDZUCVQZGVDZVJBDEGXIHKXGPQRLUAAXHXDXJMVKAXHXJVLAXHXJVMVNAXHXJUDVQZG
        VDZVJZVRBWNDEGXIXKHKXGPQRLWNUKZUAAXDXMMVOAXHXJXLVPAXHXJXLVSAXHXJXLVTWAA
        XHXIHVDZXLVJZVRZWOBWNDEGXKHKXGXIPQXBRLXNUAAXDXPMVOZAXHXOXLVPZAXHXOXLVSZ
        AXHXOXLVTZWBXQBWPDEWQGXKHKXGXIPQRLWTWQUKUAXRXSXTYAWCAXGGVDZVRZWRXGEWHXG
        JWRWDWEFWFWHXGYCBDEFGXGHJKWRUJPNQRSLUAAXDYBMVOZAWRHVDZYBAXCYEXEHDWRRXFW
        IVFVOAYBWGZWJYCDFGXGWRHJKNQPRSXFYDYFWKWLWM $.
        $( [22-Oct-1014] $)
    $}

    $( The dual of a left module is also a left module. $)
    lduallmod $p |- ( ph -> D e. LMod ) $=
      ( cplusg cfv cof csca cvsca cmulr clfn cbs coppr eqid lduallmodlem ) ABCF
      GHZCIGZBJGZRKGZCLGZRMGZRNGZCMGZCDEUDOQOUAOROUBOTOUCOSOP $.
      $( [22-Oct-1014] $)
  $}

  ${
    $d x y z D $.  $d x y z F $.  $d x y z K $.  $d x y z R $.  $d x y z S $.
    $d x y z ph $.
    lduallvec.d $e |- D = ( LDual ` W ) $.
    lduallvec.w $e |- ( ph -> W e. LVec ) $.
    $( The dual of a left vector space is also a left vector space.  Note that
       scalar multiplication is reversed by ~ df-oppr ; otherwise, the dual
       would be a right vector space as is sometimes the case in the
       literature. $)
    lduallvec $p |- ( ph -> D e. LVec ) $=
      ( clmod wcel cfv cdr clvec lveclmod syl lduallmod coppr ldualsca lvecdrng
      csca eqid opprdrng eqeltrd islvec2 sylanbrc ) ABFGBQHZIGBJGABCDACJGZCFGEC
      KLMAUCCQHZNHZIABUCUEUFCJUERZUFRZDUCRZEOAUEIGZUFIGAUDUJEUECUGPLUEUFUHSLTUC
      BUIUAUB $.
      $( [22-Oct-1014] $)
  $}

  ${
    $d g k D $.  $d k F $.  $d g k G $.  $d k L $.  $d g k N $.  $d k W $.
    $d g k ph $.
    ldual1dim.f $e |- F = ( LFnl ` W ) $.
    ldual1dim.l $e |- L = ( LKer ` W ) $.
    ldual1dim.d $e |- D = ( LDual ` W ) $.
    ldual1dim.n $e |- N = ( LSpan ` D ) $.
    ldual1dim.w $e |- ( ph -> W e. LVec ) $.
    ldual1dim.g $e |- ( ph -> G e. F ) $.
    $( Equivalent expressions for a 1-dim subspace (ray) of functionals. $)
    ldual1dim $p |- ( ph -> ( N ` { G } )
        = { g e. F | ( L ` G ) C_ ( L ` g ) } ) $=
      ( vk cfv cbs wcel wa eqid cv cvsca co wceq csca cab csn cxp cmulr cof wss
      clvec ldualsbase eleq2d anbi1d adantr simpr ldualvs eqeq2d pm5.32da bitrd
      wrex crab rexbidv2 clmod lveclmod lduallmod syl ldualvbase eleqtrrd lspsn
      abbidv syl2anc lfl1dim 3eqtr4d ) ACUAZOUAZEBUBPZUCZUDZOBUEPZQPZVBZCUFZVPE
      HQPZVQUGUHHUEPZUIPZUJUCZUDZOWFQPZVBZCUFEUGGPZEFPVPFPUKCDVCAWCWKCAVTWIOWBW
      JAVQWBRZVTSVQWJRZVTSWNWISAWMWNVTAWBWJVQABWAWFWBWJULHWFTZWJTZKWATZWBTZMUMU
      NUOAWNVTWIAWNSZVSWHVPWSBWFVRWGDEWJWEHVQULIWETZWOWPWGTZKVRTZAHULRZWNMUPAWN
      UQAEDRWNNUPURUSUTVAVDVLABVERZEBQPZRWLWDUDAXCXDMXCBHKHVFVGVHAEDXENABDXEHUL
      IKXETZMVIVJCVROWAWBGXEBEWQWRXFXBLVKVMAWFWGCODEWJFWEHWTWOIJWPXAMNVNVO $.
      $( [24-Oct-1014] $)
  $}

