$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
              Finite composites ( i. e. finite sums, products ... )
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c prod2_ $. $( Product sign. $)

  $( Extend class notation to include finite supports products/sums. $)
  cprd2 $a class prod2_ k e. A G B $.

  $c prod3_ $. $( Product sign. $)

  $( Extend class notation to include finite supports products/sums. $)
  cprd3 $a class prod3_ k e. A G B $.


  ${
    $d f m n x A $.  $d f m n x B $.  $d f k m n x $.  $d f m n x G $.
    $( Definition of a sum or product operator to be used with generic
       structures defined by extensible structures. ` A ` is the set of
       indices, ` G ` the operation, ` B ` an expression, ` k ` is normally a
       free variable in ` B ` . ` A ` may be any extensible structure with a
       base set.  Its base set may be infinite provided that the "support" is
       finite.  The support is the set:
       ` { k e. ( Base `` A ) | B =/= ( 0g `` G ) } ` .  The base set of ` A `
       may be empty. ` G ` must be an extensible structure with a law
       commutative, associative with a neutral element. $)
    df-prod2 $a |- prod2_ k e. A G B =
      if ( ( Base ` G ) = (/) , ( 0g ` G ) ,
        ( iota x E. m e. NN E. f ( f : ( 1 ... m ) -1-1-onto->
          { k e. ( Base ` A ) | B =/= ( 0g ` G ) } /\
              x = ( seq 1 ( ( +g ` G ) ,
                ( n e. NN |-> [_ ( f ` n ) / k ]_ B ) ) ` m ) ) ) ) $.
  $}

  ${
    $d f m n x A $.  $d f m n x B $.  $d f k m n x $.  $d f m n x G $.
    $( Definition of a sum or product operator to be used with generic
       structures defined by extensible structures. ` A ` is the set of
       indices, ` G ` the operation, ` B ` an expression, ` k ` is normally a
       free variable in ` B ` . ` A ` must be a total order.  Its base set may
       be infinite provided that the "support" is finite.  The support is the
       set: ` { k e. ( Base `` A ) | B =/= ( 0g `` G ) } ` .  The base set of
       ` A ` may be empty. ` G ` must be an associative law with a neutral
       element. $)
    df-prod3 $a |- prod3_ k e. A G B =
      if ( ( Base ` G ) = (/) , ( 0g ` G ) ,
        ( iota x E. m e. NN E. f ( f e. ( ( 1 ... m ) OrIso
          { k e. ( Base ` A ) | B =/= ( 0g ` G ) } ) /\
              x = ( seq 1 ( ( +g ` G ) ,
                ( n e. NN |-> [_ ( f ` n ) / k ]_ B ) ) ` m ) ) ) ) $.
  $}


