$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    Draft definitions for formal polynomial rings
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c FBag +bg fPoly $.

  $( Extend class notation with the finite bags drawn from some set. $)
  cfbag $a class FBag $.

  $( Extend class notation with the bag sum operator. $)
  caddbg $a class +bg $.

  $( Extend class notation with the class of formal polynomials over a set. $)
  cfply $a class fPoly $.

  ${
    $d s t u $.

    $( Define the class of finite bags drawn from some base set.  We define the
       range using nonzero ordinals (XXX Norm is this an OK use of ` N. ` or
       should I write it out?) so that domains can be ambiguous and ~ ndmfv
       will pick up the slack. $)
    df-fbag $a |- FBag = ( s e. _V |->
      { u e. ( ( om \ { (/) } ) ^pm s ) | dom u e. Fin } ) $.

    $( Define the addition operator on bags.  Does not actually require
       finiteness. $)
    df-addbg $a |- +bg = ( s e. _V , t e. _V |->
        ( u e. ( dom s u. dom t ) |-> ( ( s ` u ) +o ( t ` u ) ) ) ) $.

    $( Define the basic set of formal polynomials over a coefficient ring:
       mappings from exponent vectors to coefficients such that all but
       finitely many are zero. $)
    df-fply $a |- fPoly = ( s e. _V , t e. _V |->
        { u e. ( ( Base ` s ) ^m ( FBag ` t ) ) |
          ( `' u " ( _V \ { ( 0g ` s ) } ) ) e. Fin } ) $.

    $( TODO: define commutative monoids, general bag sum operation for
       commutative monoids, product operation for commutative rings, polynomial
       evaluator on that basis $)
  $}

$( (End of Stefan O'Rear's mathbox.) $)


