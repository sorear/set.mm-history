$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    Noetherian rings and left modules
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c LFinGen LNoeM LNoeR homGrp homLM LIdeal LPIR $.

  $( Extend class notation with the class of finitely generated left
     modules. $)
  clfig $a class LFinGen $.

  $( Extend class notation with the class of Noetherian left modules. $)
  clnm $a class LNoeM $.

  $( Extend class notation with the class of left Noetherian rings. $)
  clnr $a class LNoeR $.

  $( Extend class notation with the generator of group hom-sets. $)
  chgrp $a class homGrp $.

  $( Extend class notation with the generator of left module hom-sets. $)
  chlm $a class homLM $.

  $( Ring left-ideal function. $)
  clidl $a class LIdeal $.

  $( Class of left principal ideal rings. $)
  clpir $a class LPIR $.

  ${
    $d w i g $.

    $( Define the class of finitely generated left modules.  Finite generation
       of subspaces can be intepreted using ` |``s ` . $)
    df-lfig $a |- LFinGen = { w e. LMod | ( Base ` w ) e. ( ( LSpan ` w ) "
        ( ~P ( Base ` w ) i^i Fin ) ) } $.

    $( Define the class of left ideals of a given ring.  An ideal is a
       submodule of the ring viewed as a module over itself. $)
    df-lidl $a |- LIdeal = ( LSubSp o. ringLMod ) $.

    $( Define the class of left principal ideal rings, rings where every left
       ideal has a single generator. $)
    df-lpir $a |- LPIR = { w e. Ring | A. i e. ( LIdeal ` w )
        E. g e. ( Base ` w ) i = ( ( RSpan ` w ) ` { g } ) } $.
  $}

  ${
    $d x B $.  $d a b x U $.  $d W a b x $.  $d ph a b x $.
    islss2d.f $e |- ( ph -> F = ( Scalar ` W ) ) $.
    islss2d.b $e |- ( ph -> B = ( Base ` F ) ) $.
    islss2d.v $e |- ( ph -> V = ( Base ` W ) ) $.
    islss2d.p $e |- ( ph -> P = ( +g ` W ) ) $.
    islss2d.t $e |- ( ph -> T = ( vsca ` W ) ) $.
    islss2d.s $e |- ( ph -> S = ( LSubSp ` W ) ) $.
    islss2d.w $e |- ( ph -> W e. X ) $.
    $( Deduction version of ~ islss . $)
    islss2d $p |- ( ph -> ( U e. S <-> ( U C_ V /\ U =/= (/) /\
        A. x e. B A. a e. U A. b e. U ( ( x T a ) P b ) e. U ) ) ) $=
      ( clss cfv wcel cbs wss c0 wne cv cvsca co cplusg wral csca wb eqid islss
      eleq2d sseq2d fveq2d eqtrd oveqd eqidd oveq123d eleq1d 2ralbidv raleqbidv
      w3a syl 3anbi13d 3bitr4d ) AGJUAUBZUCZGJUDUBZUEZGUFUGZBUHZLUHZJUIUBZUJZMU
      HZJUKUBZUJZGUCZMGULLGULZBJUMUBZUDUBZULZVGZGEUCGIUEZVOVPVQFUJZVTDUJZGUCZMG
      ULLGULZBCULZVGAJKUCVLWHUNTBWFWAVKVRGWEVMJKLMWEUOWFUOVMUOWAUOVRUOVKUOUPVHA
      EVKGSUQAWIVNWNWGVOAIVMGPURAWMWDBCWFACHUDUBWFOAHWEUDNUSUTAWLWCLMGGAWKWBGAW
      JVSVTVTDWAQAFVRVPVQRVAAVTVBVCVDVEVFVIVJ $.
      $( [6-Dec-2014] $)
  $}


  ${
    lmodbn0d.b $e |- ( ph -> B = ( Base ` W ) ) $.
    lmodbn0d.w $e |- ( ph -> W e. LMod ) $.
    $( Deduction for ~ lmodbn0 . $)
    lmodbn0d $p |- ( ph -> B =/= (/) ) $=
      ( cbs cfv c0 clmod wcel wne eqid lmodbn0 syl eqnetrd ) ABCFGZHDACIJPHKEPC
      PLMNO $.
      $( [6-Dec-2014] $)
  $}

  ${
    lmodvscld.v $e |- ( ph -> V = ( Base ` W ) ) $.
    lmodvscld.f $e |- ( ph -> F = ( Scalar ` W ) ) $.
    lmodvscld.s $e |- ( ph -> S = ( vsca ` W ) ) $.
    lmodvscld.k $e |- ( ph -> K = ( Base ` F ) ) $.
    lmodvscld.w $e |- ( ph -> W e. LMod ) $.
    lmodvscld.r $e |- ( ph -> R e. K ) $.
    lmodvscld.x $e |- ( ph -> X e. V ) $.
    $( Deduction version of ~ lmodvscl . $)
    lmodvscld $p |- ( ph -> ( R S X ) e. V ) $=
      ( co wcel cfv cbs eqid cvsca csca fveq2d eleqtrd lmodvscl syl3anc eleq12d
      clmod eqtrd oveqd mpbird ) ABHCPZFQBHGUARZPZGSRZQZAGUHQBGUBRZSRZQHUOQUPMA
      BEURNAEDSRURLADUQSJUCUIUDAHFUOOIUDBUMUQURUOGHUOTUQTUMTURTUEUFAULUNFUOACUM
      BHKUJIUGUK $.
      $( [6-Dec-2014] $)
  $}

  ${
    lmodvsdi1d.v $e |- ( ph -> V = ( Base ` W ) ) $.
    lmodvsdi1d.a $e |- ( ph -> A = ( +g ` W ) ) $.
    lmodvsdi1d.f $e |- ( ph -> F = ( Scalar ` W ) ) $.
    lmodvsdi1d.s $e |- ( ph -> S = ( vsca ` W ) ) $.
    lmodvsdi1d.k $e |- ( ph -> K = ( Base ` F ) ) $.
    lmodvsdi1d.w $e |- ( ph -> W e. LMod ) $.
    lmodvsdi1d.r $e |- ( ph -> R e. K ) $.
    lmodvsdi1d.x $e |- ( ph -> X e. V ) $.
    lmodvsdi1d.y $e |- ( ph -> Y e. V ) $.
    $( Deduction version of ~ lmodvsdi1 . $)
    lmodvsdi1d $p |- ( ph -> ( R S ( X A Y ) ) = ( ( R S X ) A ( R S Y ) ) ) $=
      ( co cplusg cfv cvsca clmod wcel csca wceq fveq2d eqtrd eleqtrd lmodvsdi1
      cbs eqid syl112anc eqidd oveqd oveq123d 3eqtr4d ) ACIJHUAUBZTZHUCUBZTZCIV
      ATZCJVATZUSTZCIJBTZDTCIDTZCJDTZBTAHUDUECHUFUBZULUBZUEIHULUBZUEJVKUEVBVEUG
      PACFVJQAFEULUBVJOAEVIULMUHUIUJAIGVKRKUJAJGVKSKUJUSCVAVIVJVKHIJVKUMUSUMVIU
      MVAUMVJUMUKUNACCVFUTDVANACUOABUSIJLUPUQAVGVCVHVDBUSLADVACINUPADVACJNUPUQU
      R $.
      $( [6-Dec-2014] $)
  $}

  ${
    lmodvsdi2d.v $e |- ( ph -> V = ( Base ` W ) ) $.
    lmodvsdi2d.a $e |- ( ph -> A = ( +g ` W ) ) $.
    lmodvsdi2d.f $e |- ( ph -> F = ( Scalar ` W ) ) $.
    lmodvsdi2d.s $e |- ( ph -> S = ( vsca ` W ) ) $.
    lmodvsdi2d.k $e |- ( ph -> K = ( Base ` F ) ) $.
    lmodvsdi2d.p $e |- ( ph -> P = ( +g ` F ) ) $.
    lmodvsdi2d.w $e |- ( ph -> W e. LMod ) $.
    lmodvsdi2d.q $e |- ( ph -> Q e. K ) $.
    lmodvsdi2d.r $e |- ( ph -> R e. K ) $.
    lmodvsdi2d.x $e |- ( ph -> X e. V ) $.
    $( Deduction version of ~ lmodvsdi2 . $)
    lmodvsdi2d $p |- ( ph -> ( ( Q P R ) S X ) = ( ( Q S X ) A ( R S X ) ) ) $=
      ( csca cfv cplusg co cvsca clmod wcel wceq fveq2d eqtrd eleqtrd lmodvsdi2
      cbs eqid syl121anc oveqd eqidd oveq123d 3eqtr4d ) ADEJUBUCZUDUCZUEZKJUFUC
      ZUEZDKVDUEZEKVDUEZJUDUCZUEZDECUEZKFUEDKFUEZEKFUEZBUEAJUGUHDVAUNUCZUHEVMUH
      KJUNUCZUHVEVIUIRADHVMSAHGUNUCVMPAGVAUNNUJUKZULAEHVMTVOULAKIVNUALULVHVBDEV
      DVAVMVNJKVNUOVHUOVAUOVDUOVMUOVBUOUMUPAVJVCKKFVDOACVBDEACGUDUCVBQAGVAUDNUJ
      UKUQAKURUSAVKVFVLVGBVHMAFVDDKOUQAFVDEKOUQUSUT $.
      $( [6-Dec-2014] $)
  $}

  ${
    lmodvsassd.v $e |- ( ph -> V = ( Base ` W ) ) $.
    lmodvsassd.f $e |- ( ph -> F = ( Scalar ` W ) ) $.
    lmodvsassd.s $e |- ( ph -> S = ( vsca ` W ) ) $.
    lmodvsassd.k $e |- ( ph -> K = ( Base ` F ) ) $.
    lmodvsassd.t $e |- ( ph -> T = ( .r ` F ) ) $.
    lmodvsassd.w $e |- ( ph -> W e. LMod ) $.
    lmodvsassd.q $e |- ( ph -> Q e. K ) $.
    lmodvsassd.r $e |- ( ph -> R e. K ) $.
    lmodvsassd.x $e |- ( ph -> X e. V ) $.
    $( Deduction version of ~ lmodvsass . $)
    lmodvsassd $p |- ( ph -> ( ( Q T R ) S X ) = ( Q S ( R S X ) ) ) $=
      ( co csca cfv cmulr cvsca clmod wcel cbs wceq fveq2d eqtrd eqid lmodvsass
      eleqtrd syl121anc oveqd eqidd oveq123d 3eqtr4d ) ABCIUAUBZUCUBZTZJIUDUBZT
      ZBCJVBTZVBTZBCETZJDTBCJDTZDTAIUEUFBUSUGUBZUFCVHUFJIUGUBZUFVCVEUHPABGVHQAG
      FUGUBVHNAFUSUGLUIUJZUMACGVHRVJUMAJHVISKUMBCVBUTUSVHVIIJVIUKUSUKVBUKVHUKUT
      UKULUNAVFVAJJDVBMAEUTBCAEFUCUBUTOAFUSUCLUIUJUOAJUPUQABBVGVDDVBMABUPADVBCJ
      MUOUQUR $.
      $( [6-Dec-2014] $)
  $}

  ${
    lmodvs1d.v $e |- ( ph -> V = ( Base ` W ) ) $.
    lmodvs1d.f $e |- ( ph -> F = ( Scalar ` W ) ) $.
    lmodvs1d.s $e |- ( ph -> S = ( vsca ` W ) ) $.
    lmodvs1d.u $e |- ( ph -> U = ( 1r ` F ) ) $.
    lmodvs1d.w $e |- ( ph -> W e. LMod ) $.
    lmodvs1d.x $e |- ( ph -> X e. V ) $.
    $( Deduction version of ~ lmodvs1 . $)
    lmodvs1d $p |- ( ph -> ( U S X ) = X ) $=
      ( co csca cfv cur eqtrd wcel eqid cvsca fveq2d eqidd oveq123d cbs eleqtrd
      clmod wceq lmodvs1 syl2anc ) ACGBNFOPZQPZGFUAPZNZGACULGGBUMJACDQPULKADUKQ
      IUBRAGUCUDAFUGSGFUEPZSUNGUHLAGEUOMHUFUMULUKUOFGUOTUKTUMTULTUIUJR $.
      $( [6-Dec-2014] $)
  $}

  ${
    lss0cld.z $e |- ( ph -> Z = ( 0g ` W ) ) $.
    lss0cld.s $e |- ( ph -> S = ( LSubSp ` W ) ) $.
    lss0cld.w $e |- ( ph -> W e. LMod ) $.
    lss0cld.u $e |- ( ph -> U e. S ) $.
    $( Membership of the zero vector in a linear subspace (deduction) . $)
    lss0cld $p |- ( ph -> Z e. U ) $=
      ( c0g cfv clmod wcel clss eleqtrd eqid lss0cl syl2anc eqeltrd ) AEDJKZCFA
      DLMCDNKZMTCMHACBUAIGOUACDTTPUAPQRS $.
      $( [6-Dec-2014] $)
  $}

  ${
    lssvacld.p $e |- ( ph -> P = ( +g ` W ) ) $.
    lssvacld.s $e |- ( ph -> S = ( LSubSp ` W ) ) $.
    lssvacld.w $e |- ( ph -> W e. LMod ) $.
    lssvacld.u $e |- ( ph -> U e. S ) $.
    lssvacld.x $e |- ( ph -> X e. U ) $.
    lssvacld.y $e |- ( ph -> Y e. U ) $.
    $( Closure of subspaces under addition, deduction. $)
    lssvacld $p |- ( ph -> ( X P Y ) e. U ) $=
      ( co cplusg cfv oveqd clmod wcel eqid eleqtrd lssvacl syl22anc eqeltrd
      clss ) AFGBNFGEOPZNZDABUFFGHQAERSDEUEPZSFDSGDSUGDSJADCUHKIUALMUFUHDEFGUFT
      UHTUBUCUD $.
      $( [6-Dec-2014] $)
  $}

  ${
    lssvscld.f $e |- ( ph -> F = ( Scalar ` W ) ) $.
    lssvscld.t $e |- ( ph -> T = ( vsca ` W ) ) $.
    lssvscld.b $e |- ( ph -> B = ( Base ` F ) ) $.
    lssvscld.s $e |- ( ph -> S = ( LSubSp ` W ) ) $.
    lssvscld.w $e |- ( ph -> W e. LMod ) $.
    lssvscld.u $e |- ( ph -> U e. S ) $.
    lssvscld.x $e |- ( ph -> X e. B ) $.
    lssvscld.y $e |- ( ph -> Y e. U ) $.
    $( Closure of subspaces under scalar multiplication, deduction. $)
    lssvscld $p |- ( ph -> ( X T Y ) e. U ) $=
      ( cfv wcel eqid co cvsca oveqd clmod clss csca cbs eleqtrd fveq2d lssvscl
      eqtrd syl22anc eqeltrd ) AHIDUAHIGUBRZUAZEADUNHIKUCAGUDSEGUERZSHGUFRZUGRZ
      SIESUOESNAECUPOMUHAHBURPABFUGRURLAFUQUGJUIUKUHQURUPUNEUQGHIUQTUNTURTUPTUJ
      ULUM $.
      $( [6-Dec-2014] $)
  $}

  ${
    lssvnegcld.u $e |- ( ph -> U e. S ) $.
    lssvnegcld.s $e |- ( ph -> S = ( LSubSp ` W ) ) $.
    lssvnegcld.w $e |- ( ph -> W e. LMod ) $.
    lssvnegcld.x $e |- ( ph -> X e. U ) $.
    $( A linear subspace contains negatives of all its vectors. $)
    lssvnegcld $p |- ( ph -> ( ( invg ` W ) ` X ) e. U ) $=
      ( csca cfv cur cminusg clmod wcel cbs eqid syl2anc eqidd syl co wceq clss
      cvsca wss eleqtrd lssss sseldd lmodvneg1 cgrp lmodfgrp rngidcld grpinvcld
      crg lmodrng lssvscld eqeltrrd ) ADJKZLKZURMKZKZEDUDKZUAZEDMKZKZCADNOZEDPK
      ZOVCVEUBHACVGEAVFCDUCKZOCVGUEHACBVHFGUFVHCVGDNVGQZVHQUGRIUHVBUSURUTVDVGDE
      VIVDQURQZVBQUSQUTQUIRAURPKZBVBCURDVAEAURSAVBSAVKSZGHFAVKURUTUSAVFURUJOHUR
      DVJUKTVLAUTSAVKURUSAVFURUNOHURDVJUOTVLAUSSULUMIUPUQ $.
      $( [6-Dec-2014] $)
  $}

  ${
    $d ph a b x d e f $.  $d W a b x d e f $.  $d U a b x d e f $.
    $d V a b x d e f $.  $d S a b x d e f $.
    islss3.w $e |- ( ph -> W e. LMod ) $.
    islss3.b $e |- ( ph -> V = ( Base ` W ) ) $.
    islss3.s $e |- ( ph -> S = ( LSubSp ` W ) ) $.
    $( A linear subspace of a module is a subset which is a module in its own
       right. $)
    islss3 $p |- ( ph -> ( U e. S <-> ( U C_ V /\ ( W |`s U ) e. LMod ) ) ) $=
      ( vx va vb wcel wa cfv adantr wceq eqid a1i eqidd ad2antrr cress co clmod
      wss cbs clss simpr eleqtrd lssss syl2anc sseqtr4d ex pm4.71rd cplusg csca
      cvsca cur sseqtrd ressbas2 syl ressplusg resssca ressvsca crg lmodrng c0g
      cmulr lss0cld cv w3a simp1ll simp1r simp2 simp3 lssvacld simplr ad3antrrr
      lssvnegcld cgrp lmodgrp 3ad2ant1 lssvscld simpr1 simpr2 sseldd lmodvsdi1d
      issubgrpd simpr3 lmodvsdi2d lmodvsassd sselda lmodvs1d islmodd c0 wral wb
      islss2d lmodbn0d ad2antlr lmodvscld grpcld ralrimivvva mpbir3and pm5.32da
      wne impbida bitrd ) ACBLZCDUDZXHMXIECUAUBZUCLZMAXHXIAXHXIAXHMZCEUENZDXLEU
      CLZCEUFNZLCXMUDZAXNXHFOXLCBXOAXHUGABXOPZXHHOUHXOCXMEUCXMQZXOQUIUJADXMPZXH
      GOUKULUMAXIXHXKAXIMZXHXKXTXHMZIJKEUNNZEUONZUENZYCUNNZEUPNZYCVGNZYCUQNZYCC
      XJXTCXJUENPZXHXTXPYIXTCDXMAXIUGAXSXIGOURZCXMXJEXJQZXRUSUTZOYBXJUNNPZYACYB
      EXJYKYBQVAZRYCXJUONPZYACYCEXJYKYCQZVBZRYFXJUPNPZYACYFEXJYKYFQVCZRYAYDSYAY
      ESYAYGSYAYHSAYCVDLZXIXHAXNYTFYCEYPVEUTTYAJKCYBXJEEVFNZYAXJSYAUUASZYAYBSXT
      XPXHYJOZYABCEUUAUUBAXQXIXHHTZAXNXIXHFTZXTXHUGVHYAJVIZCLZKVIZCLZVJZYBBCEUU
      FUUHUUJYBSUUJAXQAXIXHUUGUUIVKZHUTUUJAXNUUKFUTXTXHUUGUUIVLYAUUGUUIVMYAUUGU
      UIVNVOYAUUGMBCEUUFXTXHUUGVPAXQXIXHUUGHVQAXNXIXHUUGFVQYAUUGUGVRAEVSLZXIXHA
      XNUULFEVTUTTWGYAIVIZYDLZUUGVJZYDBYFCYCEUUMUUFUUOYCSUUOYFSUUOYDSYAUUNXQUUG
      UUDWAYAUUNXNUUGUUEWAXTXHUUNUUGVLYAUUNUUGVMYAUUNUUGVNWBYAUUNUUGUUIVJZMZYBU
      UMYFYCYDXMEUUFUUHUUQXMSUUQYBSUUQYCSUUQYFSUUQYDSAXNXIXHUUPFVQYAUUNUUGUUIWC
      UUQCXMUUFYAXPUUPUUCOZYAUUNUUGUUIWDWEUUQCXMUUHUURYAUUNUUGUUIWHWEWFYAUUNUUF
      YDLZUUIVJZMZYBYEUUMUUFYFYCYDXMEUUHUVAXMSZUVAYBSUVAYCSZUVAYFSZUVAYDSZUVAYE
      SAXNXIXHUUTFVQZYAUUNUUSUUIWCZYAUUNUUSUUIWDZUVACXMUUHYAXPUUTUUCOYAUUNUUSUU
      IWHWEZWIUVAUUMUUFYFYGYCYDXMEUUHUVBUVCUVDUVEUVAYGSUVFUVGUVHUVIWJYAUUMCLZMZ
      YFYHYCXMEUUMUVKXMSUVKYCSUVKYFSUVKYHSAXNXIXHUVJFVQYACXMUUMUUCWKWLWMXTXKMZX
      HXICWNXEZUUMUUFYFUBZUUHYBUBCLZKCWOJCWOIYDWOZAXHXIUVMUVPVJWPXIXKAIYDYBBYFC
      YCDEUCJKAYCSAYDSGAYBSAYFSHFWQTAXIXKVPUVLCXJXTYIXKYLOXTXKUGWRUVLUVOIJKYDCC
      UVLUUPMZCYBXJUVNUUHXKXJVSLXTUUPXJVTWSXTYIXKUUPYLTZYMUVQYNRUVQUUMYFYCYDCXJ
      UUFUVRYOUVQYQRYRUVQYSRUVQYDSXTXKUUPVPUVLUUNUUGUUIWCUVLUUNUUGUUIWDWTUVLUUN
      UUGUUIWHXAXBXCXFXDXG $.
      $( [6-Dec-2014] $)
  $}

  ${
    lsslmod.x $e |- ( ph -> X = ( W |`s U ) ) $.
    lsslmod.w $e |- ( ph -> W e. LMod ) $.
    lsslmod.u $e |- ( ph -> U e. ( LSubSp ` W ) ) $.
    $( A submodule is a module. $)
    lsslmod $p |- ( ph -> X e. LMod ) $=
      ( cress co clmod cbs cfv wss wcel clss wa eqidd islss3 mpbid simprd
      eqeltrd ) ADCBHIZJEABCKLZMZUBJNZABCOLZNUDUEPGAUFBUCCFAUCQAUFQRSTUA $.
      $( [6-Dec-2014] $)
  $}

  ${
    lsslss.w $e |- ( ph -> W e. LMod ) $.
    lsslss.x $e |- ( ph -> X = ( W |`s U ) ) $.
    lsslss.s $e |- ( ph -> S = ( LSubSp ` W ) ) $.
    lsslss.t $e |- ( ph -> T = ( LSubSp ` X ) ) $.
    lsslss.u $e |- ( ph -> U e. S ) $.
    $( The subspaces of a subspace are the smaller subspaces. $)
    lsslss $p |- ( ph -> ( V e. T <-> ( V e. S /\ V C_ U ) ) ) $=
      ( wcel cress co clmod wa cbs cfv wceq wss eqidd islss3 mpbid eqeltrd clss
      simprd eleqtrd lssss syl2anc ressbas2 fveq2d eqtr4d sstr2 mpan9 biantrurd
      eqid syl cin oveq1d adantr cvv ssexg sylan2 ancoms ressress simpr sseqin2
      sylib oveq2d 3eqtrd eleq1d wb 3bitr4d pm5.32da ancom syl6bb bitrd ) AECME
      DUAZGENOZPMZQZEBMZVSQZACEDGAGFDNOZPIADFRSZUAZWEPMZADBMZWGWHQLABDWFFHAWFUB
      ZJUCUDUGUEADWERSZGRSAWGDWKTAFPMDFUFSZMWGHADBWLLJUHWLDWFFPWFUQZWLUQUIUJZDW
      FWEFWEUQWMUKURAGWERIULUMKUCAWBVSWCQWDAVSWAWCAVSQZFENOZPMZEWFUAZWQQZWAWCWO
      WRWQAWGVSWRWNEDWFUNUOUPWOVTWPPWOVTWEENOZFDEUSZNOZWPAVTWTTVSAGWEENIUTVAWOW
      IEVBMZWTXBTAWIVSLVAVSAXCAVSWIXCLEDBVCVDVEDEFBVBVFUJWOXAEFNWOVSXAETAVSVGED
      VHVIVJVKVLAWCWSVMVSABEWFFHWJJUCVAVNVOVSWCVPVQVR $.
      $( [6-Dec-2014] $)
  $}

  ${
    lsslsp.w $e |- ( ph -> W e. LMod ) $.
    lsslsp.u $e |- ( ph -> U e. ( LSubSp ` W ) ) $.
    lsslsp.x $e |- ( ph -> X = ( W |`s U ) ) $.
    lsslsp.k $e |- ( ph -> K = ( LSpan ` W ) ) $.
    lsslsp.l $e |- ( ph -> L = ( LSpan ` X ) ) $.
    lsslsp.g $e |- ( ph -> G C_ U ) $.
    $( Spans in submodules correspond to spans in the containing module. $)
    lsslsp $p |- ( ph -> ( K ` G ) = ( L ` G ) ) $=
      ( cfv clmod wcel wss cbs eqid syl2anc clspn clss wa lsslmod cress co wceq
      lssss idi ressbas2 fveq2d eqtr4d sseqtrd lspcl eqidd lsslss mpbid lspssid
      syl simpld lspssp syl3anc sstrd mpbir2and eqssd fveq1d 3eqtr4d ) ACFUANZN
      ZCGUANZNZCDNCENAVIVKAFOPZVKFUBNZPZCVKQZVIVKQHAVNVKBQZAVKGUBNZPZVNVPUCAGOP
      ZCGRNZQZVRABFGJHIUDZACBVTMABFBUEUFZRNZVTABFRNZQZBWDUGAVLBVMPZWFHIVMBWEFOW
      ESZVMSZUHTZBWEWCFWCSWEWEUGWHUIUJUSAGWCRJUKULUMZVQCVJVTGVTSZVQSZVJSZUNTAVM
      VQBVKFGHJAVMUOZAVQUOZIUPUQUTAVSWAVOWBWKCVJVTGWLWNURTVMCVKVHFWIVHSZVAVBAVS
      VIVQPZCVIQZVKVIQWBAWRVIVMPZVIBQZAVMVQBVIFGHJWOWPIUPAVLCWEQZWTHACBWEMWJVCZ
      VMCVHWEFWHWIWQUNTAVLWGCBQXAHIMVMCBVHFWIWQVAVBVDAVLXBWSHXCCVHWEFWHWQURTVQC
      VIVJGWMWNVAVBVEACDVHKVFACEVJLVFVG $.
      $( [6-Dec-2014] $)
  $}

  ${
    $d V s p $.  $d ph s p $.  $d N s p $.  $d W s p $.  $d S s p $.
    lspf.w $e |- ( ph -> W e. LMod ) $.
    lspf.v $e |- ( ph -> V = ( Base ` W ) ) $.
    lspf.s $e |- ( ph -> S = ( LSubSp ` W ) ) $.
    lspf.n $e |- ( ph -> N = ( LSpan ` W ) ) $.
    $( The span operator on a left module maps subsets to subsets. $)
    lspf $p |- ( ph -> N : ~P V --> S ) $=
      ( vs vp cpw wf cfv cv wss wcel clmod adantr eqid cbs clss crab cint wa c0
      cmpt wne ssrab2 a1i wrex lss1 syl elpwi sseq2 rcla4ev syl2an rabn0 sylibr
      lssintcl syl3anc wceq eleqtrrd fmptd pweqd feq2d mpbird clspn eqtrd feq1d
      lspfval ) ADLZBCMVLBJEUANZLZJOZKOZPZKEUBNZUCZUDZUGZMZAWBVNBWAMAJVNVTBWAAV
      OVNQZUEZVTVRBWDERQZVSVRPZVSUFUHZVTVRQAWEWCFSWFWDVQKVRUIUJWDVQKVRUKZWGAVMV
      RQZVOVMPZWHWCAWEWIFVRVMEVMTZVRTZULUMVOVMUNVQWJKVMVRVPVMVOUOUPUQVQKVRURUSV
      SVREWLUTVAABVRVBWCHSVCWATVDAVLVNBWAADVMGVEVFVGAVLBCWAACEVHNZWAIAWEWMWAVBF
      KVRWMVMERJWKWLWMTVKUMVIVJVG $.
      $( [6-Dec-2014] $)
  $}

  ${
    $d ph a b $.  $d W a b $.  $d B a b $.
    islmodfg.w $e |- ( ph -> W e. LMod ) $.
    islmodfg.b $e |- ( ph -> B = ( Base ` W ) ) $.
    $( Property of a finitely generated left module. $)
    islmodfg $p |- ( ph -> ( W e. LFinGen <-> E. b e. ~P B ( b e. Fin /\
          ( ( LSpan ` W ) ` b ) = B ) ) ) $=
      ( va wcel cbs cfv clspn cpw cfn cin cima clmod wceq wa wb eqidd crab wrex
      clfig df-lfig eleq2i a1i fveq2 imaeq1d pweqd ineq1d imaeq2d eqtrd eleq12d
      cv elrab3 syl wfn wss clss wf lspf ffn inss1 fvelimab sylancl elin anbi1i
      anass bitri eleq2d eqeq2d anbi12d syl5rbbr rexbidv2 bitrd 3bitrd ) ACUCHZ
      CGUNZIJZVRKJZVSLZMNZOZHZGPUAZHZCIJZCKJZWGLZMNZOZHZDUNZMHZWMWHJZBQZRZDBLZU
      BZVQWFSAUCWECGUDUEUFACPHWFWLSEWDWLGCPVRCQZVSWGWCWKVRCIUGZWTWCWHWBOWKWTVTW
      HWBVRCKUGUHWTWBWJWHWTWAWIMWTVSWGXAUIUJUKULUMUOUPAWLWOWGQZDWJUBZWSAWHWIUQZ
      WJWIURWLXCSAWICUSJZWHUTXDAXEWHWGCEAWGTAXETAWHTVAWIXEWHVBUPWIMVCDWIWJWGWHV
      DVEAXBWQDWJWRWMWRHZWQRZWMWRMNZHZWPRZAWMWJHZXBRXJXFWNRZWPRXGXIXLWPWMWRMVFV
      GXFWNWPVHVIAXIXKWPXBAXHWJWMAWRWIMABWGFUIUJVJABWGWOFVKVLVMVNVOVP $.
      $( [6-Dec-2014] $)
  $}

  ${
    $d ph a b $.  $d W a b $.  $d X a b $.  $d S a b $.
    islssfg.w $e |- ( ph -> W e. LMod ) $.
    islssfg.x $e |- ( ph -> X = ( W |`s S ) ) $.
    islssfg.s $e |- ( ph -> S e. ( LSubSp ` W ) ) $.
    $( Property of a finitely generated left (sub-)module. $)
    islssfg $p |- ( ph -> ( X e. LFinGen <-> E. b e. ~P S ( b e. Fin /\
        ( ( LSpan ` W ) ` b ) = S ) ) ) $=
      ( wcel clspn cfv wceq wa wrex cbs wss clmod eqid adantr eqidd cfn lsslmod
      clfig cv cpw cress clss lssss syl2anc ressbas2 syl fveq2d eqtr4d islmodfg
      co elpwi adantl lsslsp eqeq1d anbi2d rexbidva bitr4d ) ADUCIEUDZUAIZVCDJK
      ZKZBLZMZEBUEZNVDVCCJKZKZBLZMZEVINABDEABCDGFHUBABCBUFUOZOKZDOKABCOKZPZBVOL
      ACQIZBCUGKZIZVQFHVSBVPCQVPRZVSRUHUIBVPVNCVNRWAUJUKADVNOGULUMUNAVMVHEVIAVC
      VIIZMZVLVGVDWCVKVFBWCBVCVJVECDAVRWBFSAVTWBHSADVNLWBGSWCVJTWCVETWBVCBPAVCB
      UPUQURUSUTVAVB $.
      $( [6-Dec-2014] $)
  $}

  ${
    $d W a $.
    $( ` ringLMod ` is a function. $)
    rlmfn $p |- ringLMod Fn _V $=
      ( va cv cbs cfv csra cvv wcel crglmod wfn df-rgmod fnmpt fvex a1i mprg )
      ABZCDZOEDZDZFGZHFIAFAFRHFAJKSOFGPQLMN $.
      $( [6-Dec-2014] $)

    $( Value of the ring module. $)
    rlmval $p |- ( W e. X -> ( ringLMod ` W ) =
        ( ( subringAlg ` W ) ` ( Base ` W ) ) ) $=
      ( va wcel cvv crglmod cfv cbs csra wceq elex fveq2 fveq12d df-rgmod fvmpt
      cv fvex syl ) ABDAEDAFGAHGZAIGZGZJABKCACPZHGZUBIGZGUAEFUBAJUCSUDTUBAILUBA
      HLMCNSTQOR $.
      $( [6-Dec-2014] $)

    $( Value of the set of ring ideals. $)
    lidlval $p |- ( W e. X -> ( LIdeal ` W ) =
        ( LSubSp ` ( ringLMod ` W ) ) ) $=
      ( wcel clidl cfv clss crglmod ccom df-lidl fveq1i cvv wfn wceq rlmfn elex
      fvco4 sylancr syl5eq ) ABCZADEAFGHZEZAGEFEZADTIJSGKLAKCUAUBMNABOKFGAPQR
      $.
      $( [6-Dec-2014] $)

    $( Value of the ring span function. $)
    rspval $p |- ( W e. X -> ( RSpan ` W ) =
        ( LSpan ` ( ringLMod ` W ) ) ) $=
      ( wcel crsp cfv clspn crglmod ccom df-rsp fveq1i cvv wfn wceq rlmfn fvco4
      elex sylancr syl5eq ) ABCZADEAFGHZEZAGEFEZADTIJSGKLAKCUAUBMNABPKFGAOQR $.
      $( [6-Dec-2014] $)
  $}

  ${
    $d ph a b $.  $d X a b $.  $d Y a b $.
    grpidprop.x $e |- ( ph -> X e. V ) $.
    grpidprop.y $e |- ( ph -> Y e. W ) $.
    grpidprop.b $e |- ( ph -> ( Base ` X ) = ( Base ` Y ) ) $.
    grpidprop.p $e |- ( ph -> ( +g ` X ) = ( +g ` Y ) ) $.
    $( Identity depends only on the base and group operation. $)
    grpidprop $p |- ( ph -> ( 0g ` X ) = ( 0g ` Y ) ) $=
      ( va vb cv cplusg cfv co wceq cbs wral crio eqid oveqd eqeq1d riotaeqbidv
      c0g raleqbidv wcel grpidval syl 3eqtr4d ) AJLZKLZDMNZOZUKPZKDQNZRZJUOSZUJ
      UKEMNZOZUKPZKEQNZRZJVASZDUDNZEUDNZAUPVBJUOVAHAUNUTKUOVAHAUMUSUKAULURUJUKI
      UAUBUEUCADBUFVDUQPFKUOULJDVDBUOTULTVDTUGUHAECUFVEVCPGKVAURJEVECVATURTVETU
      GUHUI $.
      $( [6-Dec-2014] $)

    $( Negation depends only on the base and group operation. $)
    grpnegprop $p |- ( ph -> ( invg ` X ) = ( invg ` Y ) ) $=
      ( va vb cbs cfv cv cplusg co c0g wceq crio eqid cminusg grpidprop eqeq12d
      cmpt oveqd riotaeqbidv mpteq12dv wcel grpinvfval syl 3eqtr4d ) AJDLMZKNZJ
      NZDOMZPZDQMZRZKULSZUDZJELMZUMUNEOMZPZEQMZRZKVASZUDZDUAMZEUAMZAJULUSVAVFHA
      URVEKULVAHAUPVCUQVDAUOVBUMUNIUEABCDEFGHIUBUCUFUGADBUHVHUTRFJKULUODVHUQBUL
      TUOTUQTVHTUIUJAECUHVIVGRGJKVAVBEVIVDCVATVBTVDTVITUIUJUK $.
      $( [6-Dec-2014] $)
  $}

  ${
    $( Base set of the ring module. $)
    rlmbase $p |- ( R e. X -> ( Base ` R ) = ( Base ` ( ringLMod ` R ) ) ) $=
      ( wcel crglmod cfv cbs rlmval wss ssid a1i srabase ) ABCZADEAFEZAABGMMHLM
      IJK $.
      $( [6-Dec-2014] $)

    $( Vector addition in the ring module. $)
    rlmplusg $p |- ( R e. X -> ( +g ` R ) = ( +g ` ( ringLMod ` R ) ) ) $=
      ( wcel crglmod cfv cbs rlmval wss ssid a1i sraaddg ) ABCZADEAFEZAABGMMHLM
      IJK $.
      $( [6-Dec-2014] $)

    $( Zero vector in the ring module. $)
    rlm0 $p |- ( R e. X -> ( 0g ` R ) = ( 0g ` ( ringLMod ` R ) ) ) $=
      ( wcel crglmod cfv cbs c0g rlmval eqidd wss ssid a1i id sralmod0 ) ABCZAD
      EAFEZBAAGEZABHOQIPPJOPKLOMN $.
      $( [6-Dec-2014] $)

    $( Scalars in the ring module. $)
    rlmsca $p |- ( R e. X -> R = ( Scalar ` ( ringLMod ` R ) ) ) $=
      ( wcel cbs cfv cress co crglmod csca eqid ressid rlmval wss srasca eqtr3d
      ssid a1i ) ABCZAADEZFGAAHEZIESABSJKRTSAABLSSMRSPQNO $.
      $( [6-Dec-2014] $)

    $( Scalar multiplication in the ring module. $)
    rlmvsca $p |- ( R e. X -> ( .r ` R ) = ( vsca ` ( ringLMod ` R ) ) ) $=
      ( wcel crglmod cfv cbs rlmval wss ssid a1i sravsca ) ABCZADEAFEZAABGMMHLM
      IJK $.
      $( [6-Dec-2014] $)

    $( The ring module is a module. $)
    rlmlmod $p |- ( R e. Ring -> ( ringLMod ` R ) e. LMod ) $=
      ( crg wcel crglmod cfv cbs csra clmod rlmval eqid subrgid sralmod eqeltrd
      csubrg syl ) ABCZADEAFEZAGEEZHABIPQANECRHCQAQJKRQARJLOM $.
      $( [6-Dec-2014] $)

    $( Vector negation in the ring module. $)
    rlmvneg $p |- ( R e. X -> ( invg ` R ) = ( invg ` ( ringLMod ` R ) ) ) $=
      ( wcel cvv crglmod cfv id fvex a1i rlmbase rlmplusg grpnegprop ) ABCZBDAA
      EFZMGNDCMAEHIABJABKL $.
      $( [6-Dec-2014] $)
  $}

  ${
    lidlss.w $e |- ( ph -> W e. X ) $.
    lidlss.b $e |- ( ph -> B = ( Base ` W ) ) $.
    lidlss.i $e |- ( ph -> I = ( LIdeal ` W ) ) $.
    lidlss.u $e |- ( ph -> U e. I ) $.
    $( An ideal is a subset of the base set. $)
    lidlss $p |- ( ph -> U C_ B ) $=
      ( crglmod cfv cbs cvv wcel clss wceq syl eqtrd eqid clidl lidlval eleqtrd
      wss fvex lssss sylancr rlmbase sseqtr4d ) ACEKLZMLZBAUJNOCUJPLZOCUKUDEKUE
      ACDULJADEUALZULIAEFOZUMULQGEFUBRSUCULCUKUJNUKTULTUFUGABEMLZUKHAUNUOUKQGEF
      UHRSUI $.
      $( [6-Dec-2014] $)
  $}

  ${
    lidlcl.r $e |- ( ph -> R e. Ring ) $.
    lidlcl.i $e |- ( ph -> I e. ( LIdeal ` R ) ) $.

    ${
      lidl0cl.z $e |- ( ph -> Z = ( 0g ` R ) ) $.
      $( An ideal contains 0. $)
      lidl0cl $p |- ( ph -> Z e. I ) $=
        ( clidl cfv crglmod c0g crg wcel wceq rlm0 syl eqtrd clss lidlval clmod
        rlmlmod lss0cld ) ABHIZCBJIZDADBKIZUDKIZGABLMZUEUFNEBLOPQAUGUCUDRINEBLS
        PAUGUDTMEBUAPFUB $.
        $( [6-Dec-2014] $)
    $}

    ${
      lidlacl.p $e |- ( ph -> P = ( +g ` R ) ) $.
      lidlacl.x $e |- ( ph -> X e. I ) $.
      lidlacl.y $e |- ( ph -> Y e. I ) $.
      $( An ideal is closed under addition. $)
      lidlacl $p |- ( ph -> ( X P Y ) e. I ) $=
        ( clidl cfv crglmod cplusg crg wcel wceq rlmplusg syl eqtrd clss clmod
        lidlval rlmlmod lssvacld ) ABCLMZDCNMZEFABCOMZUHOMZIACPQZUIUJRGCPSTUAAU
        KUGUHUBMRGCPUDTAUKUHUCQGCUETHJKUF $.
        $( [6-Dec-2014] $)
    $}

    ${
      lidlnegcl.x $e |- ( ph -> X e. I ) $.
      lidlnegcl.n $e |- ( ph -> ( ( invg ` R ) ` X ) = N ) $.
      $( An ideal contains negatives. $)
      lidlnegcl $p |- ( ph -> N e. I ) $=
        ( crglmod cfv cminusg crg wcel wceq rlmvneg syl eqcomd fveq1d eqtrd
        clidl clss lidlval clmod rlmlmod lssvnegcld eqeltrrd ) AEBJKZLKZKZDCAUJ
        EBLKZKDAEUIUKAUKUIABMNZUKUIOFBMPQRSITABUAKZCUHEGAULUMUHUBKOFBMUCQAULUHU
        DNFBUEQHUFUG $.
        $( [6-Dec-2014] $)
    $}

    ${
      lidlcl.b $e |- ( ph -> B = ( Base ` R ) ) $.

      ${
        lidlmcl.t $e |- ( ph -> T = ( .r ` R ) ) $.
        lidlmcl.x $e |- ( ph -> X e. B ) $.
        lidlmcl.y $e |- ( ph -> Y e. I ) $.
        $( An ideal is closed under left-multiplication by elements of the full
           ring. $)
        lidlmcl $p |- ( ph -> ( X T Y ) e. I ) $=
          ( clidl cfv crglmod crg wcel wceq syl csca rlmsca cmulr cvsca rlmvsca
          eqtrd clss lidlval clmod rlmlmod lssvscld ) ABCNOZDECCPOZFGACQRZCUMUA
          OSHCQUBTADCUCOZUMUDOZKAUNUOUPSHCQUETUFJAUNULUMUGOSHCQUHTAUNUMUIRHCUJT
          ILMUK $.
          $( [6-Dec-2014] $)
      $}

      ${
        $d ph a $.  $d B a $.  $d I a $.  $d O a $.
        lidl1el.o $e |- ( ph -> O = ( 1r ` R ) ) $.
        $( An ideal contains 1 iff it is the unit ideal. $)
        lidl1el $p |- ( ph -> ( O e. I <-> I = B ) ) $=
          ( va wcel wceq wa cfv crg eqidd adantr co ad2antrr eqid wss lidlss cv
          clidl cmulr cur oveq2d cbs eleq2d biimpa rngridm syl2anc eqtrd simplr
          simpr lidlmcl eqeltrrd ssrdv eqssd rngidcld eleq2 syl5ibrcom impbid
          ex ) AEDKZDBLZAVEVFAVEMZDBADBUAVEABDCUDNZCOFHAVHPGUBQVGJBDVGJUCZBKZVI
          DKVGVJMZVIECUENZRZVIDVKVMVICUFNZVLRZVIVKEVNVIVLAEVNLVEVJISUGVKCOKZVIC
          UHNZKZVOVILAVPVEVJFSZVGVJVRVGBVQVIABVQLZVEHQUIUJVQCVLVNVIVQTVLTVNTUKU
          LUMVKBCVLDVIEVSADVHKVEVJGSAVTVEVJHSVKVLPVGVJUOAVEVJUNUPUQVDURUSVDAVEV
          FEBKABCEFHIUTDBEVAVBVC $.
          $( [6-Dec-2014] $)
      $}
    $}
  $}

  ${
    lidl0.r $e |- ( ph -> R e. Ring ) $.
    ${
      lidl0.z $e |- ( ph -> Z = ( 0g ` R ) ) $.
      $( Every ring contains a zero ideal. $)
      lidl0 $p |- ( ph -> { Z } e. ( LIdeal ` R ) ) $=
        ( csn clidl cfv wcel crglmod c0g clss clmod crg rlmlmod syl eqid lsssn0
        wceq rlm0 eqtrd sneqd lidlval eleq12d mpbird ) ACFZBGHZIBJHZKHZFZUHLHZI
        ZAUHMIZULABNIZUMDBOPUKUHUIUIQUKQRPAUFUJUGUKACUIACBKHZUIEAUNUOUISDBNTPUA
        UBAUNUGUKSDBNUCPUDUE $.
        $( [6-Dec-2014] $)
    $}

    ${
      lidl1.z $e |- ( ph -> B = ( Base ` R ) ) $.
      $( Every ring contains a unit ideal. $)
      lidl1 $p |- ( ph -> B e. ( LIdeal ` R ) ) $=
        ( clidl cfv wcel crglmod cbs clss clmod crg rlmlmod syl eqid lss1 eqtrd
        wceq rlmbase lidlval eleq12d mpbird ) ABCFGZHCIGZJGZUEKGZHZAUELHZUHACMH
        ZUIDCNOUGUFUEUFPUGPQOABUFUDUGABCJGZUFEAUJUKUFSDCMTORAUJUDUGSDCMUAOUBUC
        $.
        $( [6-Dec-2014] $)
    $}
  $}


  ${
    rspcl.r $e |- ( ph -> R e. Ring ) $.
    rspcl.g $e |- ( ph -> G C_ ( Base ` R ) ) $.
    rspcl.i $e |- ( ph -> I = ( ( RSpan ` R ) ` G ) ) $.
    $( The span of a set of ring elements is an ideal. $)
    rspcl $p |- ( ph -> I e. ( LIdeal ` R ) ) $=
      ( clidl cfv wcel crglmod clspn clss clmod cbs wss crg syl wceq eqid lspcl
      rlmlmod rlmbase sseqtrd syl2anc crsp rspval fveq1d lidlval eleq12d mpbird
      eqtrd ) ADBHIZJCBKIZLIZIZUNMIZJZAUNNJZCUNOIZPURABQJZUSEBUBRACBOIZUTFAVAVB
      UTSEBQUCRUDUQCUOUTUNUTTUQTUOTUAUEADUPUMUQADCBUFIZIUPGACVCUOAVAVCUOSEBQUGR
      UHULAVAUMUQSEBQUIRUJUK $.
      $( [6-Dec-2014] $)

    $( The span of a set of ring elements contains those elements. $)
    rspssid $p |- ( ph -> G C_ I ) $=
      ( crglmod cfv clspn clmod wcel cbs wss crg rlmlmod syl wceq rlmbase eqid
      sseqtrd lspssid syl2anc crsp rspval fveq1d eqtrd sseqtr4d ) ACCBHIZJIZIZD
      AUIKLZCUIMIZNCUKNABOLZULEBPQACBMIZUMFAUNUOUMREBOSQUACUJUMUIUMTUJTUBUCADCB
      UDIZIUKGACUPUJAUNUPUJREBOUEQUFUGUH $.
      $( [6-Dec-2014] $)
  $}

  ${
    rsp0.r $e |- ( ph -> R e. Ring ) $.
    rsp0.k $e |- ( ph -> K = ( RSpan ` R ) ) $.
    ${
      rsp0.z $e |- ( ph -> Z = ( 0g ` R ) ) $.
      $( The span of the zero element is the zero ideal. $)
      rsp0 $p |- ( ph -> ( K ` { Z } ) = { Z } ) $=
        ( crglmod cfv c0g csn clspn clmod wcel wceq crg rlmlmod syl eqid eqtrd
        lspsn0 crsp rspval rlm0 sneqd fveq12d 3eqtr4d ) ABHIZJIZKZUHLIZIZUJDKZC
        IUMAUHMNZULUJOABPNZUNEBQRUKUHUIUISUKSUARAUMUJCUKACBUBIZUKFAUOUPUKOEBPUC
        RTADUIADBJIZUIGAUOUQUIOEBPUDRTUEZUFURUG $.
        $( [6-Dec-2014] $)
    $}

    ${
      rsp1.o $e |- ( ph -> O = ( 1r ` R ) ) $.
      rsp1.b $e |- ( ph -> B = ( Base ` R ) ) $.
      $( The span of the identity element is the unit ideal. $)
      rsp1 $p |- ( ph -> ( K ` { O } ) = B ) $=
        ( csn cfv wcel wceq wss cbs eqidd rngidcld snssd crsp fveq1d rspssid wb
        snssg syl mpbird rspcl lidl1el mpbid ) AEEJZDKZLZUJBMAUKUIUJNZACUIUJFAE
        COKZAUMCEFAUMPHQZRZAUIDCSKGTZUAAEUMLUKULUBUNEUJUMUCUDUEABCUJEFACUIUJFUO
        UPUFIHUGUH $.
        $( [6-Dec-2014] $)
    $}
  $}

  ${
    $d ph a b $.  $d R a b $.  $d B a b $.  $d Z a b $.
    drngnidl.r $e |- ( ph -> R e. DivRing ) $.
    drngnidl.b $e |- ( ph -> B = ( Base ` R ) ) $.
    drngnidl.z $e |- ( ph -> Z = ( 0g ` R ) ) $.
    $( A division ring has only the two trivial ideals. $)
    drngnidl $p |- ( ph -> ( LIdeal ` R ) = { { Z } , B } ) $=
      ( va vb cfv wcel wa wceq simpr wne wss adantr ad2antrr eqidd eqid csn cpr
      clidl cv wo orcd cur wel wn wex wpss crg cdr drngrng syl c0g snssd necomd
      lidl0cl df-pss sylanbrc pssnel wi cinvr cmulr co cbs lidlss simprl sseldd
      elsn biimpri necon3bi neeqtrd drnginvrl syl3anc simplr drnginvrcl lidlmcl
      ad2antll eqeltrrd ex exlimdv mpd lidl1el mpbid olcd pm2.61dane vex sylibr
      elpr ssrdv lidl0 lidl1 prssg ibi syl2anc eqssd ) ACUCJZDUAZBUBZAHWSXAAHUD
      ZWSKZXBXAKZAXCLZXBWTMZXBBMZUEZXDXEXHXBWTXEXFLXFXGXEXFNUFXEXBWTOZLZXGXFXJC
      UGJZXBKZXGXJIHUHZIUDZWTKZUIZLZIUJZXLXJWTXBUKZXRXJWTXBPWTXBOXSXJDXBXEDXBKX
      IXECXBDACULKZXCACUMKZXTECUNUOZQAXCNZADCUPJZMZXCGQUSQUQXJXBWTXEXINURWTXBUT
      VAIWTXBVBUOXEXRXLVCXIXEXQXLIXEXQXLXEXQLZXNCVDJZJZXNCVEJZVFZXKXBYFYAXNCVGJ
      ZKZXNYDOZYJXKMAYAXCXQERZYFXBYKXNXEXBYKPXQXEYKXBWSCUMAYAXCEQXEYKSXEWSSYCVH
      QXEXMXPVIZVJZYFXNDYDXPXNDOXEXMXOXNDXOXNDMIDVKVLVMVTAYEXCXQGRVNZYKCYIXKYGX
      NYDYKTZYDTZYITXKTYGTZVOVPYFYKCYIXBYHXNAXTXCXQYBRAXCXQVQYFYKSYFYISYFYAYLYM
      YHYKKYNYPYQYKCYGXNYDYRYSYTVRVPYOVSWAWBWCQWDXJBCXBXKAXTXCXIYBRAXCXIVQABYKM
      XCXIFRXJXKSWEWFWGWHXBWTBHWIWKWJWBWLAWTWSKZBWSKZXAWSPZACDYBGWMABCYBFWNUUAU
      UBLUUCWTBWSWSWSWOWPWQWR $.
      $( [6-Dec-2014] $)
  $}

  ${
    $d ph r i g $.  $d I r i g $.  $d B r i g $.  $d R r i g $.
    islpir.i $e |- ( ph -> I = ( LIdeal ` R ) ) $.
    islpir.b $e |- ( ph -> B = ( Base ` R ) ) $.
    islpir.k $e |- ( ph -> K = ( RSpan ` R ) ) $.
    $( Property of a left principal ideal ring. $)
    islpir $p |- ( ph -> ( R e. LPIR <-> ( R e. Ring /\
          A. i e. I E. g e. B i = ( K ` { g } ) ) ) ) $=
      ( vr cv cfv wceq wrex wral crsp cbs clidl fveq2 crg wcel csn clpir fveq1d
      wa eqeq2d rexeqbidv raleqbidv anbi2d df-lpir elrab2 syl6rbbr ) ACUAUBZELZ
      DLUCZGMZNZDBOZEFPZUFUNUOUPCQMZMZNZDCRMZOZECSMZPZUFCUDUBAUTVGUNAUSVEEFVFHA
      URVCDBVDIAUQVBUOAUPGVAJUEUGUHUIUJUOUPKLZQMZMZNZDVHRMZOZEVHSMZPVGKCUAUDVHC
      NZVMVEEVNVFVHCSTVOVKVCDVLVDVHCRTVOVJVBUOVOUPVIVAVHCQTUEUGUHUIKDEUKULUM $.
      $( [6-Dec-2014] $)

    islpir2.r $e |- ( ph -> R e. Ring ) $.
    ${
      islpir2.g $e |- ( ( ph /\ i e. I ) -> E. g e. B i = ( K ` { g } ) ) $.
      $( Deduce ` LPIR ` status. $)
      islpir2 $p |- ( ph -> R e. LPIR ) $=
        ( clpir wcel crg cv csn cfv wceq wrex wral islpir ralrimiva mpbir2and )
        ACMNCONEPDPQGRSDBTZEFUAABCDEFGHIJUBKAUEEFLUCUD $.
        $( [6-Dec-2014] $)
    $}

    $d K g $.  $d Z g $.
    islpir3.z $e |- ( ph -> Z = ( 0g ` R ) ) $.
    islpir3.g $e |- ( ( ph /\ i e. I /\ { Z } C. i ) ->
        E. g e. B i = ( K ` { g } ) ) $.
    $( Deduce ` LPIR ` status. $)
    islpir3 $p |- ( ph -> R e. LPIR ) $=
      ( cv wcel csn wceq cfv adantr wa wpss wo wrex wss crg clidl simpr eleqtrd
      c0g lidl0cl snssd sspss sylib 3expia cgrp rnggrp syl grpidcld rsp0 eqcomd
      wi sneq fveq2d eqeq2d rcla4ev syl2anc eqeq1 rexbidv syl5ibcom mpd islpir2
      jaod ) ABCDEFGIJKLAEOZFPZUAZHQZVNUBZVQVNRZUCZVNDOZQZGSZRZDBUDZVPVQVNUEVTV
      PHVNVPCVNHACUFPZVOLTVPVNFCUGSZAVOUHAFWGRVOITUIAHCUJSRVOMTUKULVQVNUMUNVPVR
      WEVSAVOVRWENUOAVSWEVBVOAVQWCRZDBUDZVSWEAHBPVQVQGSZRZWIABCHAWFCUPPLCUQURJM
      USAWJVQACGHLKMUTVAWHWKDHBWAHRZWCWJVQWLWBVQGWAHVCVDVEVFVGVSWHWDDBVQVNWCVHV
      IVJTVMVKVL $.
      $( [6-Dec-2014] $)
  $}

  ${
    $d R i g a b c d $.
    $( A left principal ideal ring is a ring. $)
    lpirrng $p |- ( R e. LPIR -> R e. Ring ) $=
      ( vi vg clpir wcel crg cv csn crsp cfv wceq wrex clidl wral wa wtru eqidd
      cbs wb islpir trud simplbi ) ADEZAFEZBGCGHAIJZJKCARJZLBAMJZNZUCUDUHOSPUFA
      CBUGUEPUGQPUFQPUEQTUAUB $.
      $( [6-Dec-2014] $)

    $( A division ring is a left principal ideal ring. $)
    drnglpir $p |- ( R e. DivRing -> R e. LPIR ) $=
      ( vg vi cdr wcel cbs cfv clidl crsp c0g eqidd drngrng cv csn w3a 3ad2ant1
      wpss wceq wne sylib cur rngidcld wn wo wss df-pss simprbi necomd 3ad2ant3
      wrex df-ne cpr simp2 id drngnidl eleqtrd elpr orel1 sylc rsp1 eqtr4d sneq
      vex fveq2d eqeq2d rcla4ev syl2anc islpir3 ) ADEZAFGZABCAHGZAIGZAJGZVIVKKV
      IVJKZVIVLKZALZVIVMKZVICMZVKEZVMNZVRQZOZAUAGZVJEZVRWCNZVLGZRZVRBMZNZVLGZRZ
      BVJUJVIVSWDWAVIVJAWCVPVNVIWCKZUBPWBVRVJWFWBVRVTRZUCZWMVRVJRZUDZWOWAVIWNVS
      WAVRVTSWNWAVTVRWAVTVRUEVTVRSVTVRUFUGUHVRVTUKTUIWBVRVTVJULZEWPWBVRVKWQVIVS
      WAUMVIVSVKWQRWAVIVJAVMVIUNVNVQUOPUPVRVTVJCVCUQTWMWOURUSVIVSWFVJRWAVIVJAVL
      WCVPVOWLVNUTPVAWKWGBWCVJWHWCRZWJWFVRWRWIWEVLWHWCVBVDVEVFVGVH $.
      $( [6-Dec-2014] $)
  $}

