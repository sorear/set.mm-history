$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    Algebraic integers I
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c _ZZ IntgOver $.

  $( Extend class notation with the integral-over predicate. $)
  citgo $a class IntgOver $.

  $( Extend class notation with the class of algebraic integers. $)
  cza $a class _ZZ $.

  ${
    $d x p s $.

    $( A complex number is said to be integral over a subset if it is the root
       of a monic polynomial with coefficients from the subset.  This
       definition is typically not used for fields but it works there, see
       ~ aaitgo .  This definition could work for subsets of an arbitrary ring
       with a more general definition of polynomials.  TODO: use ` Monic ` $)
    df-itgo $a |- IntgOver = ( s e. ~P CC |-> { x e. CC | E. p e. ( Poly ` s )
        ( ( p ` x ) = 0 /\ ( ( coeff ` p ) ` ( deg ` p ) ) = 1 ) } ) $.

    $( Define an algebraic integer as a complex number which is the root of a
       monic integer polynomial. $)
    df-za $a |- _ZZ = ( IntgOver ` ZZ ) $.
  $}

  ${
    $d X x p s a b c $.  $d S x p s a b c $.  $d T x p s a b c $.
    $d P x p s a b c $.
    $( Value of the integral-over function.  (Contributed by Stefan O'Rear,
       27-Nov-2014.) $)
    itgoval $p |- ( S C_ CC -> ( IntgOver ` S ) = { x e. CC |
        E. p e. ( Poly ` S ) ( ( p ` x ) = 0 /\
          ( ( coeff ` p ) ` ( deg ` p ) ) = 1 ) } ) $=
      ( vs cc wss cpw wcel citgo cfv cv cc0 wceq cdgr ccoe cply wrex crab cnex
      c1 wa elpw2 fveq2 rexeqdv rabbidv df-itgo rabex fvmpt sylbir ) BEFBEGZHBI
      JAKCKZJLMUKNJUKOJJTMUAZCBPJZQZAERZMBESUBDBULCDKZPJZQZAERUOUJIUPBMZURUNAEU
      SULCUQUMUPBPUCUDUEADCUFUNAESUGUHUI $.
      $( [27-Nov-2014] $)

    $( The standard algebraic numbers ` AA ` are generated by ` IntgOver ` .
       (Contributed by Stefan O'Rear, 27-Nov-2014.) $)
    aaitgo $p |- AA = ( IntgOver ` QQ ) $=
      ( va vb caa cq cfv cv cc0 wceq cdgr ccoe c1 wa wrex cc wcel ax-mp c0p wne
      fveq2 cn0 citgo cply crab rabid qsscn itgoval eleq2i aacn mpaacl mpaaroot
      wss cmpaa cdgraa mpaadgr fveq2d mpaamn eqtrd fveq1 eqeq1d fveq12d anbi12d
      rcla4ev syl12anc jca csn cdif simpl cxp coe0 fveq1i dgr0 eqeltri fvconst2
      elexi eqtri ax-1ne0 necomi eqnetri neeq1d mpbiri necon2i ad2antll eldifsn
      0nn0 sylanbrc simprl reximi2 anim2i elqaa sylibr impbii 3bitr4ri eqriv )
      ACDUAEZAFZWOBFZEZGHZWPIEZWPJEZEZKHZLZBDUBEZMZANUCZOWONOZXELZWOWNOWOCOZXEA
      NUDWNXFWODNUKWNXFHUEADBUFPUGXIXHXIXGXEWOUHXIWOULEZXDOWOXJEZGHZXJIEZXJJEZE
      ZKHZXEWOUIWOUJXIXOWOUMEZXNEKXIXMXQXNWOUNUOWOUPUQXCXLXPLBXJXDWPXJHZWRXLXBX
      PXRWQXKGWOWPXJURUSXRXAXOKXRWSXMWTXNWPXJJSWPXJISUTUSVAVBVCVDXHXGWRBXDQVEVF
      ZMZLXIXEXTXGXCWRBXDXSWPXDOZXCLZWPXSOZWRYBYAWPQRZYCYAXCVGXBYDYAWRWPQXAKWPQ
      HZXAKRQIEZQJEZEZKRYHGKYHYFTGVEVHZEZGYFYGYIVIVJYFTOYJGHYFGTVKWDVLTGYFGTWDV
      NVMPVOKGVPVQVRYEXAYHKYEWSYFWTYGWPQJSWPQISUTVSVTWAWBWPXDQWCWEYAWRXBWFVDWGW
      HWOBWIWJWKWLWM $.
      $( [27-Nov-2014] $)

    $( An integral element is integral over a subset.  (Contributed by Stefan
       O'Rear, 27-Nov-2014.) $)
    itgoss $p |- ( ( S C_ T /\ T C_ CC ) ->
          ( IntgOver ` S ) C_ ( IntgOver ` T ) ) $=
      ( va vb wss cc wa cv cfv cc0 wceq cdgr ccoe c1 cply wrex crab syl itgoval
      citgo wi wral plyss ssrexv ralrimivw ss2rab sylibr sstr adantl 3sstr4d )
      ABEZBFEZGZCHDHZIJKUNLIUNMIINKGZDAOIZPZCFQZUODBOIZPZCFQZATIZBTIZUMUQUTUAZC
      FUBURVAEUMVDCFUMUPUSEVDABUCUODUPUSUDRUEUQUTCFUFUGUMAFEVBURKABFUHCADSRULVC
      VAKUKCBDSUIUJ $.
      $( [27-Nov-2014] $)

    $( All integral elements are complex numbers.  (Contributed by Stefan
       O'Rear, 27-Nov-2014.) $)
    itgocn $p |- ( IntgOver ` S ) C_ CC $=
      ( va vb vc citgo wcel cfv cc wss cv cc0 wceq cdgr ccoe cply wrex crab a1i
      c1 wa cdm cpw df-itgo dmmptss sseli cnex elpw2 itgoval ssrab2 eqsstrd syl
      sylbi wn c0 ndmfv 0ss pm2.61i ) AEUAZFZAEGZHIZUSAHUBZFZVAURVBABVBCJZDJZGK
      LVEMGVENGGSLTDBJZOGPCHQECBDUCUDUEVCAHIZVAAHUFUGVGUTVFVDGKLVDMGVDNGGSLTCAO
      GPZBHQZHBACUHVIHIVGVHBHUIRUJULUKUSUMZUTUNHAEUOUNHIVJHUPRUJUQ $.
      $( [27-Nov-2014] $)

  $}

  ${
    $d ph a b $.  $d X a b $.  $d Y a b $.  $d S a b $.
    cnsrexpcl.s $e |- ( ph -> S e. ( SubRing ` CCfld ) ) $.
    cnsrexpcl.x $e |- ( ph -> X e. S ) $.
    cnsrexpcl.y $e |- ( ph -> Y e. NN0 ) $.
    $( Exponentiation is closed in number rings.  (Contributed by Stefan
       O'Rear, 30-Nov-2014.) $)
    cnsrexpcl $p |- ( ph -> ( X ^ Y ) e. S ) $=
      ( wcel cexp co wi cc0 c1 wceq oveq2 eleq1d imbi2d cc ccnfld syl va vb cn0
      caddc csubrg cfv wss cnfldbas subrgss sseldd exp0 cnfld1 subrg1cl eqeltrd
      cv cmul 3ad2ant2 simp1 expp1 syl2anc simp3 cnfldmul subrgmcl syl3anc 3exp
      w3a a2d nn0ind mpcom ) DUCHACDIJZBHZGACUAUOZIJZBHZKACLIJZBHZKACUBUOZIJZBH
      ZKACVQMUDJZIJZBHZKAVKKUAUBDVLLNZVNVPAWCVMVOBVLLCIOPQVLVQNZVNVSAWDVMVRBVLV
      QCIOPQVLVTNZVNWBAWEVMWABVLVTCIOPQVLDNZVNVKAWFVMVJBVLDCIOPQAVOMBACRHZVOMNA
      BRCABSUEUFHZBRUGEBRSUHUITFUJZCUKTAWHMBHEBSMULUMTUNVQUCHZAVSWBWJAVSWBWJAVS
      VFZWAVRCUPJZBWKWGWJWAWLNAWJWGVSWIUQWJAVSURCVQUSUTWKWHVSCBHZWLBHAWJWHVSEUQ
      WJAVSVAAWJWMVSFUQBSUPVRCVBVCVDUNVEVGVHVI $.
      $( [30-Nov-2014] $)
  $}

  ${
    $d ph k a b $.  $d A k a b $.  $d B a b $.  $d S k a b $.
    fsumcnsrcl.s $e |- ( ph -> S e. ( SubRing ` CCfld ) ) $.
    fsumcnsrcl.a $e |- ( ph -> A e. Fin ) $.
    fsumcnsrcl.b $e |- ( ( ph /\ k e. A ) -> B e. S ) $.
    $( Finite sums are closed in number rings.  (Contributed by Stefan O'Rear,
       30-Nov-2014.) $)
    fsumcnsrcl $p |- ( ph -> sum_ k e. A B e. S ) $=
      ( va vb ccnfld csubrg cfv wcel cc wss syl cv caddc cc0 cnfldbas subrgsubg
      subrgss wa cnfldadd subrgacl 3expb sylan csubg cnfld0 subg0cl fsumcllem
      co ) AIJBCDEADKLMNZDOPFDOKUAUCQAUNIRZDNZJRZDNZUDUOUQSUMDNZFUNUPURUSDSKUOU
      QUEUFUGUHGHAUNTDNZFUNDKUIMNUTDKUBDKTUJUKQQUL $.
      $( [30-Nov-2014] $)
  $}

  ${
    $d P k $.  $d ph k $.  $d X k $.  $d S k $.  $d C k $.
    cnsrplycl.s $e |- ( ph -> S e. ( SubRing ` CCfld ) ) $.
    cnsrplycl.p $e |- ( ph -> P e. ( Poly ` C ) ) $.
    cnsrplycl.x $e |- ( ph -> X e. S ) $.
    cnsrplycl.c $e |- ( ph -> C C_ S ) $.
    $( Polynomials are closed in number rings.  (Contributed by Stefan O'Rear,
       30-Nov-2014.) $)
    cnsrplycl $p |- ( ph -> ( P ` X ) e. S ) $=
      ( vk cfv cc0 co wcel cc wss ccnfld syl syl2anc adantr cdgr ccoe cexp cmul
      cfz cv csu cply wceq csubrg cnfldbas subrgss plyss sseldd coeid2 fzfid wa
      eqid cn0 wf csubg subrgsubg cnfld0 subg0cl coef2 elfznn0 adantl cnsrexpcl
      ffvelrn cnfldmul subrgmcl syl3anc fsumcnsrcl eqeltrd ) AECKZLCUAKZUEMZJUF
      ZCUBKZKZEVRUCMZUDMZJUGZDACDUHKZNZEONVOWCUIABUHKZWDCABDPDOPZWFWDPIADQUJKNZ
      WGFDOQUKULRZBDUMSGUNZADOEWIHUNVSDJCVPEVSURZVPURUOSAVQWBDJFALVPUPAVRVQNZUQ
      ZWHVTDNZWADNWBDNAWHWLFTZWMUSDVSUTZVRUSNZWNAWPWLAWELDNZWPWJAWHWRFWHDQVAKNW
      RDQVBDQLVCVDRRVSDCWKVESTWLWQAVRVPVFVGZUSDVRVSVISWMDEVRWOAEDNWLHTWSVHDQUDV
      TWAVJVKVLVMVN $.
      $( [30-Nov-2014] $)
  $}

  ${
    $d ph a b t $.  $d R a b t $.  $d B a b t $.  $d A a b t $.  $d S t $.
    rgspnval.r $e |- ( ph -> R e. Ring ) $.
    rgspnval.b $e |- ( ph -> B = ( Base ` R ) ) $.
    rgspnval.ss $e |- ( ph -> A C_ B ) $.
    rgspnval.n $e |- ( ph -> N = ( RingSpan ` R ) ) $.
    rgspnval.sp $e |- ( ph -> U = ( N ` A ) ) $.
    $( Value of the ring-span of a set of elements in a ring.  (Contributed by
       Stefan O'Rear, 7-Dec-2014.) $)
    rgspnval $p |- ( ph -> U = |^| { t e. ( SubRing ` R ) | A C_ t } ) $=
      ( vb va cfv wss cbs wcel cvv wceq crgspn csubrg crab cint fveq1d cpw cmpt
      crg elex fveq2 pweqd rabeq syl inteqd mpteq12dv df-rgspn fvex mptex fvmpt
      cv pwex 3syl sseqtrd elpw2 sylibr wrex eqid subrgid eqeltrd sseq2 rcla4ev
      syl2anc intexrab sylib sseq1 rabbidv fvmptg eqtrd 3eqtrd ) AFCGOCEUAOZOZC
      BUTZPZBEUBOZUCZUDZLACGVTKUEAWACMEQOZUFZMUTZWBPZBWDUCZUDZUGZOZWFACVTWMAEUH
      RZESRVTWMTHEUHUINEMNUTZQOZUFZWJBWPUBOZUCZUDZUGWMSUAWPETZMWRXAWHWLXBWQWGWP
      EQUJUKXBWTWKXBWSWDTWTWKTWPEUBUJWJBWSWDULUMUNUONBMUPMWHWLWGEQUQZVAURUSVBUE
      ACWHRZWFSRZWNWFTACWGPXDACDWGJIVCCWGXCVDVEAWCBWDVFZXEADWDRCDPZXFADWGWDIAWO
      WGWDRHWGEWGVGVHUMVIJWCXGBDWDWBDCVJVKVLWCBWDVMVNMCWLWFWHSWMWICTZWKWEXHWJWC
      BWDWICWBVOVPUNWMVGVQVLVRVS $.
      $( [7-Dec-2014] $) $( [30-Nov-2014] $)

    $( The ring-span of a set is a subring.  (Contributed by Stefan O'Rear,
       7-Dec-2014.) $)
    rgspncl $p |- ( ph -> U e. ( SubRing ` R ) ) $=
      ( vt cv wss csubrg cfv crab cint wcel eqeltrd rgspnval c0 wne ssrab2 wrex
      cbs crg eqid subrgid sseq2 rcla4ev syl2anc rabn0 sylibr subrgint sylancr
      syl ) AEBLMZNZLDOPZQZRZUTALBCDEFGHIJKUAAVAUTNVAUBUCZVBUTSUSLUTUDAUSLUTUEZ
      VCACUTSBCNZVDACDUFPZUTHADUGSVFUTSGVFDVFUHUIUQTIUSVELCUTURCBUJUKULUSLUTUMU
      NDVAUOUPT $.
      $( [7-Dec-2014] $) $( [30-Nov-2014] $)

    $( The ring-span of a set contains the set.  (Contributed by Stefan O'Rear,
       30-Nov-2014.) $)
    rgspnssid $p |- ( ph -> A C_ U ) $=
      ( vt cv wss csubrg cfv crab cint ssintub rgspnval syl5sseqr ) ABLMNLDOPZQ
      RBELBUBSALBCDEFGHIJKTUA $.
      $( [30-Nov-2014] $)

    rgspnmin.sr $e |- ( ph -> S e. ( SubRing ` R ) ) $.
    rgspnmin.ss $e |- ( ph -> A C_ S ) $.
    $( The ring-span is contained in all subspaces which contain all the
       generators.  (Contributed by Stefan O'Rear, 30-Nov-2014.) $)
    rgspnmin $p |- ( ph -> U C_ S ) $=
      ( vt cv wss csubrg cfv wcel crab rgspnval sseq2 elrab sylanbrc intss1 syl
      cint eqsstrd ) AFBOPZQZODRSZUAZUHZEAOBCDFGHIJKLUBAEUMTZUNEQAEULTBEQZUOMNU
      KUPOEULUJEBUCUDUEEUMUFUGUI $.
      $( [30-Nov-2014] $)
  $}

  ${
    rgspnid.r $e |- ( ph -> R e. Ring ) $.
    rgspnid.sr $e |- ( ph -> A e. ( SubRing ` R ) ) $.
    rgspnid.sp $e |- ( ph -> S = ( ( RingSpan ` R ) ` A ) ) $.
    $( The span of a subring is itself.  (Contributed by Stefan O'Rear,
       30-Nov-2014.) $)
    rgspnid $p |- ( ph -> S = A ) $=
      ( cbs cfv crgspn eqidd csubrg wcel wss eqid subrgss syl ssid a1i rgspnmin
      rgspnssid eqssd ) ADBABCHIZCBDCJIZEAUCKZABCLIMBUCNFBUCCUCOPQZAUDKZGFBBNAB
      RSTABUCCDUDEUEUFUGGUAUB $.
      $( [30-Nov-2014] $)
  $}

  ${
    $d ph a b c d e p $.  $d B a b c d e p $.  $d X a b c d e p $.
    $d V a b c d e p $.
    rngunsnply.b $e |- ( ph -> B e. ( SubRing ` CCfld ) ) $.
    rngunsnply.x $e |- ( ph -> X e. CC ) $.
    rngunsnply.s $e |- ( ph -> S = ( ( RingSpan ` CCfld ) `
        ( B u. { X } ) ) ) $.
    $( Adjoining one element to a ring results in a set of polynomial
       evaluations.  (Contributed by Stefan O'Rear, 30-Nov-2014.) $)
    rngunsnply $p |- ( ph -> ( V e. S <->
        E. p e. ( Poly ` B ) V = ( p ` X ) ) ) $=
      ( va wcel ccnfld cfv wceq wrex cc syl caddc co cmul vb vc ve vd crgspn cv
      csn cun cply eleq2d cab crg cnrng a1i cbs cnfldbas csubrg wss snssd unssd
      subrgss eqidd cress c1 cc0 cnfld0 cplusg cnfldadd wa plyf ffvelrn syl2anr
      wf eleq1 syl5ibrcom rexlimdva ss2abdv abid2 eqtri syl6sseq plyconst sylan
      c0g cxp adantr vex fvconst2 eqcomd fveq1 eqeq2d rcla4ev syl2anc syl5eqssr
      csubg subrgsubg subg0cl sseldd w3a biid eqeq1 rexbidv cbvrexv syl6bb elab
      ex wi cof simplr simpr subrgacl 3expb adantlr plyadd wfn cvv ffn ad2antlr
      adantl cnex ad2antrr fnfvof syl22anc oveq2 eqeq1d oveq1 3imp syl3anb ovex
      imbi2d sylibr cminusg cneg cnfldneg mp1i cnfld1 cnfldmul plymul fvex cidp
      syl5ss ax-1cn subrg1cl eqid eqeltrrd subrgmcl negex oveq1d mulm1 fnconstg
      subginvcl eqtr2d 3eqtr4d fveq2 imp sylan2b cur cmulr issubrngd2 plyid cid
      df-idp fveq1i fvresi syl5req elabg mpbird rgspnmin sseld mpbiri rexlimivw
      cres wb elab3 syl6ib rgspncl ssun2 rgspnssid snidg ssun1 cnsrplycl impbid
      bitrd ) ADCKDBEUGZUHZLUEMZMZKZDEFUFZMZNZFBUIMZOZACUWFDIUJAUWGUWLAUWGDJUFZ
      UWINZFUWKOZJUKZKUWLAUWFUWPDAUWDPLUWPUWFUWELULKAUMUNZPLUOMZNAUPUNZABUWCPAB
      LUQMZKZBPURZGBPLUPVAQZAEPHUSUTZAUWEVBZAUWFVBZAUAUBUWPRLUWPVCSZTLVDVEAUXGV
      BVELWCMNAVFUNRLVGMNAVHUNAUWPUWMPKZJUKZUWRAUWOUXHJAUWNUXHFUWKAUWHUWKKZVIZU
      XHUWNUWIPKZUXJPPUWHVMEPKZUXLABUWHVJHPPEUWHVKVLUWMUWIPVNVOVPVQUXIPUWRJPVRU
      PVSVTABUWPVEABUWMBKZJUKUWPJBVRAUXNUWOJAUXNUWOAUXNVIZPUWMUGWDZUWKKZUWMEUXP
      MZNZUWOAUXBUXNUXQUXCUWMBWAWBUXOUXRUWMUXOUXMUXRUWMNAUXMUXNHWEPUWMEJWFWGQWH
      UWNUXSFUXPUWKUWHUXPNUWIUXRUWMEUWHUXPWIWJWKWLXEVQWMZABLWNMKZVEBKAUXAUYAGBL
      WOQZBLVEVFWPQWQAUAUFZUWPKZUBUFZUWPKZWRZUYCUYERSZUWINZFUWKOZUYHUWPKAAUYDUY
      CEUCUFZMZNZUCUWKOZUYFUYEEUDUFZMZNZUDUWKOZUYJAWSZUWOUYNJUYCUAWFUWMUYCNZUWO
      UYCUWINZFUWKOUYNUYTUWNVUAFUWKUWMUYCUWIWTXAVUAUYMFUCUWKUWHUYKNUWIUYLUYCEUW
      HUYKWIWJXBXCXDZUWOUYRJUYEUBWFUWMUYENZUWOUYEUWINZFUWKOUYRVUCUWNVUDFUWKUWMU
      YEUWIWTXAVUDUYQFUDUWKUWHUYONUWIUYPUYEEUWHUYOWIWJXBXCXDZAUYNUYRUYJAUYMUYRU
      YJXFZUCUWKAUYKUWKKZVIZVUFUYMUYRUYLUYERSZUWINZFUWKOZXFVUHUYQVUKUDUWKVUHUYO
      UWKKZVIZVUKUYQUYLUYPRSZUWINZFUWKOZVUMUYKUYORXGSZUWKKVUNEVUQMZNZVUPVUMJUAB
      UYKUYOAVUGVULXHZVUHVULXIZVUHUXNUYCBKZVIZUWMUYCRSBKZVULAVVCVVDVUGAUXAVVCVV
      DGUXAUXNVVBVVDBRLUWMUYCVHXJXKWBXLZXLZXMVUMVURVUNVUMUYKPXNZUYOPXNZPXOKZUXM
      VURVUNNVUGVVGAVULVUGPPUYKVMZVVGBUYKVJZPPUYKXPQZXQZVULVVHVUHVULPPUYOVMVVHB
      UYOVJPPUYOXPQXRZVVIVUMXSUNZAUXMVUGVULHXTZPRUYKUYOXOEYAYBWHVUOVUSFVUQUWKUW
      HVUQNUWIVURVUNEUWHVUQWIWJWKWLUYQVUJVUOFUWKUYQVUIVUNUWIUYEUYPUYLRYCYDXAVOV
      PUYMUYJVUKUYRUYMUYIVUJFUWKUYMUYHVUIUWIUYCUYLUYERYEYDXAYIVOVPYFYGUWOUYJJUY
      HUYCUYERYHUWMUYHNUWNUYIFUWKUWMUYHUWIWTXAXDYJAUYDVIUYCLYKMZMZUWINZFUWKOZVV
      RUWPKUYDAUYNVVTVUBAUYNVVTAUYMVVTUCUWKVUHVVTUYMUYLVVQMZUWINZFUWKOZVUHPVDYL
      ZUGWDZUYKTXGZSZUWKKVWAEVWGMZNZVWCVUHJUABVWEUYKAVWEUWKKZVUGAUXBVWDBKVWJUXC
      AVDVVQMZVWDBVDPKVWKVWDNAUUAVDYMYNAUYAVDBKZVWKBKUYBAUXAVWLGBLVDYOUUBQZBLVV
      QVDVVQUUCUUJWLUUDVWDBWAWLWEAVUGXIVVEAVVCUWMUYCTSBKZVUGAUXAVVCVWNGUXAUXNVV
      BVWNBLTUWMUYCYPUUEXKWBXLZYQVUHUYLYLZEVWEMZUYLTSZVWAVWHVUHVWRVWDUYLTSZVWPV
      UHVWQVWDUYLTVUHUXMVWQVWDNAUXMVUGHWEZPVWDEVDUUFZWGQUUGVUHUYLPKZVWSVWPNVUGV
      VJUXMVXBAVVKHPPEUYKVKVLZUYLUUHQUUKVUHVXBVWAVWPNVXCUYLYMQVUHVWEPXNZVVGVVIU
      XMVWHVWRNVWDXOKVXDVUHVXAPVWDXOUUIYNVUGVVGAVVLXRVVIVUHXSUNVWTPTVWEUYKXOEYA
      YBUULVWBVWIFVWGUWKUWHVWGNUWIVWHVWAEUWHVWGWIWJWKWLUYMVVSVWBFUWKUYMVVRVWAUW
      IUYCUYLVVQUUMYDXAVOVPUUNUUOUWOVVTJVVRUYCVVQYRUWMVVRNUWNVVSFUWKUWMVVRUWIWT
      XAXDYJVDLUUPMNAYOUNTLUUQMNAYPUNABUWPVDUXTVWMWQUYGUYCUYETSZUWINZFUWKOZVXEU
      WPKAAUYDUYNUYFUYRVXGUYSVUBVUEAUYNUYRVXGAUYMUYRVXGXFZUCUWKVUHVXHUYMUYRUYLU
      YETSZUWINZFUWKOZXFVUHUYQVXKUDUWKVUMVXKUYQUYLUYPTSZUWINZFUWKOZVUMUYKUYOVWF
      SZUWKKVXLEVXOMZNZVXNVUMJUABUYKUYOVUTVVAVVFVUHVVCVWNVULVWOXLYQVUMVXPVXLVUM
      VVGVVHVVIUXMVXPVXLNVVMVVNVVOVVPPTUYKUYOXOEYAYBWHVXMVXQFVXOUWKUWHVXONUWIVX
      PVXLEUWHVXOWIWJWKWLUYQVXJVXMFUWKUYQVXIVXLUWIUYEUYPUYLTYCYDXAVOVPUYMVXGVXK
      UYRUYMVXFVXJFUWKUYMVXEVXIUWIUYCUYLUYETYEYDXAYIVOVPYFYGUWOVXGJVXEUYCUYETYH
      UWMVXENUWNVXFFUWKUWMVXEUWIWTXAXDYJUWQUURABUWCUWPUXTAEUWPAEUWPKZEUWINZFUWK
      OZAYSUWKKZEEYSMZNZVXTAUXBVWLVYAUXCVWMBUUSWLAVYBEUUTPUVKZMZEEYSVYDUVAUVBAU
      XMVYEENHPEUVCQUVDVXSVYCFYSUWKUWHYSNUWIVYBEEUWHYSWIWJWKWLAUXMVXRVXTUVLHUWO
      VXTJEPUWMENUWNVXSFUWKUWMEUWIWTXAUVEQUVFUSUTUVGUVHUWOUWLJDUWJDXOKZFUWKUWJV
      YFUWIXOKEUWHYRDUWIXOVNUVIUVJUWMDNUWNUWJFUWKUWMDUWIWTXAUVMUVNAUWJUWGFUWKUX
      KUWGUWJUWIUWFKUXKBUWHUWFEAUWFUWTKUXJAUWDPLUWFUWEUWQUWSUXDUXEUXFUVOWEAUXJX
      IAEUWFKUXJAUWCUWFEAUWCUWDUWFUWCBUVPAUWDPLUWFUWEUWQUWSUXDUXEUXFUVQZYTAUXME
      UWCKHEPUVRQWQWEABUWFURUXJABUWDUWFBUWCUVSVYGYTWEUVTDUWIUWFVNVOVPUWAUWB $.
      $( [30-Nov-2014] $)
  $}

  ${
    $d ph i j $.  $d F i $.  $d S i j $.  $d K i j $.  $d B j k $.  $d i j k $.
    flcidc.f $e |- ( ph -> F = ( j e. S |-> if ( j = K , 1 , 0 ) ) ) $.
    flcidc.s $e |- ( ph -> S e. Fin ) $.
    flcidc.k $e |- ( ph -> K e. S ) $.
    flcidc.b $e |- ( ( ph /\ i e. S ) -> B e. CC ) $.
    $( Finite linear combinations with an indicator function.  (Contributed by
       Stefan O'Rear, 5-Dec-2014.) $)
    flcidc $p |- ( ph -> sum_ i e. S ( ( F ` i ) x. B ) = [_ K / i ]_ B ) $=
      ( cmul wcel wa c1 wceq cc0 cc syl eqtrd vk csn cv cfv co csu csb cif cmpt
      fveq1d adantr snssd sselda eqeq1 ifbid eqid ax-1cn elexi ifex fvmpt elsni
      weq 0cn iftrue adantl oveq1d syldan mulid2 sumeq2dv keepel syl6eqel mulcl
      syl2anc cdif eldifi wn eldifn sylnib iffalse mul02 fsumss wi eleq1 anbi2d
      elsn csbeq1 eleq1d imbi12d ax-17 hbcsb1 hbel csbeq1a chvar vtoclg anabsi7
      wel hbim mpdan sumsns 3eqtr3d ) AGUBZDUCZFUDZBLUEZDUFXABDUFZCXDDUFDGBUGZA
      XAXDBDAXBXAMZNZXDOBLUEZBXHXCOBLXHXCXBGPZOQUHZOXHXCXBECEUCZGPZOQUHZUIZUDZX
      KAXCXPPZXGAXBFXOHUJZUKXHXBCMZXPXKPZAXACXBAGCJULZUMZEXBXNXKCXOEDVBXMXJOQXL
      XBGUNUOXOUPXJOQORUQURQRVCURUSUTZSTZXGXKOPZAXGXJYEXBGVAXJOQVDSVETVFXHBRMZX
      IBPAXGXSYFYBKVGZBVHSTVIAXACXDDYAXHXCRMYFXDRMXHXCXKRYDXJOQRUQVCVJVKYGXCBVL
      VMAXBCXAVNMZNZXDQBLUEZQYIXCQBLYIXCXKQYIXCXPXKAXQYHXRUKYIXSXTYHXSAXBCXAVOV
      EZYCSTYHXKQPZAYHXJVPYLYHXGXJXBCXAVQDGWEVRXJOQVSSVETVFYIYFYJQPAYHXSYFYKKVG
      BVTSTIWAAGCMZXFRMZXEXFPJAYMYNJAYMYNAXLCMZNZDXLBUGZRMZWBZAYMNZYNWBEGCXMYPY
      TYRYNXMYOYMAXLGCWCWDXMYQXFRDXLGBWFWGWHAXSNZYFWBYSDEYPYRDYPDWIDUAEYQRDUAXL
      BUAEWPDWIWJXLRMDWIWKWQDEVBZUUAYPYFYRUUBXSYOAXBXLCWCWDUUBBYQRDXLBWLWGWHKWM
      WNWOWRBDGCWSVMWT $.
      $( [5-Dec-2014] $)
  $}

  $(
  @{
    @d ph i a b c @.  @d B i a b c @.  @d G i a b c @.  @d F i a b c @.
    cnplyspn.b @e |- ( ph -> B e. ( SubRing ` CCfld ) ) @.
    cnplyspn.a @e |- ( ph -> A = ( ( subringAlg ` CCfld ) ` B ) ) @.
    cnplyspn.s @e |- ( ph -> S = ( ( LSpan ` A ) ` ran F ) ) @.
    cnplyspn.f @e |- ( ph -> F = ( j e. ( 0 ... ( K - 1 ) ) |-> ( R ^ j ) ) )
        @.
    @( Finite spans of powers are the values of limited-degree polynomials. @)
    cnplyspn @p |- ( ph -> ( X e. S <->
        E. f e. ( B Poly< K ) X = ( f ` R ) ) ) @=
      ? @.
  @}

    @( TODO @)
    @( Finite spans in terms of limited degree polynomials. @)
    @( Patch monic definition into itgo. @)
    @( Transitivity of finite spans. @)
    @( Forward itgofg. @)
    @( Reverse using ac6sfi. @)
    @( itgofg2 and lemmas @)
    @( start on Noetherian @)

  @{
    Xitgofglem5.b @e |- ( ph -> B e. ( SubRing ` CCfld ) ) @.
    Xitgofglem5.x @e |- ( ph -> X e. CC ) @.
    Xitgofglem5.u @e |- ( ph -> U e. ( Poly ` B ) ) @.
    Xitgofglem5.d @e |- ( ph -> D e. NN0 ) @.
    Xitgofglem5.d2 @e |- ( ph -> ( deg ` U ) < D ) @.
    Xitgofglem5.a @e |- A = ( ( subringAlg ` CCfld ) ` B ) @.
    Xitgofglem5.q @e |- Q = { x | E. i e. ( 0 ... ( D - 1 ) ) x = ( X ^ i ) }
        @.
    @( Lemma for ~ itgofg .  The span of the first ` D ` powers of ` X `
       contains all evaluations of polynomials with degree at most ` D ` . @)
    Xitgofglem5 @p |- ( ph -> ( U ` X ) e. ( ( LSpan ` A ) ` Q ) ) @=
      ? @.
  @}

  @{
    Xitgofglem4.b @e |- ( ph -> B e. ( SubRing ` CCfld ) ) @.
    Xitgofglem4.p @e |- ( ph -> P e. ( Monic ` B ) ) @.
    Xitgofglem4.x @e |- ( ph -> X e. CC ) @.
    Xitgofglem4.x0 @e |- ( ph -> ( P ` X ) = 0 ) @.
    Xitgofglem4.u @e |- ( ph -> U e. ( Poly ` B ) ) @.
    Xitgofglem4.f @e |- A = ( ( subringAlg ` CCfld ) ` B ) @.
    Xitgofglem4.g @e |- Q = { x | E. i e. ( 0 ... ( ( deg ` P ) - 1 ) )
        x = ( X ^ i ) } @.
    @( Lemma for ~ itgofg .  Use the polynomial identity to inductively prove
       that the span of Q contains all polynomial evaluations. @)
    Xitgofglem4 @p |- ( ph -> ( U ` X ) e. ( ( LSpan ` A ) ` Q ) ) @=
      ? @.
  @}

  @{
    Xitgofglem3.a @e |- ( ph -> B e. ( SubRing ` CCfld ) ) @.
    Xitgofglem3.b @e |- ( ph -> P e. ( Monic ` B ) ) @.
    Xitgofglem3.c @e |- ( ph -> X e. CC ) @.
    Xitgofglem3.d @e |- ( ph -> ( P ` X ) = 0 ) @.
    Xitgofglem3.e @e |- S = ( ( RingSpan ` CCfld ) ` ( B u. { X } ) ) @.
    Xitgofglem3.f @e |- A = ( ( subringAlg ` ( CCfld |` S ) ) ` B ) @.
    Xitgofglem3.g @e |- Q = { x | E. i e. ( 0 ... ( deg ` P ) )
        x = ( X ^ i ) } @.
    @( Lemma for ~ itgofg .  Given a polynomial witnessing the integrality of
       ` X ` , demonstrate the finite generation of ` A ` . @)
    Xitgofglem3 @p |- ( ph -> ( ( LSpan ` A ) ` Q ) = S ) @=
      ? @.
  @}

  @{
    Xitgofg.s @e |- S = ( ( RingSpan ` CCfld ) ` ( B u. { X } ) ) @.
    Xitgofg.a @e |- A = ( ( subringAlg ` ( CCfld |` S ) ) ` B ) @.
    @( Lemma for ~ itgofg . @)
    Xitgofglem2 @p |- ( ( B e. ( SubRing ` CCfld ) /\ A e. LFinGen ) ->
          X e. ( IntgOver ` B ) ) @=
      ? @.

    @( Lemma for ~ itgofg . @)
    Xitgofglem1 @p |- ( ( B e. ( SubRing ` CCfld ) /\ X e. ( IntgOver ` B ) )
        ->
          A e. LFinGen ) @=
      ? @.

    @( An element is finitely generated over a ring if and only adjoining it to
       the base ring results in a finitely spanned algebra.

       Both directions:  The ring span of a ring R and a singleton is the
       R-linear span of the powers of the singleton.  It is also the set of
       values of R-polynomials evaluated at the singleton.

       Forward:  If X is algebraic, it is the root of a monic polynomial P with
       degree D. The span of the finite set of powers (X^0 ...  X^D) is
       finitely spanned, and it is equal to the span of all the powers: it is a
       subset because the ring span is a ring which contains all the powers,
       and it also a superset, because it is a linear subspace that contains
       all of the powers (by induction).

       Reverse:  Suppose the ring of polynomial values is finitely spanned,
       that is, there is a finite set of polynomials P(i) such that any linear
       subspace that contains P(i)(X) contains all polynomials of X. Let N be
       one more than the supremum of the degrees of P(i).  By assumption (X^N)
       is in the span of P(i)(X), so there is an R-linear combination of
       P(i)(X) equal to (X^N); but an R-linear combination of R-polynomials
       with degree less than N is an R-polynomial with degree less than N, so
       let Q be an R-polynomial such that Q(X) = (X^N) and deg(Q) < N. Then
       (X^N) - Q(X) is a monic R-polynomial with X as a root, i.e.  X is
       algebraic. @)
    itgofg @p |- ( B e. ( SubRing ` CCfld ) -> ( X e. ( IntgOver ` B ) <->
          A e. LFinGen ) ) @=
      ? @.
  @}

  @{
    rgspnchn.r @e |- ( ph -> R e. Ring ) @.
    rgspnchn.s @e |- ( ph -> S = ( RingSpan ` R ) ) @.
    rgspnchn.b @e |- ( ph -> B = ( Base ` R ) ) @.
    rgspnchn.x @e |- ( ph -> X C_ B ) @.
    rgspnchn.a @e |- ( ph -> A C_ B ) @.
    @( Chaining lemma for ring spans. @)
    rgspnchn @p |- ( ph -> ( R ` ( ( R ` X ) u. A ) ) = ( R ` ( X u. A ) ) ) @=
      ? @.
  @}

  @{
    itgofg2.ba @e |- ( ph -> B e. ( SubRing ` CCfld ) ) @.
    itgofg2.fi @e |- ( ph -> F e. Fin ) @.
    itgofg2.ss @e |- ( ph -> F C_ ( IntgOver ` B ) ) @.
    itgofg2.sp @e |- ( ph -> S = ( ( RingSpan ` CCfld ) ` ( B u. F ) ) ) @.
    itgofg2.al @e |- ( ph -> A = ( ( subringAlg ` ( CCfld |` S ) ) ` B ) ) @.
    @( Adjoining finitely many integral elements to a ring still gives a finite
       extension. @)
    itgofg2 @p |- ( ph -> A e. LFinGen ) @=
      ? @.
  @}

  @{
    itgocllem.a @e |- S = ( ( RingSpan ` CCfld ) ` ( R u. { X } ) ) @.
    itgocllem.b @e |- T = ( ( RingSpan ` CCfld ) ` ( S u. { Y } ) ) @.
    itgocllem.c @e |- A = ( ( subringAlg ` ( CCfld |` S ) ) ` R ) @.
    itgocllem.d @e |- B = ( ( subringAlg ` ( CCfld |` T ) ) ` S ) @.
    itgocllem.e @e |- C = ( ( subringAlg ` ( CCfld |` T ) ) ` R ) @.
    itgocllem.f @e |- Z e. { ( X + Y ) , ( X x. Y ) } @.
    @( Integrality is transitive(?). @)
    itgocllem @p |- ( ( R e. ( SubRing ` CCfld ) /\ X e. ( IntgOver ` R ) /\
          Y e. ( IntgOver ` R ) ) -> Z e. ( IntgOver ` R ) ) @=
      ? @.
  @}
  $)

